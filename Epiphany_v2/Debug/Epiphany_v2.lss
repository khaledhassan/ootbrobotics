
Epiphany_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000042e  00802000  000028e0  00002974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023b  0080242e  0080242e  00002da2  2**0
                  ALLOC
  3 .stab         00003054  00000000  00000000  00002da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ad0  00000000  00000000  00005df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000068c8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000468  00000000  00000000  000068f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006b60  00000000  00000000  00006d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b74  00000000  00000000  0000d8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002dcd  00000000  00000000  0000f433  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001038  00000000  00000000  00012200  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000256a  00000000  00000000  00013238  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000037a5  00000000  00000000  000157a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b8  00000000  00000000  00018f47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	84 c1       	rjmp	.+776    	; 0x30a <__ctors_end>
       2:	00 00       	nop
       4:	a7 c1       	rjmp	.+846    	; 0x354 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c1       	rjmp	.+842    	; 0x354 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c1       	rjmp	.+838    	; 0x354 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c1       	rjmp	.+834    	; 0x354 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c1       	rjmp	.+830    	; 0x354 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c1       	rjmp	.+826    	; 0x354 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c1       	rjmp	.+822    	; 0x354 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c1       	rjmp	.+818    	; 0x354 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c1       	rjmp	.+814    	; 0x354 <__bad_interrupt>
      26:	00 00       	nop
      28:	95 c1       	rjmp	.+810    	; 0x354 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	93 c1       	rjmp	.+806    	; 0x354 <__bad_interrupt>
      2e:	00 00       	nop
      30:	91 c1       	rjmp	.+802    	; 0x354 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c1       	rjmp	.+798    	; 0x354 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c1       	rjmp	.+794    	; 0x354 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c1       	rjmp	.+790    	; 0x354 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c1       	rjmp	.+786    	; 0x354 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c1       	rjmp	.+782    	; 0x354 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c1       	rjmp	.+778    	; 0x354 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c1       	rjmp	.+774    	; 0x354 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c1       	rjmp	.+770    	; 0x354 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c1       	rjmp	.+766    	; 0x354 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c1       	rjmp	.+762    	; 0x354 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c1       	rjmp	.+758    	; 0x354 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c1       	rjmp	.+754    	; 0x354 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c6       	rjmp	.+3292   	; 0xd42 <__vector_25>
      66:	00 00       	nop
      68:	e6 c7       	rjmp	.+4044   	; 0x1036 <__vector_26>
      6a:	00 00       	nop
      6c:	73 c1       	rjmp	.+742    	; 0x354 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9e c6       	rjmp	.+3388   	; 0xdae <__vector_28>
      72:	00 00       	nop
      74:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_29>
      78:	6d c1       	rjmp	.+730    	; 0x354 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c1       	rjmp	.+726    	; 0x354 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c1       	rjmp	.+722    	; 0x354 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c1       	rjmp	.+718    	; 0x354 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c1       	rjmp	.+714    	; 0x354 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c1       	rjmp	.+710    	; 0x354 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c1       	rjmp	.+706    	; 0x354 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c1       	rjmp	.+702    	; 0x354 <__bad_interrupt>
      96:	00 00       	nop
      98:	5d c1       	rjmp	.+698    	; 0x354 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fe c2       	rjmp	.+1532   	; 0x69a <__vector_39>
      9e:	00 00       	nop
      a0:	42 c3       	rjmp	.+1668   	; 0x726 <__vector_40>
      a2:	00 00       	nop
      a4:	86 c3       	rjmp	.+1804   	; 0x7b2 <__vector_41>
      a6:	00 00       	nop
      a8:	ca c3       	rjmp	.+1940   	; 0x83e <__vector_42>
      aa:	00 00       	nop
      ac:	61 c4       	rjmp	.+2242   	; 0x970 <__vector_43>
      ae:	00 00       	nop
      b0:	51 c1       	rjmp	.+674    	; 0x354 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4f c1       	rjmp	.+670    	; 0x354 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4d c1       	rjmp	.+666    	; 0x354 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4b c1       	rjmp	.+662    	; 0x354 <__bad_interrupt>
      be:	00 00       	nop
      c0:	49 c1       	rjmp	.+658    	; 0x354 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	47 c1       	rjmp	.+654    	; 0x354 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	45 c1       	rjmp	.+650    	; 0x354 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	43 c1       	rjmp	.+646    	; 0x354 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	41 c1       	rjmp	.+642    	; 0x354 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	86 c4       	rjmp	.+2316   	; 0x9e2 <__vector_53>
      d6:	00 00       	nop
      d8:	3d c1       	rjmp	.+634    	; 0x354 <__bad_interrupt>
      da:	00 00       	nop
      dc:	3b c1       	rjmp	.+630    	; 0x354 <__bad_interrupt>
      de:	00 00       	nop
      e0:	39 c1       	rjmp	.+626    	; 0x354 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	37 c1       	rjmp	.+622    	; 0x354 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	35 c1       	rjmp	.+618    	; 0x354 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	33 c1       	rjmp	.+614    	; 0x354 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	31 c1       	rjmp	.+610    	; 0x354 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	fe c6       	rjmp	.+3580   	; 0xef2 <__vector_61>
      f6:	00 00       	nop
      f8:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_62>
      fc:	2b c1       	rjmp	.+598    	; 0x354 <__bad_interrupt>
      fe:	00 00       	nop
     100:	29 c1       	rjmp	.+594    	; 0x354 <__bad_interrupt>
     102:	00 00       	nop
     104:	27 c1       	rjmp	.+590    	; 0x354 <__bad_interrupt>
     106:	00 00       	nop
     108:	25 c1       	rjmp	.+586    	; 0x354 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	23 c1       	rjmp	.+582    	; 0x354 <__bad_interrupt>
     10e:	00 00       	nop
     110:	21 c1       	rjmp	.+578    	; 0x354 <__bad_interrupt>
     112:	00 00       	nop
     114:	1f c1       	rjmp	.+574    	; 0x354 <__bad_interrupt>
     116:	00 00       	nop
     118:	1d c1       	rjmp	.+570    	; 0x354 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a6 c1       	rjmp	.+844    	; 0x46a <__vector_71>
     11e:	00 00       	nop
     120:	ea c1       	rjmp	.+980    	; 0x4f6 <__vector_72>
     122:	00 00       	nop
     124:	2e c2       	rjmp	.+1116   	; 0x582 <__vector_73>
     126:	00 00       	nop
     128:	72 c2       	rjmp	.+1252   	; 0x60e <__vector_74>
     12a:	00 00       	nop
     12c:	13 c1       	rjmp	.+550    	; 0x354 <__bad_interrupt>
     12e:	00 00       	nop
     130:	11 c1       	rjmp	.+546    	; 0x354 <__bad_interrupt>
     132:	00 00       	nop
     134:	0f c1       	rjmp	.+542    	; 0x354 <__bad_interrupt>
     136:	00 00       	nop
     138:	0d c1       	rjmp	.+538    	; 0x354 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	0b c1       	rjmp	.+534    	; 0x354 <__bad_interrupt>
     13e:	00 00       	nop
     140:	09 c1       	rjmp	.+530    	; 0x354 <__bad_interrupt>
     142:	00 00       	nop
     144:	07 c1       	rjmp	.+526    	; 0x354 <__bad_interrupt>
     146:	00 00       	nop
     148:	05 c1       	rjmp	.+522    	; 0x354 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	03 c1       	rjmp	.+518    	; 0x354 <__bad_interrupt>
     14e:	00 00       	nop
     150:	01 c1       	rjmp	.+514    	; 0x354 <__bad_interrupt>
     152:	00 00       	nop
     154:	ff c0       	rjmp	.+510    	; 0x354 <__bad_interrupt>
     156:	00 00       	nop
     158:	fd c0       	rjmp	.+506    	; 0x354 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	fb c0       	rjmp	.+502    	; 0x354 <__bad_interrupt>
     15e:	00 00       	nop
     160:	5c c6       	rjmp	.+3256   	; 0xe1a <__vector_88>
     162:	00 00       	nop
     164:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_89>
     168:	f5 c0       	rjmp	.+490    	; 0x354 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8c c6       	rjmp	.+3352   	; 0xe86 <__vector_91>
     16e:	00 00       	nop
     170:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_92>
     174:	ef c0       	rjmp	.+478    	; 0x354 <__bad_interrupt>
     176:	00 00       	nop
     178:	ed c0       	rjmp	.+474    	; 0x354 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	eb c0       	rjmp	.+470    	; 0x354 <__bad_interrupt>
     17e:	00 00       	nop
     180:	e9 c0       	rjmp	.+466    	; 0x354 <__bad_interrupt>
     182:	00 00       	nop
     184:	e7 c0       	rjmp	.+462    	; 0x354 <__bad_interrupt>
     186:	00 00       	nop
     188:	e5 c0       	rjmp	.+458    	; 0x354 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	e3 c0       	rjmp	.+454    	; 0x354 <__bad_interrupt>
     18e:	00 00       	nop
     190:	e1 c0       	rjmp	.+450    	; 0x354 <__bad_interrupt>
     192:	00 00       	nop
     194:	df c0       	rjmp	.+446    	; 0x354 <__bad_interrupt>
     196:	00 00       	nop
     198:	dd c0       	rjmp	.+442    	; 0x354 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	db c0       	rjmp	.+438    	; 0x354 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d9 c0       	rjmp	.+434    	; 0x354 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d7 c0       	rjmp	.+430    	; 0x354 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d5 c0       	rjmp	.+426    	; 0x354 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	d3 c0       	rjmp	.+422    	; 0x354 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	d1 c0       	rjmp	.+418    	; 0x354 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	cf c0       	rjmp	.+414    	; 0x354 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	cd c0       	rjmp	.+410    	; 0x354 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	cb c0       	rjmp	.+406    	; 0x354 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c9 c0       	rjmp	.+402    	; 0x354 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c7 c0       	rjmp	.+398    	; 0x354 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	c5 c0       	rjmp	.+394    	; 0x354 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	c3 c0       	rjmp	.+390    	; 0x354 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	c1 c0       	rjmp	.+386    	; 0x354 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	bf c0       	rjmp	.+382    	; 0x354 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	bd c0       	rjmp	.+378    	; 0x354 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	c0 c6       	rjmp	.+3456   	; 0xf5e <__vector_119>
     1de:	00 00       	nop
     1e0:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_120>
     1e4:	b7 c0       	rjmp	.+366    	; 0x354 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	f0 c6       	rjmp	.+3552   	; 0xfca <__vector_122>
     1ea:	00 00       	nop
     1ec:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_123>
     1f0:	b1 c0       	rjmp	.+354    	; 0x354 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	af c0       	rjmp	.+350    	; 0x354 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	ad c0       	rjmp	.+346    	; 0x354 <__bad_interrupt>
	...

000001fc <__c.2006>:
     1fc:	6e 61 6e 00                                         nan.

00000200 <__c.2004>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__c.2144>:
     2fe:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000030a <__ctors_end>:
     30a:	11 24       	eor	r1, r1
     30c:	1f be       	out	0x3f, r1	; 63
     30e:	cf ef       	ldi	r28, 0xFF	; 255
     310:	df e3       	ldi	r29, 0x3F	; 63
     312:	de bf       	out	0x3e, r29	; 62
     314:	cd bf       	out	0x3d, r28	; 61
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0c bf       	out	0x3c, r16	; 60
     31a:	18 be       	out	0x38, r1	; 56
     31c:	19 be       	out	0x39, r1	; 57
     31e:	1a be       	out	0x3a, r1	; 58
     320:	1b be       	out	0x3b, r1	; 59

00000322 <__do_copy_data>:
     322:	14 e2       	ldi	r17, 0x24	; 36
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b0 e2       	ldi	r27, 0x20	; 32
     328:	e0 ee       	ldi	r30, 0xE0	; 224
     32a:	f8 e2       	ldi	r31, 0x28	; 40
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	ae 32       	cpi	r26, 0x2E	; 46
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>
     33c:	1b be       	out	0x3b, r1	; 59

0000033e <__do_clear_bss>:
     33e:	26 e2       	ldi	r18, 0x26	; 38
     340:	ae e2       	ldi	r26, 0x2E	; 46
     342:	b4 e2       	ldi	r27, 0x24	; 36
     344:	01 c0       	rjmp	.+2      	; 0x348 <.do_clear_bss_start>

00000346 <.do_clear_bss_loop>:
     346:	1d 92       	st	X+, r1

00000348 <.do_clear_bss_start>:
     348:	a9 36       	cpi	r26, 0x69	; 105
     34a:	b2 07       	cpc	r27, r18
     34c:	e1 f7       	brne	.-8      	; 0x346 <.do_clear_bss_loop>
     34e:	7c d4       	rcall	.+2296   	; 0xc48 <main>
     350:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <_exit>

00000354 <__bad_interrupt>:
     354:	55 ce       	rjmp	.-854    	; 0x0 <__vectors>

00000356 <adcInit>:
#include "adc.h"
#include "utility.h"


void adcInit()
{
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
	
	ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     366:	80 e2       	ldi	r24, 0x20	; 32
     368:	0e 94 16 0b 	call	0x162c	; 0x162c <ReadCalibrationByte>
     36c:	c0 e0       	ldi	r28, 0x00	; 0
     36e:	d2 e0       	ldi	r29, 0x02	; 2
     370:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     372:	81 e2       	ldi	r24, 0x21	; 33
     374:	0e 94 16 0b 	call	0x162c	; 0x162c <ReadCalibrationByte>
     378:	8d 87       	std	Y+13, r24	; 0x0d

	ADCA.CTRLB = 
     37a:	88 e1       	ldi	r24, 0x18	; 24
     37c:	f8 2e       	mov	r15, r24
     37e:	f9 82       	std	Y+1, r15	; 0x01
						ADC_CURRLIMIT_NO_gc		|
						ADC_CONMODE_bm			|	//enable signed mode
						ADC_FREERUN_bm			|
						ADC_RESOLUTION_12BIT_gc	;
					
	ADCA.REFCTRL =		ADC_REFSEL_VCC_gc;			//utilize the vref of vcc/1.6 = 2.0625 V
     380:	00 e1       	ldi	r16, 0x10	; 16
     382:	0a 83       	std	Y+2, r16	; 0x02
	
	ADCA.PRESCALER =	ADC_PRESCALER_DIV32_gc;		//ADC will be clocked at 1MHz
     384:	93 e0       	ldi	r25, 0x03	; 3
     386:	c9 2e       	mov	r12, r25
     388:	cc 82       	std	Y+4, r12	; 0x04
	
	//set all the adc channels to be single ended inputs	
	ADCA.CH0.CTRL =		ADC_CH_INPUTMODE_SINGLEENDED_gc;
     38a:	11 e0       	ldi	r17, 0x01	; 1
     38c:	18 a3       	std	Y+32, r17	; 0x20
	ADCA.CH1.CTRL =		ADC_CH_INPUTMODE_SINGLEENDED_gc;
     38e:	18 a7       	std	Y+40, r17	; 0x28
	ADCA.CH2.CTRL =		ADC_CH_INPUTMODE_SINGLEENDED_gc;
     390:	18 ab       	std	Y+48, r17	; 0x30
	ADCA.CH3.CTRL =		ADC_CH_INPUTMODE_SINGLEENDED_gc;
     392:	18 af       	std	Y+56, r17	; 0x38
	
	//analog channels 0-3 will correlate to the analog pins 0-3 on port A
	ADCA.CH0.MUXCTRL =	ADC_CH_MUXPOS_PIN0_gc;
     394:	19 a2       	std	Y+33, r1	; 0x21
	ADCA.CH1.MUXCTRL =	ADC_CH_MUXPOS_PIN1_gc;
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	89 a7       	std	Y+41, r24	; 0x29
	ADCA.CH2.MUXCTRL =	ADC_CH_MUXPOS_PIN2_gc;
     39a:	09 ab       	std	Y+49, r16	; 0x31
	ADCA.CH3.MUXCTRL =	ADC_CH_MUXPOS_PIN3_gc;
     39c:	f9 ae       	std	Y+57, r15	; 0x39
	
	//initialize conversion complete interrupts on all ADCA channel inputs
	ADCA.CH0.INTCTRL =	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;	
     39e:	1a a3       	std	Y+34, r17	; 0x22
	ADCA.CH1.INTCTRL =	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     3a0:	1a a7       	std	Y+42, r17	; 0x2a
	ADCA.CH2.INTCTRL =	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     3a2:	1a ab       	std	Y+50, r17	; 0x32
	ADCA.CH3.INTCTRL =	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     3a4:	1a af       	std	Y+58, r17	; 0x3a
	
	ADCA.EVCTRL =		ADC_SWEEP_0123_gc;
     3a6:	20 ec       	ldi	r18, 0xC0	; 192
     3a8:	d2 2e       	mov	r13, r18
     3aa:	db 82       	std	Y+3, r13	; 0x03
	
	//enable ADCA, and start conversions on all channels
	ADCA.CTRLA =		ADC_ENABLE_bm	|
     3ac:	3d e3       	ldi	r19, 0x3D	; 61
     3ae:	e3 2e       	mov	r14, r19
     3b0:	e8 82       	st	Y, r14
						ADC_CH0START_bm	|
						ADC_CH1START_bm	|
						ADC_CH2START_bm	|
						ADC_CH3START_bm	;

	ADCB.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     3b2:	84 e2       	ldi	r24, 0x24	; 36
     3b4:	0e 94 16 0b 	call	0x162c	; 0x162c <ReadCalibrationByte>
     3b8:	c0 e4       	ldi	r28, 0x40	; 64
     3ba:	d2 e0       	ldi	r29, 0x02	; 2
     3bc:	8c 87       	std	Y+12, r24	; 0x0c
	ADCB.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     3be:	85 e2       	ldi	r24, 0x25	; 37
     3c0:	0e 94 16 0b 	call	0x162c	; 0x162c <ReadCalibrationByte>
     3c4:	8d 87       	std	Y+13, r24	; 0x0d
	
	ADCB.CTRLB =
     3c6:	f9 82       	std	Y+1, r15	; 0x01
						ADC_CURRLIMIT_NO_gc		|
						ADC_CONMODE_bm			|	//enable signed mode
						ADC_FREERUN_bm			|
						ADC_RESOLUTION_12BIT_gc	;
	
	ADCB.REFCTRL =		ADC_REFSEL_VCC_gc;			//utilize the vref of vcc/1.6 = 2.0625 V
     3c8:	0a 83       	std	Y+2, r16	; 0x02
	
	ADCB.PRESCALER =	ADC_PRESCALER_DIV32_gc;		//ADC will be clocked at 1MHz
     3ca:	cc 82       	std	Y+4, r12	; 0x04
	
	//set all the adc channels to be single ended inputs
	ADCB.CH0.CTRL =		ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3cc:	18 a3       	std	Y+32, r17	; 0x20
	ADCB.CH1.CTRL =		ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3ce:	18 a7       	std	Y+40, r17	; 0x28
	ADCB.CH2.CTRL =		ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3d0:	18 ab       	std	Y+48, r17	; 0x30
	ADCB.CH3.CTRL =		ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3d2:	18 af       	std	Y+56, r17	; 0x38
	
	//analog channels 0-3 will correlate to the analog pins 4-7 on port A
	ADCB.CH0.MUXCTRL =	ADC_CH_MUXPOS_PIN12_gc;
     3d4:	80 e6       	ldi	r24, 0x60	; 96
     3d6:	89 a3       	std	Y+33, r24	; 0x21
	ADCB.CH1.MUXCTRL =	ADC_CH_MUXPOS_PIN13_gc;
     3d8:	88 e6       	ldi	r24, 0x68	; 104
     3da:	89 a7       	std	Y+41, r24	; 0x29
	ADCB.CH2.MUXCTRL =	ADC_CH_MUXPOS_PIN14_gc;
     3dc:	80 e7       	ldi	r24, 0x70	; 112
     3de:	89 ab       	std	Y+49, r24	; 0x31
	ADCB.CH3.MUXCTRL =	ADC_CH_MUXPOS_PIN15_gc;
     3e0:	88 e7       	ldi	r24, 0x78	; 120
     3e2:	89 af       	std	Y+57, r24	; 0x39
	
	//initialize conversion complete interrupts on all ADCA channel inputs
	ADCB.CH0.INTCTRL =	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     3e4:	1a a3       	std	Y+34, r17	; 0x22
	ADCB.CH1.INTCTRL =	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     3e6:	1a a7       	std	Y+42, r17	; 0x2a
	ADCB.CH2.INTCTRL =	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     3e8:	1a ab       	std	Y+50, r17	; 0x32
	ADCB.CH3.INTCTRL =	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     3ea:	1a af       	std	Y+58, r17	; 0x3a
	
	ADCB.EVCTRL =		ADC_SWEEP_0123_gc;
     3ec:	db 82       	std	Y+3, r13	; 0x03
	
	//enable ADCB
	ADCB.CTRLA =		ADC_ENABLE_bm	|
     3ee:	e8 82       	st	Y, r14
						ADC_CH0START_bm	|
						ADC_CH1START_bm	|
						ADC_CH2START_bm	|
						ADC_CH3START_bm	;

	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_RREN_bm;
     3f0:	e0 ea       	ldi	r30, 0xA0	; 160
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	82 81       	ldd	r24, Z+2	; 0x02
     3f6:	81 68       	ori	r24, 0x81	; 129
     3f8:	82 83       	std	Z+2, r24	; 0x02
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	08 95       	ret

0000040c <filterData>:

uint16_t filterData(int16_t *data)
{
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	fc 01       	movw	r30, r24
     412:	80 e1       	ldi	r24, 0x10	; 16
	int32_t sum = 0;
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	ba 01       	movw	r22, r20
	uint8_t inc;
	
	for(inc=0;inc<16;inc++)
	{
		sum+=data[inc];
     41a:	01 91       	ld	r16, Z+
     41c:	11 91       	ld	r17, Z+
     41e:	22 27       	eor	r18, r18
     420:	17 fd       	sbrc	r17, 7
     422:	20 95       	com	r18
     424:	32 2f       	mov	r19, r18
     426:	40 0f       	add	r20, r16
     428:	51 1f       	adc	r21, r17
     42a:	62 1f       	adc	r22, r18
     42c:	73 1f       	adc	r23, r19
     42e:	81 50       	subi	r24, 0x01	; 1
uint16_t filterData(int16_t *data)
{
	int32_t sum = 0;
	uint8_t inc;
	
	for(inc=0;inc<16;inc++)
     430:	a1 f7       	brne	.-24     	; 0x41a <filterData+0xe>
	{
		sum+=data[inc];
	}
	
	if	(sum < 0) return 0;
     432:	77 fd       	sbrc	r23, 7
     434:	08 c0       	rjmp	.+16     	; 0x446 <filterData+0x3a>
	else
	{
		sum = sum>>3;	
     436:	e3 e0       	ldi	r30, 0x03	; 3
     438:	75 95       	asr	r23
     43a:	67 95       	ror	r22
     43c:	57 95       	ror	r21
     43e:	47 95       	ror	r20
     440:	ea 95       	dec	r30
     442:	d1 f7       	brne	.-12     	; 0x438 <filterData+0x2c>
		return (uint16_t) sum;
     444:	02 c0       	rjmp	.+4      	; 0x44a <filterData+0x3e>
	for(inc=0;inc<16;inc++)
	{
		sum+=data[inc];
	}
	
	if	(sum < 0) return 0;
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e0       	ldi	r21, 0x00	; 0
	else
	{
		sum = sum>>3;	
		return (uint16_t) sum;
	}
}
     44a:	ca 01       	movw	r24, r20
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	08 95       	ret

00000452 <analogRead>:

uint16_t analogRead(uint8_t pinNum)
{
	if (pinNum > 7) return 0;
     452:	88 30       	cpi	r24, 0x08	; 8
     454:	38 f4       	brcc	.+14     	; 0x464 <analogRead+0x12>
	else			return filterData(&adc_data[pinNum][0]);
     456:	20 e2       	ldi	r18, 0x20	; 32
     458:	82 9f       	mul	r24, r18
     45a:	c0 01       	movw	r24, r0
     45c:	11 24       	eor	r1, r1
     45e:	89 5c       	subi	r24, 0xC9	; 201
     460:	9b 4d       	sbci	r25, 0xDB	; 219
     462:	d4 cf       	rjmp	.-88     	; 0x40c <filterData>
}
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret

0000046a <__vector_71>:


ISR(ADCA_CH0_vect)
{
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	08 b6       	in	r0, 0x38	; 56
     476:	0f 92       	push	r0
     478:	18 be       	out	0x38, r1	; 56
     47a:	09 b6       	in	r0, 0x39	; 57
     47c:	0f 92       	push	r0
     47e:	19 be       	out	0x39, r1	; 57
     480:	0a b6       	in	r0, 0x3a	; 58
     482:	0f 92       	push	r0
     484:	1a be       	out	0x3a, r1	; 58
     486:	0b b6       	in	r0, 0x3b	; 59
     488:	0f 92       	push	r0
     48a:	1b be       	out	0x3b, r1	; 59
     48c:	2f 93       	push	r18
     48e:	8f 93       	push	r24
     490:	9f 93       	push	r25
     492:	af 93       	push	r26
     494:	bf 93       	push	r27
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
	adc_data[0][adcCnt[0].CNT++] = ADCA.CH0.RES;
     49e:	af e2       	ldi	r26, 0x2F	; 47
     4a0:	b4 e2       	ldi	r27, 0x24	; 36
     4a2:	2c 91       	ld	r18, X
     4a4:	2f 70       	andi	r18, 0x0F	; 15
     4a6:	e2 2f       	mov	r30, r18
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	c0 e0       	ldi	r28, 0x00	; 0
     4ac:	d2 e0       	ldi	r29, 0x02	; 2
     4ae:	8c a1       	ldd	r24, Y+36	; 0x24
     4b0:	9d a1       	ldd	r25, Y+37	; 0x25
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	e9 5c       	subi	r30, 0xC9	; 201
     4b8:	fb 4d       	sbci	r31, 0xDB	; 219
     4ba:	80 83       	st	Z, r24
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	2f 5f       	subi	r18, 0xFF	; 255
     4c0:	2f 70       	andi	r18, 0x0F	; 15
     4c2:	8c 91       	ld	r24, X
     4c4:	80 7f       	andi	r24, 0xF0	; 240
     4c6:	82 2b       	or	r24, r18
     4c8:	8c 93       	st	X, r24
}
     4ca:	ff 91       	pop	r31
     4cc:	ef 91       	pop	r30
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	2f 91       	pop	r18
     4dc:	0f 90       	pop	r0
     4de:	0b be       	out	0x3b, r0	; 59
     4e0:	0f 90       	pop	r0
     4e2:	0a be       	out	0x3a, r0	; 58
     4e4:	0f 90       	pop	r0
     4e6:	09 be       	out	0x39, r0	; 57
     4e8:	0f 90       	pop	r0
     4ea:	08 be       	out	0x38, r0	; 56
     4ec:	0f 90       	pop	r0
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <__vector_72>:
ISR(ADCA_CH1_vect)
{
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	0f 92       	push	r0
     4fe:	11 24       	eor	r1, r1
     500:	08 b6       	in	r0, 0x38	; 56
     502:	0f 92       	push	r0
     504:	18 be       	out	0x38, r1	; 56
     506:	09 b6       	in	r0, 0x39	; 57
     508:	0f 92       	push	r0
     50a:	19 be       	out	0x39, r1	; 57
     50c:	0a b6       	in	r0, 0x3a	; 58
     50e:	0f 92       	push	r0
     510:	1a be       	out	0x3a, r1	; 58
     512:	0b b6       	in	r0, 0x3b	; 59
     514:	0f 92       	push	r0
     516:	1b be       	out	0x3b, r1	; 59
     518:	2f 93       	push	r18
     51a:	8f 93       	push	r24
     51c:	9f 93       	push	r25
     51e:	af 93       	push	r26
     520:	bf 93       	push	r27
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ef 93       	push	r30
     528:	ff 93       	push	r31
	adc_data[1][adcCnt[1].CNT++] = ADCA.CH1.RES;
     52a:	a0 e3       	ldi	r26, 0x30	; 48
     52c:	b4 e2       	ldi	r27, 0x24	; 36
     52e:	2c 91       	ld	r18, X
     530:	2f 70       	andi	r18, 0x0F	; 15
     532:	e2 2f       	mov	r30, r18
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	c0 e0       	ldi	r28, 0x00	; 0
     538:	d2 e0       	ldi	r29, 0x02	; 2
     53a:	8c a5       	ldd	r24, Y+44	; 0x2c
     53c:	9d a5       	ldd	r25, Y+45	; 0x2d
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	e9 5a       	subi	r30, 0xA9	; 169
     544:	fb 4d       	sbci	r31, 0xDB	; 219
     546:	80 83       	st	Z, r24
     548:	91 83       	std	Z+1, r25	; 0x01
     54a:	2f 5f       	subi	r18, 0xFF	; 255
     54c:	2f 70       	andi	r18, 0x0F	; 15
     54e:	8c 91       	ld	r24, X
     550:	80 7f       	andi	r24, 0xF0	; 240
     552:	82 2b       	or	r24, r18
     554:	8c 93       	st	X, r24
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	2f 91       	pop	r18
     568:	0f 90       	pop	r0
     56a:	0b be       	out	0x3b, r0	; 59
     56c:	0f 90       	pop	r0
     56e:	0a be       	out	0x3a, r0	; 58
     570:	0f 90       	pop	r0
     572:	09 be       	out	0x39, r0	; 57
     574:	0f 90       	pop	r0
     576:	08 be       	out	0x38, r0	; 56
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <__vector_73>:
ISR(ADCA_CH2_vect)
{
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	08 b6       	in	r0, 0x38	; 56
     58e:	0f 92       	push	r0
     590:	18 be       	out	0x38, r1	; 56
     592:	09 b6       	in	r0, 0x39	; 57
     594:	0f 92       	push	r0
     596:	19 be       	out	0x39, r1	; 57
     598:	0a b6       	in	r0, 0x3a	; 58
     59a:	0f 92       	push	r0
     59c:	1a be       	out	0x3a, r1	; 58
     59e:	0b b6       	in	r0, 0x3b	; 59
     5a0:	0f 92       	push	r0
     5a2:	1b be       	out	0x3b, r1	; 59
     5a4:	2f 93       	push	r18
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	ef 93       	push	r30
     5b4:	ff 93       	push	r31
	adc_data[2][adcCnt[2].CNT++] = ADCA.CH2.RES;
     5b6:	a1 e3       	ldi	r26, 0x31	; 49
     5b8:	b4 e2       	ldi	r27, 0x24	; 36
     5ba:	2c 91       	ld	r18, X
     5bc:	2f 70       	andi	r18, 0x0F	; 15
     5be:	e2 2f       	mov	r30, r18
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
     5c4:	d2 e0       	ldi	r29, 0x02	; 2
     5c6:	8c a9       	ldd	r24, Y+52	; 0x34
     5c8:	9d a9       	ldd	r25, Y+53	; 0x35
     5ca:	ee 0f       	add	r30, r30
     5cc:	ff 1f       	adc	r31, r31
     5ce:	e9 58       	subi	r30, 0x89	; 137
     5d0:	fb 4d       	sbci	r31, 0xDB	; 219
     5d2:	80 83       	st	Z, r24
     5d4:	91 83       	std	Z+1, r25	; 0x01
     5d6:	2f 5f       	subi	r18, 0xFF	; 255
     5d8:	2f 70       	andi	r18, 0x0F	; 15
     5da:	8c 91       	ld	r24, X
     5dc:	80 7f       	andi	r24, 0xF0	; 240
     5de:	82 2b       	or	r24, r18
     5e0:	8c 93       	st	X, r24
}
     5e2:	ff 91       	pop	r31
     5e4:	ef 91       	pop	r30
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	bf 91       	pop	r27
     5ec:	af 91       	pop	r26
     5ee:	9f 91       	pop	r25
     5f0:	8f 91       	pop	r24
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0b be       	out	0x3b, r0	; 59
     5f8:	0f 90       	pop	r0
     5fa:	0a be       	out	0x3a, r0	; 58
     5fc:	0f 90       	pop	r0
     5fe:	09 be       	out	0x39, r0	; 57
     600:	0f 90       	pop	r0
     602:	08 be       	out	0x38, r0	; 56
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <__vector_74>:
ISR(ADCA_CH3_vect)
{
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	08 b6       	in	r0, 0x38	; 56
     61a:	0f 92       	push	r0
     61c:	18 be       	out	0x38, r1	; 56
     61e:	09 b6       	in	r0, 0x39	; 57
     620:	0f 92       	push	r0
     622:	19 be       	out	0x39, r1	; 57
     624:	0a b6       	in	r0, 0x3a	; 58
     626:	0f 92       	push	r0
     628:	1a be       	out	0x3a, r1	; 58
     62a:	0b b6       	in	r0, 0x3b	; 59
     62c:	0f 92       	push	r0
     62e:	1b be       	out	0x3b, r1	; 59
     630:	2f 93       	push	r18
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	ef 93       	push	r30
     640:	ff 93       	push	r31
	adc_data[3][adcCnt[3].CNT++] = ADCA.CH3.RES;
     642:	a2 e3       	ldi	r26, 0x32	; 50
     644:	b4 e2       	ldi	r27, 0x24	; 36
     646:	2c 91       	ld	r18, X
     648:	2f 70       	andi	r18, 0x0F	; 15
     64a:	e2 2f       	mov	r30, r18
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	c0 e0       	ldi	r28, 0x00	; 0
     650:	d2 e0       	ldi	r29, 0x02	; 2
     652:	8c ad       	ldd	r24, Y+60	; 0x3c
     654:	9d ad       	ldd	r25, Y+61	; 0x3d
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	e9 56       	subi	r30, 0x69	; 105
     65c:	fb 4d       	sbci	r31, 0xDB	; 219
     65e:	80 83       	st	Z, r24
     660:	91 83       	std	Z+1, r25	; 0x01
     662:	2f 5f       	subi	r18, 0xFF	; 255
     664:	2f 70       	andi	r18, 0x0F	; 15
     666:	8c 91       	ld	r24, X
     668:	80 7f       	andi	r24, 0xF0	; 240
     66a:	82 2b       	or	r24, r18
     66c:	8c 93       	st	X, r24
}
     66e:	ff 91       	pop	r31
     670:	ef 91       	pop	r30
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	2f 91       	pop	r18
     680:	0f 90       	pop	r0
     682:	0b be       	out	0x3b, r0	; 59
     684:	0f 90       	pop	r0
     686:	0a be       	out	0x3a, r0	; 58
     688:	0f 90       	pop	r0
     68a:	09 be       	out	0x39, r0	; 57
     68c:	0f 90       	pop	r0
     68e:	08 be       	out	0x38, r0	; 56
     690:	0f 90       	pop	r0
     692:	0f be       	out	0x3f, r0	; 63
     694:	0f 90       	pop	r0
     696:	1f 90       	pop	r1
     698:	18 95       	reti

0000069a <__vector_39>:



ISR(ADCB_CH0_vect)
{
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	08 b6       	in	r0, 0x38	; 56
     6a6:	0f 92       	push	r0
     6a8:	18 be       	out	0x38, r1	; 56
     6aa:	09 b6       	in	r0, 0x39	; 57
     6ac:	0f 92       	push	r0
     6ae:	19 be       	out	0x39, r1	; 57
     6b0:	0a b6       	in	r0, 0x3a	; 58
     6b2:	0f 92       	push	r0
     6b4:	1a be       	out	0x3a, r1	; 58
     6b6:	0b b6       	in	r0, 0x3b	; 59
     6b8:	0f 92       	push	r0
     6ba:	1b be       	out	0x3b, r1	; 59
     6bc:	2f 93       	push	r18
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
	adc_data[4][adcCnt[4].CNT++] = ADCB.CH0.RES;
     6ce:	a3 e3       	ldi	r26, 0x33	; 51
     6d0:	b4 e2       	ldi	r27, 0x24	; 36
     6d2:	2c 91       	ld	r18, X
     6d4:	2f 70       	andi	r18, 0x0F	; 15
     6d6:	e2 2f       	mov	r30, r18
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	c0 e4       	ldi	r28, 0x40	; 64
     6dc:	d2 e0       	ldi	r29, 0x02	; 2
     6de:	8c a1       	ldd	r24, Y+36	; 0x24
     6e0:	9d a1       	ldd	r25, Y+37	; 0x25
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	e9 54       	subi	r30, 0x49	; 73
     6e8:	fb 4d       	sbci	r31, 0xDB	; 219
     6ea:	80 83       	st	Z, r24
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	2f 5f       	subi	r18, 0xFF	; 255
     6f0:	2f 70       	andi	r18, 0x0F	; 15
     6f2:	8c 91       	ld	r24, X
     6f4:	80 7f       	andi	r24, 0xF0	; 240
     6f6:	82 2b       	or	r24, r18
     6f8:	8c 93       	st	X, r24
}
     6fa:	ff 91       	pop	r31
     6fc:	ef 91       	pop	r30
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	2f 91       	pop	r18
     70c:	0f 90       	pop	r0
     70e:	0b be       	out	0x3b, r0	; 59
     710:	0f 90       	pop	r0
     712:	0a be       	out	0x3a, r0	; 58
     714:	0f 90       	pop	r0
     716:	09 be       	out	0x39, r0	; 57
     718:	0f 90       	pop	r0
     71a:	08 be       	out	0x38, r0	; 56
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <__vector_40>:
ISR(ADCB_CH1_vect)
{
     726:	1f 92       	push	r1
     728:	0f 92       	push	r0
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	0f 92       	push	r0
     72e:	11 24       	eor	r1, r1
     730:	08 b6       	in	r0, 0x38	; 56
     732:	0f 92       	push	r0
     734:	18 be       	out	0x38, r1	; 56
     736:	09 b6       	in	r0, 0x39	; 57
     738:	0f 92       	push	r0
     73a:	19 be       	out	0x39, r1	; 57
     73c:	0a b6       	in	r0, 0x3a	; 58
     73e:	0f 92       	push	r0
     740:	1a be       	out	0x3a, r1	; 58
     742:	0b b6       	in	r0, 0x3b	; 59
     744:	0f 92       	push	r0
     746:	1b be       	out	0x3b, r1	; 59
     748:	2f 93       	push	r18
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	af 93       	push	r26
     750:	bf 93       	push	r27
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ef 93       	push	r30
     758:	ff 93       	push	r31
	adc_data[5][adcCnt[5].CNT++] = ADCB.CH1.RES;
     75a:	a4 e3       	ldi	r26, 0x34	; 52
     75c:	b4 e2       	ldi	r27, 0x24	; 36
     75e:	2c 91       	ld	r18, X
     760:	2f 70       	andi	r18, 0x0F	; 15
     762:	e2 2f       	mov	r30, r18
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	c0 e4       	ldi	r28, 0x40	; 64
     768:	d2 e0       	ldi	r29, 0x02	; 2
     76a:	8c a5       	ldd	r24, Y+44	; 0x2c
     76c:	9d a5       	ldd	r25, Y+45	; 0x2d
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	e9 52       	subi	r30, 0x29	; 41
     774:	fb 4d       	sbci	r31, 0xDB	; 219
     776:	80 83       	st	Z, r24
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	2f 70       	andi	r18, 0x0F	; 15
     77e:	8c 91       	ld	r24, X
     780:	80 7f       	andi	r24, 0xF0	; 240
     782:	82 2b       	or	r24, r18
     784:	8c 93       	st	X, r24
}
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	bf 91       	pop	r27
     790:	af 91       	pop	r26
     792:	9f 91       	pop	r25
     794:	8f 91       	pop	r24
     796:	2f 91       	pop	r18
     798:	0f 90       	pop	r0
     79a:	0b be       	out	0x3b, r0	; 59
     79c:	0f 90       	pop	r0
     79e:	0a be       	out	0x3a, r0	; 58
     7a0:	0f 90       	pop	r0
     7a2:	09 be       	out	0x39, r0	; 57
     7a4:	0f 90       	pop	r0
     7a6:	08 be       	out	0x38, r0	; 56
     7a8:	0f 90       	pop	r0
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	0f 90       	pop	r0
     7ae:	1f 90       	pop	r1
     7b0:	18 95       	reti

000007b2 <__vector_41>:
ISR(ADCB_CH2_vect)
{
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	08 b6       	in	r0, 0x38	; 56
     7be:	0f 92       	push	r0
     7c0:	18 be       	out	0x38, r1	; 56
     7c2:	09 b6       	in	r0, 0x39	; 57
     7c4:	0f 92       	push	r0
     7c6:	19 be       	out	0x39, r1	; 57
     7c8:	0a b6       	in	r0, 0x3a	; 58
     7ca:	0f 92       	push	r0
     7cc:	1a be       	out	0x3a, r1	; 58
     7ce:	0b b6       	in	r0, 0x3b	; 59
     7d0:	0f 92       	push	r0
     7d2:	1b be       	out	0x3b, r1	; 59
     7d4:	2f 93       	push	r18
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	af 93       	push	r26
     7dc:	bf 93       	push	r27
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	ef 93       	push	r30
     7e4:	ff 93       	push	r31
	adc_data[6][adcCnt[6].CNT++] = ADCB.CH2.RES;
     7e6:	a5 e3       	ldi	r26, 0x35	; 53
     7e8:	b4 e2       	ldi	r27, 0x24	; 36
     7ea:	2c 91       	ld	r18, X
     7ec:	2f 70       	andi	r18, 0x0F	; 15
     7ee:	e2 2f       	mov	r30, r18
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	c0 e4       	ldi	r28, 0x40	; 64
     7f4:	d2 e0       	ldi	r29, 0x02	; 2
     7f6:	8c a9       	ldd	r24, Y+52	; 0x34
     7f8:	9d a9       	ldd	r25, Y+53	; 0x35
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e9 50       	subi	r30, 0x09	; 9
     800:	fb 4d       	sbci	r31, 0xDB	; 219
     802:	80 83       	st	Z, r24
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	2f 5f       	subi	r18, 0xFF	; 255
     808:	2f 70       	andi	r18, 0x0F	; 15
     80a:	8c 91       	ld	r24, X
     80c:	80 7f       	andi	r24, 0xF0	; 240
     80e:	82 2b       	or	r24, r18
     810:	8c 93       	st	X, r24
}
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0b be       	out	0x3b, r0	; 59
     828:	0f 90       	pop	r0
     82a:	0a be       	out	0x3a, r0	; 58
     82c:	0f 90       	pop	r0
     82e:	09 be       	out	0x39, r0	; 57
     830:	0f 90       	pop	r0
     832:	08 be       	out	0x38, r0	; 56
     834:	0f 90       	pop	r0
     836:	0f be       	out	0x3f, r0	; 63
     838:	0f 90       	pop	r0
     83a:	1f 90       	pop	r1
     83c:	18 95       	reti

0000083e <__vector_42>:
ISR(ADCB_CH3_vect)
{
     83e:	1f 92       	push	r1
     840:	0f 92       	push	r0
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	0f 92       	push	r0
     846:	11 24       	eor	r1, r1
     848:	08 b6       	in	r0, 0x38	; 56
     84a:	0f 92       	push	r0
     84c:	18 be       	out	0x38, r1	; 56
     84e:	09 b6       	in	r0, 0x39	; 57
     850:	0f 92       	push	r0
     852:	19 be       	out	0x39, r1	; 57
     854:	0a b6       	in	r0, 0x3a	; 58
     856:	0f 92       	push	r0
     858:	1a be       	out	0x3a, r1	; 58
     85a:	0b b6       	in	r0, 0x3b	; 59
     85c:	0f 92       	push	r0
     85e:	1b be       	out	0x3b, r1	; 59
     860:	2f 93       	push	r18
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
	adc_data[7][adcCnt[7].CNT++] = ADCB.CH3.RES;
     872:	a6 e3       	ldi	r26, 0x36	; 54
     874:	b4 e2       	ldi	r27, 0x24	; 36
     876:	2c 91       	ld	r18, X
     878:	2f 70       	andi	r18, 0x0F	; 15
     87a:	e2 2f       	mov	r30, r18
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	c0 e4       	ldi	r28, 0x40	; 64
     880:	d2 e0       	ldi	r29, 0x02	; 2
     882:	8c ad       	ldd	r24, Y+60	; 0x3c
     884:	9d ad       	ldd	r25, Y+61	; 0x3d
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	e9 5e       	subi	r30, 0xE9	; 233
     88c:	fa 4d       	sbci	r31, 0xDA	; 218
     88e:	80 83       	st	Z, r24
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	2f 70       	andi	r18, 0x0F	; 15
     896:	8c 91       	ld	r24, X
     898:	80 7f       	andi	r24, 0xF0	; 240
     89a:	82 2b       	or	r24, r18
     89c:	8c 93       	st	X, r24
}
     89e:	ff 91       	pop	r31
     8a0:	ef 91       	pop	r30
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	bf 91       	pop	r27
     8a8:	af 91       	pop	r26
     8aa:	9f 91       	pop	r25
     8ac:	8f 91       	pop	r24
     8ae:	2f 91       	pop	r18
     8b0:	0f 90       	pop	r0
     8b2:	0b be       	out	0x3b, r0	; 59
     8b4:	0f 90       	pop	r0
     8b6:	0a be       	out	0x3a, r0	; 58
     8b8:	0f 90       	pop	r0
     8ba:	09 be       	out	0x39, r0	; 57
     8bc:	0f 90       	pop	r0
     8be:	08 be       	out	0x38, r0	; 56
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <servo_getchar>:
}

int servo_getchar(FILE *stream){
uint8_t temp1;

	if (servoBuffer.tail == servoBuffer.bufferEnd){
     8ca:	e0 91 3d 25 	lds	r30, 0x253D
     8ce:	f0 91 3e 25 	lds	r31, 0x253E
     8d2:	80 91 39 25 	lds	r24, 0x2539
     8d6:	90 91 3a 25 	lds	r25, 0x253A
     8da:	e8 17       	cp	r30, r24
     8dc:	f9 07       	cpc	r31, r25
     8de:	89 f4       	brne	.+34     	; 0x902 <servo_getchar+0x38>
		uint8_t temp = *servoBuffer.tail;
     8e0:	20 81       	ld	r18, Z
		*servoBuffer.tail = 0;
     8e2:	10 82       	st	Z, r1
		servoBuffer.tail = servoBuffer.bufferBegin;
     8e4:	80 91 37 25 	lds	r24, 0x2537
     8e8:	90 91 38 25 	lds	r25, 0x2538
     8ec:	80 93 3d 25 	sts	0x253D, r24
     8f0:	90 93 3e 25 	sts	0x253E, r25
		while(!(USARTE0.STATUS & USART_DREIF_bm));
     8f4:	80 91 a1 0a 	lds	r24, 0x0AA1
     8f8:	85 ff       	sbrs	r24, 5
     8fa:	fc cf       	rjmp	.-8      	; 0x8f4 <servo_getchar+0x2a>
		USARTE0.DATA = temp;	
     8fc:	20 93 a0 0a 	sts	0x0AA0, r18
     900:	08 95       	ret


	}
	//else return *servoBuffer.tail++;
	else{
		while(!(USARTE0.STATUS & USART_DREIF_bm));
     902:	80 91 a1 0a 	lds	r24, 0x0AA1
     906:	85 ff       	sbrs	r24, 5
     908:	fc cf       	rjmp	.-8      	; 0x902 <servo_getchar+0x38>
		USARTE0.DATA = *servoBuffer.tail;
     90a:	80 81       	ld	r24, Z
     90c:	80 93 a0 0a 	sts	0x0AA0, r24
		temp1 = *servoBuffer.tail;
		*servoBuffer.tail++ = 0;
     910:	11 92       	st	Z+, r1
     912:	e0 93 3d 25 	sts	0x253D, r30
     916:	f0 93 3e 25 	sts	0x253E, r31
	
	}
}
     91a:	08 95       	ret

0000091c <storeServo>:

void storeServo(char c){
	if(servoBuffer.head == servoBuffer.bufferEnd){
     91c:	e0 91 3b 25 	lds	r30, 0x253B
     920:	f0 91 3c 25 	lds	r31, 0x253C
     924:	20 91 39 25 	lds	r18, 0x2539
     928:	30 91 3a 25 	lds	r19, 0x253A
     92c:	e2 17       	cp	r30, r18
     92e:	f3 07       	cpc	r31, r19
     930:	51 f4       	brne	.+20     	; 0x946 <storeServo+0x2a>
		*servoBuffer.head = c;
     932:	80 83       	st	Z, r24
		servoBuffer.head = servoBuffer.bufferBegin;	
     934:	80 91 37 25 	lds	r24, 0x2537
     938:	90 91 38 25 	lds	r25, 0x2538
     93c:	80 93 3b 25 	sts	0x253B, r24
     940:	90 93 3c 25 	sts	0x253C, r25
     944:	08 95       	ret
	}		
	else *servoBuffer.head++ = c;
     946:	81 93       	st	Z+, r24
     948:	e0 93 3b 25 	sts	0x253B, r30
     94c:	f0 93 3c 25 	sts	0x253C, r31
     950:	08 95       	ret

00000952 <servo_putchar>:
	
}

void servo_putchar(char c,FILE *unused)
{
	storeServo(c);
     952:	e4 cf       	rjmp	.-56     	; 0x91c <storeServo>

00000954 <dataInServoBuffer>:
	}		
	else *servoBuffer.head++ = c;
}

uint8_t dataInServoBuffer(void){
	if(servoBuffer.head == servoBuffer.tail) return 0;	//no data to be read
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	40 91 3b 25 	lds	r20, 0x253B
     95a:	50 91 3c 25 	lds	r21, 0x253C
     95e:	20 91 3d 25 	lds	r18, 0x253D
     962:	30 91 3e 25 	lds	r19, 0x253E
     966:	42 17       	cp	r20, r18
     968:	53 07       	cpc	r21, r19
     96a:	09 f4       	brne	.+2      	; 0x96e <dataInServoBuffer+0x1a>
     96c:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;	
}
     96e:	08 95       	ret

00000970 <__vector_43>:


//Occurs upon Interrupt request from the Attiny
ISR(PORTE_INT0_vect){	
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	08 b6       	in	r0, 0x38	; 56
     97c:	0f 92       	push	r0
     97e:	18 be       	out	0x38, r1	; 56
     980:	09 b6       	in	r0, 0x39	; 57
     982:	0f 92       	push	r0
     984:	19 be       	out	0x39, r1	; 57
     986:	0b b6       	in	r0, 0x3b	; 59
     988:	0f 92       	push	r0
     98a:	1b be       	out	0x3b, r1	; 59
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31
	cli();
     9a4:	f8 94       	cli
	if(dataInServoBuffer())	servo_getchar(NULL); //grabs the next byte from the servoBuffer	
     9a6:	d6 df       	rcall	.-84     	; 0x954 <dataInServoBuffer>
     9a8:	88 23       	and	r24, r24
     9aa:	19 f0       	breq	.+6      	; 0x9b2 <__vector_43+0x42>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	8c df       	rcall	.-232    	; 0x8ca <servo_getchar>
	sei();
     9b2:	78 94       	sei
}
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	bf 91       	pop	r27
     9ba:	af 91       	pop	r26
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	7f 91       	pop	r23
     9c2:	6f 91       	pop	r22
     9c4:	5f 91       	pop	r21
     9c6:	4f 91       	pop	r20
     9c8:	3f 91       	pop	r19
     9ca:	2f 91       	pop	r18
     9cc:	0f 90       	pop	r0
     9ce:	0b be       	out	0x3b, r0	; 59
     9d0:	0f 90       	pop	r0
     9d2:	09 be       	out	0x39, r0	; 57
     9d4:	0f 90       	pop	r0
     9d6:	08 be       	out	0x38, r0	; 56
     9d8:	0f 90       	pop	r0
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	0f 90       	pop	r0
     9de:	1f 90       	pop	r1
     9e0:	18 95       	reti

000009e2 <__vector_53>:

ISR(TCE1_OVF_vect){
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	08 b6       	in	r0, 0x38	; 56
     9ee:	0f 92       	push	r0
     9f0:	18 be       	out	0x38, r1	; 56
     9f2:	09 b6       	in	r0, 0x39	; 57
     9f4:	0f 92       	push	r0
     9f6:	19 be       	out	0x39, r1	; 57
     9f8:	0a b6       	in	r0, 0x3a	; 58
     9fa:	0f 92       	push	r0
     9fc:	1a be       	out	0x3a, r1	; 58
     9fe:	0b b6       	in	r0, 0x3b	; 59
     a00:	0f 92       	push	r0
     a02:	1b be       	out	0x3b, r1	; 59
     a04:	bf 92       	push	r11
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	4f 93       	push	r20
     a18:	5f 93       	push	r21
     a1a:	6f 93       	push	r22
     a1c:	7f 93       	push	r23
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
	cli();
     a2e:	f8 94       	cli
     a30:	02 e2       	ldi	r16, 0x22	; 34
     a32:	16 e2       	ldi	r17, 0x26	; 38
     a34:	c0 e0       	ldi	r28, 0x00	; 0
     a36:	d0 e0       	ldi	r29, 0x00	; 0
		}			
		//now if the servo is out of date we need to send its message to the servoBuffer
		else 
		{
		//print servoNumber, time high. time low, 0x80 | servoNumber
			fprintf(&servoBufferFile,"%c%c%c%c",i, (servo[i].servoTime >>8), servo[i].servoTime, (i | 0x80));
     a38:	4c e0       	ldi	r20, 0x0C	; 12
     a3a:	e4 2e       	mov	r14, r20
     a3c:	44 e2       	ldi	r20, 0x24	; 36
     a3e:	f4 2e       	mov	r15, r20
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	c5 2e       	mov	r12, r21
     a44:	50 e2       	ldi	r21, 0x20	; 32
     a46:	d5 2e       	mov	r13, r21
	{

	//for less impact logic could be implemented to poll the enable flag to refresh these servo channels at a slower rate.	

		//if the servo is up to date increment its idle cycles at that state
		if(servo[i].configReg.params.upToDate){
     a48:	fe 01       	movw	r30, r28
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	ec 0f       	add	r30, r28
     a50:	fd 1f       	adc	r31, r29
     a52:	ee 5d       	subi	r30, 0xDE	; 222
     a54:	f9 4d       	sbci	r31, 0xD9	; 217
     a56:	80 81       	ld	r24, Z
     a58:	86 ff       	sbrs	r24, 6
     a5a:	0a c0       	rjmp	.+20     	; 0xa70 <__vector_53+0x8e>
				
#ifdef servoRefresh
			servo[i].configReg.statusReg++;	//the idle cycles bit field is at the bottom of the reg.  
     a5c:	d8 01       	movw	r26, r16
     a5e:	8c 91       	ld	r24, X
     a60:	8f 5f       	subi	r24, 0xFF	; 255
     a62:	8c 93       	st	X, r24
											//So an increment to the reg will increment the idle cycles
											//only as long as the range of increments is kept in check ie it stays under 31	
																							
			//if the servo has been idle for too long set it as out of date so it can be refreshed
			if(servo[i].configReg.statusReg & 0x1F >= servoRefreshThreshold)servo[i].configReg.params.upToDate = false;
     a64:	80 ff       	sbrs	r24, 0
     a66:	22 c0       	rjmp	.+68     	; 0xaac <__vector_53+0xca>
     a68:	80 81       	ld	r24, Z
     a6a:	8f 7b       	andi	r24, 0xBF	; 191
     a6c:	80 83       	st	Z, r24
     a6e:	1e c0       	rjmp	.+60     	; 0xaac <__vector_53+0xca>
	cli();
	if(dataInServoBuffer())	servo_getchar(NULL); //grabs the next byte from the servoBuffer	
	sei();
}

ISR(TCE1_OVF_vect){
     a70:	f8 01       	movw	r30, r16
     a72:	32 97       	sbiw	r30, 0x02	; 2
		}			
		//now if the servo is out of date we need to send its message to the servoBuffer
		else 
		{
		//print servoNumber, time high. time low, 0x80 | servoNumber
			fprintf(&servoBufferFile,"%c%c%c%c",i, (servo[i].servoTime >>8), servo[i].servoTime, (i | 0x80));
     a74:	30 81       	ld	r19, Z
     a76:	21 81       	ldd	r18, Z+1	; 0x01
	cli();
	if(dataInServoBuffer())	servo_getchar(NULL); //grabs the next byte from the servoBuffer	
	sei();
}

ISR(TCE1_OVF_vect){
     a78:	ce 01       	movw	r24, r28
     a7a:	99 27       	eor	r25, r25
     a7c:	80 68       	ori	r24, 0x80	; 128
		}			
		//now if the servo is out of date we need to send its message to the servoBuffer
		else 
		{
		//print servoNumber, time high. time low, 0x80 | servoNumber
			fprintf(&servoBufferFile,"%c%c%c%c",i, (servo[i].servoTime >>8), servo[i].servoTime, (i | 0x80));
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	1f 92       	push	r1
     a88:	2f 93       	push	r18
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	ff 92       	push	r15
     a90:	ef 92       	push	r14
     a92:	df 92       	push	r13
     a94:	cf 92       	push	r12
     a96:	0e 94 9a 10 	call	0x2134	; 0x2134 <fprintf>
	cli();
	if(dataInServoBuffer())	servo_getchar(NULL); //grabs the next byte from the servoBuffer	
	sei();
}

ISR(TCE1_OVF_vect){
     a9a:	8c 2f       	mov	r24, r28
     a9c:	80 54       	subi	r24, 0x40	; 64
		//now if the servo is out of date we need to send its message to the servoBuffer
		else 
		{
		//print servoNumber, time high. time low, 0x80 | servoNumber
			fprintf(&servoBufferFile,"%c%c%c%c",i, (servo[i].servoTime >>8), servo[i].servoTime, (i | 0x80));
			servo[i].configReg.statusReg = 0xC0 + i;	//this will clear the idleCyclesCount, set the servo as upToDate and preserve the enabled bit.
     a9e:	d8 01       	movw	r26, r16
     aa0:	8c 93       	st	X, r24
     aa2:	ed b7       	in	r30, 0x3d	; 61
     aa4:	fe b7       	in	r31, 0x3e	; 62
     aa6:	3c 96       	adiw	r30, 0x0c	; 12
     aa8:	ed bf       	out	0x3d, r30	; 61
     aaa:	fe bf       	out	0x3e, r31	; 62
     aac:	21 96       	adiw	r28, 0x01	; 1
     aae:	0d 5f       	subi	r16, 0xFD	; 253
     ab0:	1f 4f       	sbci	r17, 0xFF	; 255
}

ISR(TCE1_OVF_vect){
	cli();
	uint8_t i;		//simple increment var
	for(i=0;i<24;i++)
     ab2:	c8 31       	cpi	r28, 0x18	; 24
     ab4:	d1 05       	cpc	r29, r1
     ab6:	41 f6       	brne	.-112    	; 0xa48 <__vector_53+0x66>
		//	servo[i].configReg.params.enabled = true;
		}
		
	}
	
	sei();
     ab8:	78 94       	sei
	
}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	bf 90       	pop	r11
     ae4:	0f 90       	pop	r0
     ae6:	0b be       	out	0x3b, r0	; 59
     ae8:	0f 90       	pop	r0
     aea:	0a be       	out	0x3a, r0	; 58
     aec:	0f 90       	pop	r0
     aee:	09 be       	out	0x39, r0	; 57
     af0:	0f 90       	pop	r0
     af2:	08 be       	out	0x38, r0	; 56
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	0f 90       	pop	r0
     afa:	1f 90       	pop	r1
     afc:	18 95       	reti

00000afe <clockInit>:
#include "clock.h"


void clockInit()
{	
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;
     afe:	80 91 50 00 	lds	r24, 0x0050
     b02:	86 60       	ori	r24, 0x06	; 6
     b04:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm) || !(OSC.STATUS & OSC_RC32KRDY_bm));
     b08:	80 91 51 00 	lds	r24, 0x0051
     b0c:	81 ff       	sbrs	r24, 1
     b0e:	fc cf       	rjmp	.-8      	; 0xb08 <clockInit+0xa>
     b10:	80 91 51 00 	lds	r24, 0x0051
     b14:	82 ff       	sbrs	r24, 2
     b16:	f8 cf       	rjmp	.-16     	; 0xb08 <clockInit+0xa>


	CCP = CCP_IOREG_gc;
     b18:	88 ed       	ldi	r24, 0xD8	; 216
     b1a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	80 93 40 00 	sts	0x0040, r24

	OSC.RC32KCAL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, RCOSC32K) );
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	83 d5       	rcall	.+2822   	; 0x162c <ReadCalibrationByte>
     b26:	80 93 54 00 	sts	0x0054, r24

	DFLLRC32M.CALB = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, RCOSC32M) );
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	7f d5       	rcall	.+2814   	; 0x162c <ReadCalibrationByte>
     b2e:	80 93 63 00 	sts	0x0063, r24
	DFLLRC32M.CALA = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, RCOSC32MA) );
     b32:	84 e0       	ldi	r24, 0x04	; 4
     b34:	7b d5       	rcall	.+2806   	; 0x162c <ReadCalibrationByte>
     b36:	80 93 62 00 	sts	0x0062, r24
	
	OSC.DFLLCTRL = OSC_RC32MCREF_RC32K_gc;
     b3a:	10 92 56 00 	sts	0x0056, r1

	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     b3e:	80 91 60 00 	lds	r24, 0x0060
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	80 93 60 00 	sts	0x0060, r24
	DFLLRC32M.COMP0 = 0x12;
     b48:	82 e1       	ldi	r24, 0x12	; 18
     b4a:	80 93 64 00 	sts	0x0064, r24
	DFLLRC32M.COMP1 = 0x7A;
     b4e:	8a e7       	ldi	r24, 0x7A	; 122
     b50:	80 93 65 00 	sts	0x0065, r24
     b54:	08 95       	ret

00000b56 <setup>:
int8_t pNumber = 0;

void setup()
{
	//initialize system clock to 32MHz
	clockInit();
     b56:	d3 df       	rcall	.-90     	; 0xafe <clockInit>
	
	//initialize the real time clock 
	RTC_DelayInit();
     b58:	94 d0       	rcall	.+296    	; 0xc82 <RTC_DelayInit>
		bufRxF1,bufTxF1;
		

void usartInit(USART_t *uart, long baud);//inilization routine for uart modules.  uart = &USARTxn where x is C-F n is 0-1

static inline void usbInit(long baud){ usartInit(&USARTC0,baud);}
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	52 ec       	ldi	r21, 0xC2	; 194
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 ea       	ldi	r24, 0xA0	; 160
     b64:	98 e0       	ldi	r25, 0x08	; 8
     b66:	7b d4       	rcall	.+2294   	; 0x145e <usartInit>
	
	//initialize the uart connected to the USB interface
	usbInit(115200);		
	
	//initialize the ADC
	adcInit();
     b68:	f6 db       	rcall	.-2068   	; 0x356 <adcInit>
	
	//global interrupt enable
	sei();
     b6a:	78 94       	sei
     b6c:	08 95       	ret

00000b6e <loop>:
}

void loop()
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
	if(delayOver)
     b72:	80 91 03 04 	lds	r24, 0x0403
     b76:	80 ff       	sbrs	r24, 0
     b78:	64 c0       	rjmp	.+200    	; 0xc42 <loop+0xd4>
	{
		fprintf(&USB_str,"analog pin %d = %1.4f\r\n",pNumber,5*(analogRead(pNumber)+1)/4096.0);
     b7a:	80 91 2e 24 	lds	r24, 0x242E
     b7e:	69 dc       	rcall	.-1838   	; 0x452 <analogRead>
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	25 e0       	ldi	r18, 0x05	; 5
     b84:	28 9f       	mul	r18, r24
     b86:	b0 01       	movw	r22, r0
     b88:	29 9f       	mul	r18, r25
     b8a:	70 0d       	add	r23, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	55 d5       	rcall	.+2730   	; 0x163e <__floatunsisf>
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	40 e8       	ldi	r20, 0x80	; 128
     b9a:	59 e3       	ldi	r21, 0x39	; 57
     b9c:	de d5       	rcall	.+3004   	; 0x175a <__mulsf3>
     b9e:	9f 93       	push	r25
     ba0:	8f 93       	push	r24
     ba2:	7f 93       	push	r23
     ba4:	6f 93       	push	r22
     ba6:	20 91 2e 24 	lds	r18, 0x242E
     baa:	82 2f       	mov	r24, r18
     bac:	99 27       	eor	r25, r25
     bae:	87 fd       	sbrc	r24, 7
     bb0:	90 95       	com	r25
     bb2:	9f 93       	push	r25
     bb4:	2f 93       	push	r18
     bb6:	85 e1       	ldi	r24, 0x15	; 21
     bb8:	94 e2       	ldi	r25, 0x24	; 36
     bba:	9f 93       	push	r25
     bbc:	8f 93       	push	r24
     bbe:	ce e0       	ldi	r28, 0x0E	; 14
     bc0:	d0 e2       	ldi	r29, 0x20	; 32
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	0e 94 9a 10 	call	0x2134	; 0x2134 <fprintf>
void usart_Put(USART_t *usart, buf_t *buffer, uint8_t *packet,uint16_t packetLength);
uint8_t bufferRead(buf_t *buffer);
void bufferWrite(buf_t *buffer, char c);
uint8_t dataInBuf(buf_t *buffer);

static inline uint8_t dataInBufC0(){ return	dataInBuf(&bufRxC0);}
     bca:	84 ec       	ldi	r24, 0xC4	; 196
     bcc:	93 e2       	ldi	r25, 0x23	; 35
     bce:	ae d0       	rcall	.+348    	; 0xd2c <dataInBuf>
		
		if(dataInBufUSB())
     bd0:	2d b7       	in	r18, 0x3d	; 61
     bd2:	3e b7       	in	r19, 0x3e	; 62
     bd4:	26 5f       	subi	r18, 0xF6	; 246
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	2d bf       	out	0x3d, r18	; 61
     bda:	3e bf       	out	0x3e, r19	; 62
     bdc:	88 23       	and	r24, r24
     bde:	61 f1       	breq	.+88     	; 0xc38 <loop+0xca>
		{
			fscanf(&USB_str,"%c",&usbData);
     be0:	88 e6       	ldi	r24, 0x68	; 104
     be2:	96 e2       	ldi	r25, 0x26	; 38
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	82 e1       	ldi	r24, 0x12	; 18
     bea:	94 e2       	ldi	r25, 0x24	; 36
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	0e 94 d5 10 	call	0x21aa	; 0x21aa <fscanf>
			if		(usbData == 'i')
     bf8:	80 91 68 26 	lds	r24, 0x2668
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	89 36       	cpi	r24, 0x69	; 105
     c0a:	51 f4       	brne	.+20     	; 0xc20 <loop+0xb2>
			{
				if (++pNumber > 7) pNumber = 0;
     c0c:	80 91 2e 24 	lds	r24, 0x242E
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	80 93 2e 24 	sts	0x242E, r24
     c16:	88 30       	cpi	r24, 0x08	; 8
     c18:	7c f0       	brlt	.+30     	; 0xc38 <loop+0xca>
     c1a:	10 92 2e 24 	sts	0x242E, r1
     c1e:	0c c0       	rjmp	.+24     	; 0xc38 <loop+0xca>
			}
			else if (usbData == 'o')
     c20:	8f 36       	cpi	r24, 0x6F	; 111
     c22:	51 f4       	brne	.+20     	; 0xc38 <loop+0xca>
			{
				if (--pNumber < 0) pNumber = 7;
     c24:	80 91 2e 24 	lds	r24, 0x242E
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	80 93 2e 24 	sts	0x242E, r24
     c2e:	87 ff       	sbrs	r24, 7
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <loop+0xca>
     c32:	87 e0       	ldi	r24, 0x07	; 7
     c34:	80 93 2e 24 	sts	0x242E, r24
			}
		}
		
		RTC_Delay_ms(25);
     c38:	89 e1       	ldi	r24, 0x19	; 25
     c3a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
			{
				if (--pNumber < 0) pNumber = 7;
			}
		}
		
		RTC_Delay_ms(25);
     c40:	06 c0       	rjmp	.+12     	; 0xc4e <RTC_Delay_ms>
	}
	
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <main>:
#include "Epiphany.h"

int main(void)
{
	
	setup();
     c48:	86 df       	rcall	.-244    	; 0xb56 <setup>
	
	while(1)
    {	
		loop();
     c4a:	91 df       	rcall	.-222    	; 0xb6e <loop>
     c4c:	fe cf       	rjmp	.-4      	; 0xc4a <main+0x2>

00000c4e <RTC_Delay_ms>:
	RTC.CNT = 0;
	//hack to make delayOver true from the get go
	RTC_Delay_ms(1);
}

void RTC_Delay_ms(uint16_t delayTime){
     c4e:	9c 01       	movw	r18, r24
	while(RTC.STATUS & RTC_SYNCBUSY_bm);
     c50:	80 91 01 04 	lds	r24, 0x0401
     c54:	80 fd       	sbrc	r24, 0
     c56:	fc cf       	rjmp	.-8      	; 0xc50 <RTC_Delay_ms+0x2>
	RTC.INTFLAGS |= RTC_OVFIF_bm;
     c58:	80 91 03 04 	lds	r24, 0x0403
     c5c:	81 60       	ori	r24, 0x01	; 1
     c5e:	80 93 03 04 	sts	0x0403, r24
	delayTime+=delayTime/40;
     c62:	c9 01       	movw	r24, r18
     c64:	68 e2       	ldi	r22, 0x28	; 40
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__udivmodhi4>
     c6c:	62 0f       	add	r22, r18
     c6e:	73 1f       	adc	r23, r19
	RTC.PER = delayTime;
     c70:	60 93 0a 04 	sts	0x040A, r22
     c74:	70 93 0b 04 	sts	0x040B, r23
	RTC.CNT = 0;
     c78:	10 92 08 04 	sts	0x0408, r1
     c7c:	10 92 09 04 	sts	0x0409, r1
     c80:	08 95       	ret

00000c82 <RTC_DelayInit>:
 */ 
#include "RTC.h"

void RTC_DelayInit()
{
	while(RTC.STATUS & RTC_SYNCBUSY_bm);
     c82:	80 91 01 04 	lds	r24, 0x0401
     c86:	80 fd       	sbrc	r24, 0
     c88:	fc cf       	rjmp	.-8      	; 0xc82 <RTC_DelayInit>
	CLK.RTCCTRL |= CLK_RTCEN_bm | CLK_RTCSRC_RCOSC32_gc;
     c8a:	80 91 43 00 	lds	r24, 0x0043
     c8e:	8d 60       	ori	r24, 0x0D	; 13
     c90:	80 93 43 00 	sts	0x0043, r24

	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 00 04 	sts	0x0400, r24
	RTC.CNT = 0;
     c9a:	10 92 08 04 	sts	0x0408, r1
     c9e:	10 92 09 04 	sts	0x0409, r1
	//hack to make delayOver true from the get go
	RTC_Delay_ms(1);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	d3 cf       	rjmp	.-90     	; 0xc4e <RTC_Delay_ms>

00000ca8 <bufferRead>:
static inline uint8_t dataInBufE1(){ return	dataInBuf(&bufRxE1);}
static inline uint8_t dataInBufF0(){ return	dataInBuf(&bufRxF0);}
static inline uint8_t dataInBufF1(){ return	dataInBuf(&bufRxF1);}

static inline void usartC0_putc(char c){usart_putc(&USARTC0,&bufTxC0,c);}
static inline void usartC1_putc(char c){usart_putc(&USARTC1,&bufTxC1,c);}
     ca8:	fc 01       	movw	r30, r24
     caa:	a6 81       	ldd	r26, Z+6	; 0x06
     cac:	b7 81       	ldd	r27, Z+7	; 0x07
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	33 81       	ldd	r19, Z+3	; 0x03
     cb2:	8c 91       	ld	r24, X
     cb4:	a2 17       	cp	r26, r18
     cb6:	b3 07       	cpc	r27, r19
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <bufferRead+0x1c>
     cba:	20 81       	ld	r18, Z
     cbc:	31 81       	ldd	r19, Z+1	; 0x01
     cbe:	26 83       	std	Z+6, r18	; 0x06
     cc0:	37 83       	std	Z+7, r19	; 0x07
     cc2:	08 95       	ret
     cc4:	11 96       	adiw	r26, 0x01	; 1
     cc6:	a6 83       	std	Z+6, r26	; 0x06
     cc8:	b7 83       	std	Z+7, r27	; 0x07
     cca:	08 95       	ret

00000ccc <usart_getc>:
     ccc:	f8 94       	cli
     cce:	ec df       	rcall	.-40     	; 0xca8 <bufferRead>
     cd0:	78 94       	sei
     cd2:	08 95       	ret

00000cd4 <usartC0_getc>:
     cd4:	84 ec       	ldi	r24, 0xC4	; 196
     cd6:	93 e2       	ldi	r25, 0x23	; 35
     cd8:	f9 cf       	rjmp	.-14     	; 0xccc <usart_getc>

00000cda <bufferWrite>:
     cda:	fc 01       	movw	r30, r24
     cdc:	a4 81       	ldd	r26, Z+4	; 0x04
     cde:	b5 81       	ldd	r27, Z+5	; 0x05
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	a8 17       	cp	r26, r24
     ce6:	b9 07       	cpc	r27, r25
     ce8:	31 f4       	brne	.+12     	; 0xcf6 <bufferWrite+0x1c>
     cea:	6c 93       	st	X, r22
     cec:	80 81       	ld	r24, Z
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	84 83       	std	Z+4, r24	; 0x04
     cf2:	95 83       	std	Z+5, r25	; 0x05
     cf4:	08 95       	ret
     cf6:	6d 93       	st	X+, r22
     cf8:	a4 83       	std	Z+4, r26	; 0x04
     cfa:	b5 83       	std	Z+5, r27	; 0x05
     cfc:	08 95       	ret

00000cfe <usart_putc>:
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	ec 01       	movw	r28, r24
     d04:	cb 01       	movw	r24, r22
     d06:	f8 94       	cli
     d08:	64 2f       	mov	r22, r20
     d0a:	e7 df       	rcall	.-50     	; 0xcda <bufferWrite>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	8c 7f       	andi	r24, 0xFC	; 252
     d10:	8b 83       	std	Y+3, r24	; 0x03
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	81 60       	ori	r24, 0x01	; 1
     d16:	8b 83       	std	Y+3, r24	; 0x03
     d18:	78 94       	sei
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <usartC0_putc>:
static inline uint8_t dataInBufD1(){ return	dataInBuf(&bufRxD1);}
static inline uint8_t dataInBufE1(){ return	dataInBuf(&bufRxE1);}
static inline uint8_t dataInBufF0(){ return	dataInBuf(&bufRxF0);}
static inline uint8_t dataInBufF1(){ return	dataInBuf(&bufRxF1);}

static inline void usartC0_putc(char c){usart_putc(&USARTC0,&bufTxC0,c);}
     d20:	48 2f       	mov	r20, r24
     d22:	6c e7       	ldi	r22, 0x7C	; 124
     d24:	73 e2       	ldi	r23, 0x23	; 35
     d26:	80 ea       	ldi	r24, 0xA0	; 160
     d28:	98 e0       	ldi	r25, 0x08	; 8
     d2a:	e9 cf       	rjmp	.-46     	; 0xcfe <usart_putc>

00000d2c <dataInBuf>:
		buffer->head = buffer->bufferBegin;
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
     d2c:	fc 01       	movw	r30, r24
	if(buffer->head == buffer->tail) return 0;	//no data to be read
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	44 81       	ldd	r20, Z+4	; 0x04
     d32:	55 81       	ldd	r21, Z+5	; 0x05
     d34:	26 81       	ldd	r18, Z+6	; 0x06
     d36:	37 81       	ldd	r19, Z+7	; 0x07
     d38:	42 17       	cp	r20, r18
     d3a:	53 07       	cpc	r21, r19
     d3c:	09 f4       	brne	.+2      	; 0xd40 <dataInBuf+0x14>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;	
}
     d40:	08 95       	ret

00000d42 <__vector_25>:

ISR(USARTC0_RXC_vect){
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	08 b6       	in	r0, 0x38	; 56
     d4e:	0f 92       	push	r0
     d50:	18 be       	out	0x38, r1	; 56
     d52:	09 b6       	in	r0, 0x39	; 57
     d54:	0f 92       	push	r0
     d56:	19 be       	out	0x39, r1	; 57
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	1b be       	out	0x3b, r1	; 59
     d5e:	2f 93       	push	r18
     d60:	3f 93       	push	r19
     d62:	4f 93       	push	r20
     d64:	5f 93       	push	r21
     d66:	6f 93       	push	r22
     d68:	7f 93       	push	r23
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	af 93       	push	r26
     d70:	bf 93       	push	r27
     d72:	ef 93       	push	r30
     d74:	ff 93       	push	r31
	bufferWrite(&bufRxC0,USARTC0.DATA);
     d76:	60 91 a0 08 	lds	r22, 0x08A0
     d7a:	84 ec       	ldi	r24, 0xC4	; 196
     d7c:	93 e2       	ldi	r25, 0x23	; 35
     d7e:	ad df       	rcall	.-166    	; 0xcda <bufferWrite>
}
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0b be       	out	0x3b, r0	; 59
     d9c:	0f 90       	pop	r0
     d9e:	09 be       	out	0x39, r0	; 57
     da0:	0f 90       	pop	r0
     da2:	08 be       	out	0x38, r0	; 56
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <__vector_28>:
ISR(USARTC1_RXC_vect){
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	08 b6       	in	r0, 0x38	; 56
     dba:	0f 92       	push	r0
     dbc:	18 be       	out	0x38, r1	; 56
     dbe:	09 b6       	in	r0, 0x39	; 57
     dc0:	0f 92       	push	r0
     dc2:	19 be       	out	0x39, r1	; 57
     dc4:	0b b6       	in	r0, 0x3b	; 59
     dc6:	0f 92       	push	r0
     dc8:	1b be       	out	0x3b, r1	; 59
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
	bufferWrite(&bufRxC1,USARTC1.DATA);
     de2:	60 91 b0 08 	lds	r22, 0x08B0
     de6:	84 e3       	ldi	r24, 0x34	; 52
     de8:	93 e2       	ldi	r25, 0x23	; 35
     dea:	77 df       	rcall	.-274    	; 0xcda <bufferWrite>
}
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0b be       	out	0x3b, r0	; 59
     e08:	0f 90       	pop	r0
     e0a:	09 be       	out	0x39, r0	; 57
     e0c:	0f 90       	pop	r0
     e0e:	08 be       	out	0x38, r0	; 56
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <__vector_88>:
ISR(USARTD0_RXC_vect){
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	08 b6       	in	r0, 0x38	; 56
     e26:	0f 92       	push	r0
     e28:	18 be       	out	0x38, r1	; 56
     e2a:	09 b6       	in	r0, 0x39	; 57
     e2c:	0f 92       	push	r0
     e2e:	19 be       	out	0x39, r1	; 57
     e30:	0b b6       	in	r0, 0x3b	; 59
     e32:	0f 92       	push	r0
     e34:	1b be       	out	0x3b, r1	; 59
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
	bufferWrite(&bufRxD0,USARTD0.DATA);
     e4e:	60 91 a0 09 	lds	r22, 0x09A0
     e52:	84 ea       	ldi	r24, 0xA4	; 164
     e54:	92 e2       	ldi	r25, 0x22	; 34
     e56:	41 df       	rcall	.-382    	; 0xcda <bufferWrite>
}
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0b be       	out	0x3b, r0	; 59
     e74:	0f 90       	pop	r0
     e76:	09 be       	out	0x39, r0	; 57
     e78:	0f 90       	pop	r0
     e7a:	08 be       	out	0x38, r0	; 56
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
     e84:	18 95       	reti

00000e86 <__vector_91>:
ISR(USARTD1_RXC_vect){
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	08 b6       	in	r0, 0x38	; 56
     e92:	0f 92       	push	r0
     e94:	18 be       	out	0x38, r1	; 56
     e96:	09 b6       	in	r0, 0x39	; 57
     e98:	0f 92       	push	r0
     e9a:	19 be       	out	0x39, r1	; 57
     e9c:	0b b6       	in	r0, 0x3b	; 59
     e9e:	0f 92       	push	r0
     ea0:	1b be       	out	0x3b, r1	; 59
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
	bufferWrite(&bufRxD1,USARTD1.DATA);
     eba:	60 91 b0 09 	lds	r22, 0x09B0
     ebe:	84 e1       	ldi	r24, 0x14	; 20
     ec0:	92 e2       	ldi	r25, 0x22	; 34
     ec2:	0b df       	rcall	.-490    	; 0xcda <bufferWrite>
}
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0b be       	out	0x3b, r0	; 59
     ee0:	0f 90       	pop	r0
     ee2:	09 be       	out	0x39, r0	; 57
     ee4:	0f 90       	pop	r0
     ee6:	08 be       	out	0x38, r0	; 56
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <__vector_61>:
ISR(USARTE1_RXC_vect){
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	08 b6       	in	r0, 0x38	; 56
     efe:	0f 92       	push	r0
     f00:	18 be       	out	0x38, r1	; 56
     f02:	09 b6       	in	r0, 0x39	; 57
     f04:	0f 92       	push	r0
     f06:	19 be       	out	0x39, r1	; 57
     f08:	0b b6       	in	r0, 0x3b	; 59
     f0a:	0f 92       	push	r0
     f0c:	1b be       	out	0x3b, r1	; 59
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
	bufferWrite(&bufRxE1,USARTE1.DATA);
     f26:	60 91 b0 0a 	lds	r22, 0x0AB0
     f2a:	84 e8       	ldi	r24, 0x84	; 132
     f2c:	91 e2       	ldi	r25, 0x21	; 33
     f2e:	d5 de       	rcall	.-598    	; 0xcda <bufferWrite>
}
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0b be       	out	0x3b, r0	; 59
     f4c:	0f 90       	pop	r0
     f4e:	09 be       	out	0x39, r0	; 57
     f50:	0f 90       	pop	r0
     f52:	08 be       	out	0x38, r0	; 56
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <__vector_119>:
ISR(USARTF0_RXC_vect){
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	08 b6       	in	r0, 0x38	; 56
     f6a:	0f 92       	push	r0
     f6c:	18 be       	out	0x38, r1	; 56
     f6e:	09 b6       	in	r0, 0x39	; 57
     f70:	0f 92       	push	r0
     f72:	19 be       	out	0x39, r1	; 57
     f74:	0b b6       	in	r0, 0x3b	; 59
     f76:	0f 92       	push	r0
     f78:	1b be       	out	0x3b, r1	; 59
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	bufferWrite(&bufRxF0,USARTF0.DATA);
     f92:	60 91 a0 0b 	lds	r22, 0x0BA0
     f96:	84 ef       	ldi	r24, 0xF4	; 244
     f98:	90 e2       	ldi	r25, 0x20	; 32
     f9a:	9f de       	rcall	.-706    	; 0xcda <bufferWrite>
}
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0b be       	out	0x3b, r0	; 59
     fb8:	0f 90       	pop	r0
     fba:	09 be       	out	0x39, r0	; 57
     fbc:	0f 90       	pop	r0
     fbe:	08 be       	out	0x38, r0	; 56
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <__vector_122>:
ISR(USARTF1_RXC_vect){
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	08 b6       	in	r0, 0x38	; 56
     fd6:	0f 92       	push	r0
     fd8:	18 be       	out	0x38, r1	; 56
     fda:	09 b6       	in	r0, 0x39	; 57
     fdc:	0f 92       	push	r0
     fde:	19 be       	out	0x39, r1	; 57
     fe0:	0b b6       	in	r0, 0x3b	; 59
     fe2:	0f 92       	push	r0
     fe4:	1b be       	out	0x3b, r1	; 59
     fe6:	2f 93       	push	r18
     fe8:	3f 93       	push	r19
     fea:	4f 93       	push	r20
     fec:	5f 93       	push	r21
     fee:	6f 93       	push	r22
     ff0:	7f 93       	push	r23
     ff2:	8f 93       	push	r24
     ff4:	9f 93       	push	r25
     ff6:	af 93       	push	r26
     ff8:	bf 93       	push	r27
     ffa:	ef 93       	push	r30
     ffc:	ff 93       	push	r31
	bufferWrite(&bufRxF1,USARTF1.DATA);
     ffe:	60 91 b0 0b 	lds	r22, 0x0BB0
    1002:	84 e6       	ldi	r24, 0x64	; 100
    1004:	90 e2       	ldi	r25, 0x20	; 32
    1006:	69 de       	rcall	.-814    	; 0xcda <bufferWrite>
}
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0b be       	out	0x3b, r0	; 59
    1024:	0f 90       	pop	r0
    1026:	09 be       	out	0x39, r0	; 57
    1028:	0f 90       	pop	r0
    102a:	08 be       	out	0x38, r0	; 56
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <__vector_26>:

ISR(USARTC0_DRE_vect)
{
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	08 b6       	in	r0, 0x38	; 56
    1042:	0f 92       	push	r0
    1044:	18 be       	out	0x38, r1	; 56
    1046:	09 b6       	in	r0, 0x39	; 57
    1048:	0f 92       	push	r0
    104a:	19 be       	out	0x39, r1	; 57
    104c:	0b b6       	in	r0, 0x3b	; 59
    104e:	0f 92       	push	r0
    1050:	1b be       	out	0x3b, r1	; 59
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
	cli();
    106a:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    106c:	20 91 80 23 	lds	r18, 0x2380
    1070:	30 91 81 23 	lds	r19, 0x2381
    1074:	80 91 82 23 	lds	r24, 0x2382
    1078:	90 91 83 23 	lds	r25, 0x2383
    107c:	28 17       	cp	r18, r24
    107e:	39 07       	cpc	r19, r25
    1080:	19 f4       	brne	.+6      	; 0x1088 <__vector_26+0x52>
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <__vector_26+0x5e>
	if(dataInBuf(&bufTxC0))
	{
		USARTC0.DATA = bufferRead(&bufTxC0);		//this is used to send packets of data in quick bursts
	}
	else USARTC0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    1084:	78 94       	sei
    1086:	0c c0       	rjmp	.+24     	; 0x10a0 <__vector_26+0x6a>
ISR(USARTC0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxC0))
	{
		USARTC0.DATA = bufferRead(&bufTxC0);		//this is used to send packets of data in quick bursts
    1088:	8c e7       	ldi	r24, 0x7C	; 124
    108a:	93 e2       	ldi	r25, 0x23	; 35
    108c:	0d de       	rcall	.-998    	; 0xca8 <bufferRead>
    108e:	80 93 a0 08 	sts	0x08A0, r24
    1092:	f8 cf       	rjmp	.-16     	; 0x1084 <__vector_26+0x4e>
	}
	else USARTC0.CTRLA &= ~USART_DREINTLVL_gm;
    1094:	80 91 a3 08 	lds	r24, 0x08A3
    1098:	8c 7f       	andi	r24, 0xFC	; 252
    109a:	80 93 a3 08 	sts	0x08A3, r24
    109e:	f2 cf       	rjmp	.-28     	; 0x1084 <__vector_26+0x4e>
	sei();
}
    10a0:	ff 91       	pop	r31
    10a2:	ef 91       	pop	r30
    10a4:	bf 91       	pop	r27
    10a6:	af 91       	pop	r26
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	7f 91       	pop	r23
    10ae:	6f 91       	pop	r22
    10b0:	5f 91       	pop	r21
    10b2:	4f 91       	pop	r20
    10b4:	3f 91       	pop	r19
    10b6:	2f 91       	pop	r18
    10b8:	0f 90       	pop	r0
    10ba:	0b be       	out	0x3b, r0	; 59
    10bc:	0f 90       	pop	r0
    10be:	09 be       	out	0x39, r0	; 57
    10c0:	0f 90       	pop	r0
    10c2:	08 be       	out	0x38, r0	; 56
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__vector_29>:

ISR(USARTC1_DRE_vect)
{
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	08 b6       	in	r0, 0x38	; 56
    10da:	0f 92       	push	r0
    10dc:	18 be       	out	0x38, r1	; 56
    10de:	09 b6       	in	r0, 0x39	; 57
    10e0:	0f 92       	push	r0
    10e2:	19 be       	out	0x39, r1	; 57
    10e4:	0b b6       	in	r0, 0x3b	; 59
    10e6:	0f 92       	push	r0
    10e8:	1b be       	out	0x3b, r1	; 59
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
	cli();
    1102:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    1104:	20 91 f0 22 	lds	r18, 0x22F0
    1108:	30 91 f1 22 	lds	r19, 0x22F1
    110c:	80 91 f2 22 	lds	r24, 0x22F2
    1110:	90 91 f3 22 	lds	r25, 0x22F3
    1114:	28 17       	cp	r18, r24
    1116:	39 07       	cpc	r19, r25
    1118:	19 f4       	brne	.+6      	; 0x1120 <__vector_29+0x52>
    111a:	08 c0       	rjmp	.+16     	; 0x112c <__vector_29+0x5e>
	if(dataInBuf(&bufTxC1))
	{
		USARTC1.DATA = bufferRead(&bufTxC1);		//this is used to send packets of data in quick bursts
	}
	else USARTC1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    111c:	78 94       	sei
    111e:	0c c0       	rjmp	.+24     	; 0x1138 <__vector_29+0x6a>
ISR(USARTC1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxC1))
	{
		USARTC1.DATA = bufferRead(&bufTxC1);		//this is used to send packets of data in quick bursts
    1120:	8c ee       	ldi	r24, 0xEC	; 236
    1122:	92 e2       	ldi	r25, 0x22	; 34
    1124:	c1 dd       	rcall	.-1150   	; 0xca8 <bufferRead>
    1126:	80 93 b0 08 	sts	0x08B0, r24
    112a:	f8 cf       	rjmp	.-16     	; 0x111c <__vector_29+0x4e>
	}
	else USARTC1.CTRLA &= ~USART_DREINTLVL_gm;
    112c:	80 91 b3 08 	lds	r24, 0x08B3
    1130:	8c 7f       	andi	r24, 0xFC	; 252
    1132:	80 93 b3 08 	sts	0x08B3, r24
    1136:	f2 cf       	rjmp	.-28     	; 0x111c <__vector_29+0x4e>
	sei();
}
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	7f 91       	pop	r23
    1146:	6f 91       	pop	r22
    1148:	5f 91       	pop	r21
    114a:	4f 91       	pop	r20
    114c:	3f 91       	pop	r19
    114e:	2f 91       	pop	r18
    1150:	0f 90       	pop	r0
    1152:	0b be       	out	0x3b, r0	; 59
    1154:	0f 90       	pop	r0
    1156:	09 be       	out	0x39, r0	; 57
    1158:	0f 90       	pop	r0
    115a:	08 be       	out	0x38, r0	; 56
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_89>:

ISR(USARTD0_DRE_vect)
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	08 b6       	in	r0, 0x38	; 56
    1172:	0f 92       	push	r0
    1174:	18 be       	out	0x38, r1	; 56
    1176:	09 b6       	in	r0, 0x39	; 57
    1178:	0f 92       	push	r0
    117a:	19 be       	out	0x39, r1	; 57
    117c:	0b b6       	in	r0, 0x3b	; 59
    117e:	0f 92       	push	r0
    1180:	1b be       	out	0x3b, r1	; 59
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
	cli();
    119a:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    119c:	20 91 60 22 	lds	r18, 0x2260
    11a0:	30 91 61 22 	lds	r19, 0x2261
    11a4:	80 91 62 22 	lds	r24, 0x2262
    11a8:	90 91 63 22 	lds	r25, 0x2263
    11ac:	28 17       	cp	r18, r24
    11ae:	39 07       	cpc	r19, r25
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <__vector_89+0x52>
    11b2:	08 c0       	rjmp	.+16     	; 0x11c4 <__vector_89+0x5e>
	if(dataInBuf(&bufTxD0))
	{
		USARTD0.DATA = bufferRead(&bufTxD0);		//this is used to send packets of data in quick bursts
	}
	else USARTD0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    11b4:	78 94       	sei
    11b6:	0c c0       	rjmp	.+24     	; 0x11d0 <__vector_89+0x6a>
ISR(USARTD0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxD0))
	{
		USARTD0.DATA = bufferRead(&bufTxD0);		//this is used to send packets of data in quick bursts
    11b8:	8c e5       	ldi	r24, 0x5C	; 92
    11ba:	92 e2       	ldi	r25, 0x22	; 34
    11bc:	75 dd       	rcall	.-1302   	; 0xca8 <bufferRead>
    11be:	80 93 a0 09 	sts	0x09A0, r24
    11c2:	f8 cf       	rjmp	.-16     	; 0x11b4 <__vector_89+0x4e>
	}
	else USARTD0.CTRLA &= ~USART_DREINTLVL_gm;
    11c4:	80 91 a3 09 	lds	r24, 0x09A3
    11c8:	8c 7f       	andi	r24, 0xFC	; 252
    11ca:	80 93 a3 09 	sts	0x09A3, r24
    11ce:	f2 cf       	rjmp	.-28     	; 0x11b4 <__vector_89+0x4e>
	sei();
}
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0b be       	out	0x3b, r0	; 59
    11ec:	0f 90       	pop	r0
    11ee:	09 be       	out	0x39, r0	; 57
    11f0:	0f 90       	pop	r0
    11f2:	08 be       	out	0x38, r0	; 56
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_92>:

ISR(USARTD1_DRE_vect)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	08 b6       	in	r0, 0x38	; 56
    120a:	0f 92       	push	r0
    120c:	18 be       	out	0x38, r1	; 56
    120e:	09 b6       	in	r0, 0x39	; 57
    1210:	0f 92       	push	r0
    1212:	19 be       	out	0x39, r1	; 57
    1214:	0b b6       	in	r0, 0x3b	; 59
    1216:	0f 92       	push	r0
    1218:	1b be       	out	0x3b, r1	; 59
    121a:	2f 93       	push	r18
    121c:	3f 93       	push	r19
    121e:	4f 93       	push	r20
    1220:	5f 93       	push	r21
    1222:	6f 93       	push	r22
    1224:	7f 93       	push	r23
    1226:	8f 93       	push	r24
    1228:	9f 93       	push	r25
    122a:	af 93       	push	r26
    122c:	bf 93       	push	r27
    122e:	ef 93       	push	r30
    1230:	ff 93       	push	r31
	cli();
    1232:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    1234:	20 91 d0 21 	lds	r18, 0x21D0
    1238:	30 91 d1 21 	lds	r19, 0x21D1
    123c:	80 91 d2 21 	lds	r24, 0x21D2
    1240:	90 91 d3 21 	lds	r25, 0x21D3
    1244:	28 17       	cp	r18, r24
    1246:	39 07       	cpc	r19, r25
    1248:	19 f4       	brne	.+6      	; 0x1250 <__vector_92+0x52>
    124a:	08 c0       	rjmp	.+16     	; 0x125c <__vector_92+0x5e>
	if(dataInBuf(&bufTxD1))
	{
		USARTD1.DATA = bufferRead(&bufTxD1);		//this is used to send packets of data in quick bursts
	}
	else USARTD1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    124c:	78 94       	sei
    124e:	0c c0       	rjmp	.+24     	; 0x1268 <__vector_92+0x6a>
ISR(USARTD1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxD1))
	{
		USARTD1.DATA = bufferRead(&bufTxD1);		//this is used to send packets of data in quick bursts
    1250:	8c ec       	ldi	r24, 0xCC	; 204
    1252:	91 e2       	ldi	r25, 0x21	; 33
    1254:	29 dd       	rcall	.-1454   	; 0xca8 <bufferRead>
    1256:	80 93 b0 09 	sts	0x09B0, r24
    125a:	f8 cf       	rjmp	.-16     	; 0x124c <__vector_92+0x4e>
	}
	else USARTD1.CTRLA &= ~USART_DREINTLVL_gm;
    125c:	80 91 b3 09 	lds	r24, 0x09B3
    1260:	8c 7f       	andi	r24, 0xFC	; 252
    1262:	80 93 b3 09 	sts	0x09B3, r24
    1266:	f2 cf       	rjmp	.-28     	; 0x124c <__vector_92+0x4e>
	sei();
}
    1268:	ff 91       	pop	r31
    126a:	ef 91       	pop	r30
    126c:	bf 91       	pop	r27
    126e:	af 91       	pop	r26
    1270:	9f 91       	pop	r25
    1272:	8f 91       	pop	r24
    1274:	7f 91       	pop	r23
    1276:	6f 91       	pop	r22
    1278:	5f 91       	pop	r21
    127a:	4f 91       	pop	r20
    127c:	3f 91       	pop	r19
    127e:	2f 91       	pop	r18
    1280:	0f 90       	pop	r0
    1282:	0b be       	out	0x3b, r0	; 59
    1284:	0f 90       	pop	r0
    1286:	09 be       	out	0x39, r0	; 57
    1288:	0f 90       	pop	r0
    128a:	08 be       	out	0x38, r0	; 56
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <__vector_62>:

ISR(USARTE1_DRE_vect)
{
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	08 b6       	in	r0, 0x38	; 56
    12a2:	0f 92       	push	r0
    12a4:	18 be       	out	0x38, r1	; 56
    12a6:	09 b6       	in	r0, 0x39	; 57
    12a8:	0f 92       	push	r0
    12aa:	19 be       	out	0x39, r1	; 57
    12ac:	0b b6       	in	r0, 0x3b	; 59
    12ae:	0f 92       	push	r0
    12b0:	1b be       	out	0x3b, r1	; 59
    12b2:	2f 93       	push	r18
    12b4:	3f 93       	push	r19
    12b6:	4f 93       	push	r20
    12b8:	5f 93       	push	r21
    12ba:	6f 93       	push	r22
    12bc:	7f 93       	push	r23
    12be:	8f 93       	push	r24
    12c0:	9f 93       	push	r25
    12c2:	af 93       	push	r26
    12c4:	bf 93       	push	r27
    12c6:	ef 93       	push	r30
    12c8:	ff 93       	push	r31
	cli();
    12ca:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    12cc:	20 91 40 21 	lds	r18, 0x2140
    12d0:	30 91 41 21 	lds	r19, 0x2141
    12d4:	80 91 42 21 	lds	r24, 0x2142
    12d8:	90 91 43 21 	lds	r25, 0x2143
    12dc:	28 17       	cp	r18, r24
    12de:	39 07       	cpc	r19, r25
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <__vector_62+0x52>
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <__vector_62+0x5e>
	if(dataInBuf(&bufTxE1))
	{
		USARTE1.DATA = bufferRead(&bufTxE1);		//this is used to send packets of data in quick bursts
	}
	else USARTE1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    12e4:	78 94       	sei
    12e6:	0c c0       	rjmp	.+24     	; 0x1300 <__vector_62+0x6a>
ISR(USARTE1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxE1))
	{
		USARTE1.DATA = bufferRead(&bufTxE1);		//this is used to send packets of data in quick bursts
    12e8:	8c e3       	ldi	r24, 0x3C	; 60
    12ea:	91 e2       	ldi	r25, 0x21	; 33
    12ec:	dd dc       	rcall	.-1606   	; 0xca8 <bufferRead>
    12ee:	80 93 b0 0a 	sts	0x0AB0, r24
    12f2:	f8 cf       	rjmp	.-16     	; 0x12e4 <__vector_62+0x4e>
	}
	else USARTE1.CTRLA &= ~USART_DREINTLVL_gm;
    12f4:	80 91 b3 0a 	lds	r24, 0x0AB3
    12f8:	8c 7f       	andi	r24, 0xFC	; 252
    12fa:	80 93 b3 0a 	sts	0x0AB3, r24
    12fe:	f2 cf       	rjmp	.-28     	; 0x12e4 <__vector_62+0x4e>
	sei();
}
    1300:	ff 91       	pop	r31
    1302:	ef 91       	pop	r30
    1304:	bf 91       	pop	r27
    1306:	af 91       	pop	r26
    1308:	9f 91       	pop	r25
    130a:	8f 91       	pop	r24
    130c:	7f 91       	pop	r23
    130e:	6f 91       	pop	r22
    1310:	5f 91       	pop	r21
    1312:	4f 91       	pop	r20
    1314:	3f 91       	pop	r19
    1316:	2f 91       	pop	r18
    1318:	0f 90       	pop	r0
    131a:	0b be       	out	0x3b, r0	; 59
    131c:	0f 90       	pop	r0
    131e:	09 be       	out	0x39, r0	; 57
    1320:	0f 90       	pop	r0
    1322:	08 be       	out	0x38, r0	; 56
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <__vector_120>:

ISR(USARTF0_DRE_vect)
{
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	08 b6       	in	r0, 0x38	; 56
    133a:	0f 92       	push	r0
    133c:	18 be       	out	0x38, r1	; 56
    133e:	09 b6       	in	r0, 0x39	; 57
    1340:	0f 92       	push	r0
    1342:	19 be       	out	0x39, r1	; 57
    1344:	0b b6       	in	r0, 0x3b	; 59
    1346:	0f 92       	push	r0
    1348:	1b be       	out	0x3b, r1	; 59
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
	cli();
    1362:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    1364:	20 91 b0 20 	lds	r18, 0x20B0
    1368:	30 91 b1 20 	lds	r19, 0x20B1
    136c:	80 91 b2 20 	lds	r24, 0x20B2
    1370:	90 91 b3 20 	lds	r25, 0x20B3
    1374:	28 17       	cp	r18, r24
    1376:	39 07       	cpc	r19, r25
    1378:	19 f4       	brne	.+6      	; 0x1380 <__vector_120+0x52>
    137a:	08 c0       	rjmp	.+16     	; 0x138c <__vector_120+0x5e>
	if(dataInBuf(&bufTxF0))
	{
		USARTF0.DATA = bufferRead(&bufTxF0);		//this is used to send packets of data in quick bursts
	}
	else USARTF0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    137c:	78 94       	sei
    137e:	0c c0       	rjmp	.+24     	; 0x1398 <__vector_120+0x6a>
ISR(USARTF0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxF0))
	{
		USARTF0.DATA = bufferRead(&bufTxF0);		//this is used to send packets of data in quick bursts
    1380:	8c ea       	ldi	r24, 0xAC	; 172
    1382:	90 e2       	ldi	r25, 0x20	; 32
    1384:	91 dc       	rcall	.-1758   	; 0xca8 <bufferRead>
    1386:	80 93 a0 0b 	sts	0x0BA0, r24
    138a:	f8 cf       	rjmp	.-16     	; 0x137c <__vector_120+0x4e>
	}
	else USARTF0.CTRLA &= ~USART_DREINTLVL_gm;
    138c:	80 91 a3 0b 	lds	r24, 0x0BA3
    1390:	8c 7f       	andi	r24, 0xFC	; 252
    1392:	80 93 a3 0b 	sts	0x0BA3, r24
    1396:	f2 cf       	rjmp	.-28     	; 0x137c <__vector_120+0x4e>
	sei();
}
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0b be       	out	0x3b, r0	; 59
    13b4:	0f 90       	pop	r0
    13b6:	09 be       	out	0x39, r0	; 57
    13b8:	0f 90       	pop	r0
    13ba:	08 be       	out	0x38, r0	; 56
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <__vector_123>:

ISR(USARTF1_DRE_vect)
{
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	08 b6       	in	r0, 0x38	; 56
    13d2:	0f 92       	push	r0
    13d4:	18 be       	out	0x38, r1	; 56
    13d6:	09 b6       	in	r0, 0x39	; 57
    13d8:	0f 92       	push	r0
    13da:	19 be       	out	0x39, r1	; 57
    13dc:	0b b6       	in	r0, 0x3b	; 59
    13de:	0f 92       	push	r0
    13e0:	1b be       	out	0x3b, r1	; 59
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
	cli();
    13fa:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    13fc:	20 91 20 20 	lds	r18, 0x2020
    1400:	30 91 21 20 	lds	r19, 0x2021
    1404:	80 91 22 20 	lds	r24, 0x2022
    1408:	90 91 23 20 	lds	r25, 0x2023
    140c:	28 17       	cp	r18, r24
    140e:	39 07       	cpc	r19, r25
    1410:	19 f4       	brne	.+6      	; 0x1418 <__vector_123+0x52>
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <__vector_123+0x5e>
	if(dataInBuf(&bufTxF1))
	{
		USARTF1.DATA = bufferRead(&bufTxF1);		//this is used to send packets of data in quick bursts
	}
	else USARTF1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    1414:	78 94       	sei
    1416:	0c c0       	rjmp	.+24     	; 0x1430 <__vector_123+0x6a>
ISR(USARTF1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxF1))
	{
		USARTF1.DATA = bufferRead(&bufTxF1);		//this is used to send packets of data in quick bursts
    1418:	8c e1       	ldi	r24, 0x1C	; 28
    141a:	90 e2       	ldi	r25, 0x20	; 32
    141c:	45 dc       	rcall	.-1910   	; 0xca8 <bufferRead>
    141e:	80 93 b0 0b 	sts	0x0BB0, r24
    1422:	f8 cf       	rjmp	.-16     	; 0x1414 <__vector_123+0x4e>
	}
	else USARTF1.CTRLA &= ~USART_DREINTLVL_gm;
    1424:	80 91 b3 0b 	lds	r24, 0x0BB3
    1428:	8c 7f       	andi	r24, 0xFC	; 252
    142a:	80 93 b3 0b 	sts	0x0BB3, r24
    142e:	f2 cf       	rjmp	.-28     	; 0x1414 <__vector_123+0x4e>
	sei();
}
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0b be       	out	0x3b, r0	; 59
    144c:	0f 90       	pop	r0
    144e:	09 be       	out	0x39, r0	; 57
    1450:	0f 90       	pop	r0
    1452:	08 be       	out	0x38, r0	; 56
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <usartInit>:


//initialization functions for the uarts
void usartInit(USART_t *usart, long baud)
{
    145e:	fc 01       	movw	r30, r24
	switch((uint16_t)usart)
    1460:	e0 3b       	cpi	r30, 0xB0	; 176
    1462:	89 e0       	ldi	r24, 0x09	; 9
    1464:	f8 07       	cpc	r31, r24
    1466:	19 f1       	breq	.+70     	; 0x14ae <usartInit+0x50>
    1468:	68 f4       	brcc	.+26     	; 0x1484 <usartInit+0x26>
    146a:	e0 3b       	cpi	r30, 0xB0	; 176
    146c:	88 e0       	ldi	r24, 0x08	; 8
    146e:	f8 07       	cpc	r31, r24
    1470:	c1 f0       	breq	.+48     	; 0x14a2 <usartInit+0x44>
    1472:	e0 3a       	cpi	r30, 0xA0	; 160
    1474:	89 e0       	ldi	r24, 0x09	; 9
    1476:	f8 07       	cpc	r31, r24
    1478:	c1 f0       	breq	.+48     	; 0x14aa <usartInit+0x4c>
    147a:	e0 3a       	cpi	r30, 0xA0	; 160
    147c:	88 e0       	ldi	r24, 0x08	; 8
    147e:	f8 07       	cpc	r31, r24
    1480:	19 f5       	brne	.+70     	; 0x14c8 <usartInit+0x6a>
    1482:	0d c0       	rjmp	.+26     	; 0x149e <usartInit+0x40>
    1484:	e0 3a       	cpi	r30, 0xA0	; 160
    1486:	8b e0       	ldi	r24, 0x0B	; 11
    1488:	f8 07       	cpc	r31, r24
    148a:	c9 f0       	breq	.+50     	; 0x14be <usartInit+0x60>
    148c:	e0 3b       	cpi	r30, 0xB0	; 176
    148e:	8b e0       	ldi	r24, 0x0B	; 11
    1490:	f8 07       	cpc	r31, r24
    1492:	b9 f0       	breq	.+46     	; 0x14c2 <usartInit+0x64>
    1494:	e0 3b       	cpi	r30, 0xB0	; 176
    1496:	8a e0       	ldi	r24, 0x0A	; 10
    1498:	f8 07       	cpc	r31, r24
    149a:	b1 f4       	brne	.+44     	; 0x14c8 <usartInit+0x6a>
    149c:	0c c0       	rjmp	.+24     	; 0x14b6 <usartInit+0x58>
	{
		case ((uint16_t)&USARTC0):
			PORTC.DIRSET = PORT_USARTTX0_msk;
    149e:	88 e0       	ldi	r24, 0x08	; 8
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <usartInit+0x46>
		break;
		case ((uint16_t)&USARTC1):
			PORTC.DIRSET = PORT_USARTTX1_msk;
    14a2:	80 e8       	ldi	r24, 0x80	; 128
    14a4:	80 93 41 06 	sts	0x0641, r24
		break;
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <usartInit+0x6a>
		case ((uint16_t)&USARTD0):
			PORTD.DIRSET = PORT_USARTTX0_msk;
    14aa:	88 e0       	ldi	r24, 0x08	; 8
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <usartInit+0x52>
		break;
		case ((uint16_t)&USARTD1):
			PORTD.DIRSET = PORT_USARTTX1_msk;
    14ae:	80 e8       	ldi	r24, 0x80	; 128
    14b0:	80 93 61 06 	sts	0x0661, r24
		break;
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <usartInit+0x6a>
		case ((uint16_t)&USARTE1):
			PORTE.DIRSET = PORT_USARTTX1_msk;
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	80 93 81 06 	sts	0x0681, r24
		break;
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <usartInit+0x6a>
		case ((uint16_t)&USARTF0):
			PORTF.DIRSET = PORT_USARTTX0_msk;
    14be:	88 e0       	ldi	r24, 0x08	; 8
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <usartInit+0x66>
		break;
		case ((uint16_t)&USARTF1):
			PORTF.DIRSET = PORT_USARTTX1_msk;
    14c2:	80 e8       	ldi	r24, 0x80	; 128
    14c4:	80 93 a1 06 	sts	0x06A1, r24
		break;
		
	}
	
	PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;	
    14c8:	80 91 a2 00 	lds	r24, 0x00A2
    14cc:	83 60       	ori	r24, 0x03	; 3
    14ce:	80 93 a2 00 	sts	0x00A2, r24
		usart->CTRLA |= USART_RXCINTLVL_MED_gc;
    14d2:	83 81       	ldd	r24, Z+3	; 0x03
    14d4:	80 62       	ori	r24, 0x20	; 32
    14d6:	83 83       	std	Z+3, r24	; 0x03
	switch(baud){
    14d8:	40 38       	cpi	r20, 0x80	; 128
    14da:	80 e7       	ldi	r24, 0x70	; 112
    14dc:	58 07       	cpc	r21, r24
    14de:	61 05       	cpc	r22, r1
    14e0:	71 05       	cpc	r23, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <usartInit+0x88>
    14e4:	64 c0       	rjmp	.+200    	; 0x15ae <usartInit+0x150>
    14e6:	24 f5       	brge	.+72     	; 0x1530 <usartInit+0xd2>
    14e8:	40 38       	cpi	r20, 0x80	; 128
    14ea:	85 e2       	ldi	r24, 0x25	; 37
    14ec:	58 07       	cpc	r21, r24
    14ee:	61 05       	cpc	r22, r1
    14f0:	71 05       	cpc	r23, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <usartInit+0x98>
    14f4:	92 c0       	rjmp	.+292    	; 0x161a <usartInit+0x1bc>
    14f6:	74 f4       	brge	.+28     	; 0x1514 <usartInit+0xb6>
    14f8:	40 3b       	cpi	r20, 0xB0	; 176
    14fa:	84 e0       	ldi	r24, 0x04	; 4
    14fc:	58 07       	cpc	r21, r24
    14fe:	61 05       	cpc	r22, r1
    1500:	71 05       	cpc	r23, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <usartInit+0xa8>
    1504:	41 c0       	rjmp	.+130    	; 0x1588 <usartInit+0x12a>
    1506:	40 3c       	cpi	r20, 0xC0	; 192
    1508:	52 41       	sbci	r21, 0x12	; 18
    150a:	61 05       	cpc	r22, r1
    150c:	71 05       	cpc	r23, r1
    150e:	09 f0       	breq	.+2      	; 0x1512 <usartInit+0xb4>
    1510:	84 c0       	rjmp	.+264    	; 0x161a <usartInit+0x1bc>
    1512:	41 c0       	rjmp	.+130    	; 0x1596 <usartInit+0x138>
    1514:	40 34       	cpi	r20, 0x40	; 64
    1516:	88 e3       	ldi	r24, 0x38	; 56
    1518:	58 07       	cpc	r21, r24
    151a:	61 05       	cpc	r22, r1
    151c:	71 05       	cpc	r23, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <usartInit+0xc4>
    1520:	42 c0       	rjmp	.+132    	; 0x15a6 <usartInit+0x148>
    1522:	41 15       	cp	r20, r1
    1524:	5b 44       	sbci	r21, 0x4B	; 75
    1526:	61 05       	cpc	r22, r1
    1528:	71 05       	cpc	r23, r1
    152a:	09 f0       	breq	.+2      	; 0x152e <usartInit+0xd0>
    152c:	76 c0       	rjmp	.+236    	; 0x161a <usartInit+0x1bc>
    152e:	3d c0       	rjmp	.+122    	; 0x15aa <usartInit+0x14c>
    1530:	41 15       	cp	r20, r1
    1532:	81 ee       	ldi	r24, 0xE1	; 225
    1534:	58 07       	cpc	r21, r24
    1536:	61 05       	cpc	r22, r1
    1538:	71 05       	cpc	r23, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <usartInit+0xe0>
    153c:	4e c0       	rjmp	.+156    	; 0x15da <usartInit+0x17c>
    153e:	6c f4       	brge	.+26     	; 0x155a <usartInit+0xfc>
    1540:	41 15       	cp	r20, r1
    1542:	86 e9       	ldi	r24, 0x96	; 150
    1544:	58 07       	cpc	r21, r24
    1546:	61 05       	cpc	r22, r1
    1548:	71 05       	cpc	r23, r1
    154a:	c9 f1       	breq	.+114    	; 0x15be <usartInit+0x160>
    154c:	40 3c       	cpi	r20, 0xC0	; 192
    154e:	5a 4d       	sbci	r21, 0xDA	; 218
    1550:	61 05       	cpc	r22, r1
    1552:	71 05       	cpc	r23, r1
    1554:	09 f0       	breq	.+2      	; 0x1558 <usartInit+0xfa>
    1556:	61 c0       	rjmp	.+194    	; 0x161a <usartInit+0x1bc>
    1558:	3a c0       	rjmp	.+116    	; 0x15ce <usartInit+0x170>
    155a:	48 34       	cpi	r20, 0x48	; 72
    155c:	88 ee       	ldi	r24, 0xE8	; 232
    155e:	58 07       	cpc	r21, r24
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	68 07       	cpc	r22, r24
    1564:	71 05       	cpc	r23, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <usartInit+0x10c>
    1568:	48 c0       	rjmp	.+144    	; 0x15fa <usartInit+0x19c>
    156a:	41 15       	cp	r20, r1
    156c:	84 e8       	ldi	r24, 0x84	; 132
    156e:	58 07       	cpc	r21, r24
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	68 07       	cpc	r22, r24
    1574:	71 05       	cpc	r23, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <usartInit+0x11c>
    1578:	48 c0       	rjmp	.+144    	; 0x160a <usartInit+0x1ac>
    157a:	41 15       	cp	r20, r1
    157c:	52 4c       	sbci	r21, 0xC2	; 194
    157e:	61 40       	sbci	r22, 0x01	; 1
    1580:	71 05       	cpc	r23, r1
    1582:	09 f0       	breq	.+2      	; 0x1586 <usartInit+0x128>
    1584:	4a c0       	rjmp	.+148    	; 0x161a <usartInit+0x1bc>
    1586:	31 c0       	rjmp	.+98     	; 0x15ea <usartInit+0x18c>
		case (1200):
			usart->CTRLB = USART_CTRLB_1200;
    1588:	88 e1       	ldi	r24, 0x18	; 24
    158a:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    158c:	83 e0       	ldi	r24, 0x03	; 3
    158e:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_1200;
    1590:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_1200;
    1592:	8d ec       	ldi	r24, 0xCD	; 205
    1594:	49 c0       	rjmp	.+146    	; 0x1628 <usartInit+0x1ca>
		break;
		case (4800):
			usart->CTRLB = USART_CTRLB_4800;
    1596:	88 e1       	ldi	r24, 0x18	; 24
    1598:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_4800;
    159e:	8d ef       	ldi	r24, 0xFD	; 253
    15a0:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_4800;
    15a2:	8c ed       	ldi	r24, 0xDC	; 220
    15a4:	41 c0       	rjmp	.+130    	; 0x1628 <usartInit+0x1ca>
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
			usart->BAUDCTRLA = USART_BAUDCTRLA_9600;
			usart->BAUDCTRLB = USART_BAUDCTRLB_9600;
		break;
		case (14400):
			usart->CTRLB = USART_CTRLB_14400;
    15a6:	88 e1       	ldi	r24, 0x18	; 24
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <usartInit+0x152>
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
			usart->BAUDCTRLA = USART_BAUDCTRLA_14400;
			usart->BAUDCTRLB = USART_BAUDCTRLB_14400;
		break;
		case (19200):
			usart->CTRLB = USART_CTRLB_19200;
    15aa:	8c e1       	ldi	r24, 0x1C	; 28
    15ac:	37 c0       	rjmp	.+110    	; 0x161c <usartInit+0x1be>
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
			usart->BAUDCTRLA = USART_BAUDCTRLA_19200;
			usart->BAUDCTRLB = USART_BAUDCTRLB_19200;
		break;
		case (28800):
			usart->CTRLB = USART_CTRLB_28800;
    15ae:	8c e1       	ldi	r24, 0x1C	; 28
    15b0:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_28800;
    15b6:	8e e9       	ldi	r24, 0x9E	; 158
    15b8:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_28800;
    15ba:	88 ec       	ldi	r24, 0xC8	; 200
    15bc:	35 c0       	rjmp	.+106    	; 0x1628 <usartInit+0x1ca>
		break;
		case (38400):
			usart->CTRLB = USART_CTRLB_38400;
    15be:	8c e1       	ldi	r24, 0x1C	; 28
    15c0:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_38400;
    15c6:	85 ee       	ldi	r24, 0xE5	; 229
    15c8:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_38400;
    15ca:	8c eb       	ldi	r24, 0xBC	; 188
    15cc:	2d c0       	rjmp	.+90     	; 0x1628 <usartInit+0x1ca>
		break;
		case (56000):
			usart->CTRLB = USART_CTRLB_56000;
    15ce:	8c e1       	ldi	r24, 0x1C	; 28
    15d0:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_56000;
    15d6:	8e ec       	ldi	r24, 0xCE	; 206
    15d8:	05 c0       	rjmp	.+10     	; 0x15e4 <usartInit+0x186>
			usart->BAUDCTRLB = USART_BAUDCTRLB_56000;
		break;
		case (57600):
			usart->CTRLB = USART_CTRLB_57600;
    15da:	8c e1       	ldi	r24, 0x1C	; 28
    15dc:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_57600;
    15e2:	8e e8       	ldi	r24, 0x8E	; 142
    15e4:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_57600;
    15e6:	88 eb       	ldi	r24, 0xB8	; 184
    15e8:	1f c0       	rjmp	.+62     	; 0x1628 <usartInit+0x1ca>
		break;
		case (115200):
			usart->CTRLB = USART_CTRLB_115200;
    15ea:	8c e1       	ldi	r24, 0x1C	; 28
    15ec:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_115200;
    15f2:	8e e6       	ldi	r24, 0x6E	; 110
    15f4:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_115200;
    15f6:	88 ea       	ldi	r24, 0xA8	; 168
    15f8:	17 c0       	rjmp	.+46     	; 0x1628 <usartInit+0x1ca>
		break;
		case (125000):
			usart->CTRLB = USART_CTRLB_125000;
    15fa:	8c e1       	ldi	r24, 0x1C	; 28
    15fc:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_125000;
    1602:	80 ec       	ldi	r24, 0xC0	; 192
    1604:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_125000;
    1606:	87 ea       	ldi	r24, 0xA7	; 167
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <usartInit+0x1ca>
		break;
		case (230400):
			usart->CTRLB = USART_CTRLB_230400;
    160a:	8c e1       	ldi	r24, 0x1C	; 28
    160c:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_230400;
    1612:	8e e2       	ldi	r24, 0x2E	; 46
    1614:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_230400;
    1616:	88 e9       	ldi	r24, 0x98	; 152
    1618:	07 c0       	rjmp	.+14     	; 0x1628 <usartInit+0x1ca>
		break;
		default:
		
		//invalid baud rate defaulting to 9600		
		
			usart->CTRLB = USART_CTRLB_9600;
    161a:	88 e1       	ldi	r24, 0x18	; 24
    161c:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_9600;
    1622:	85 ef       	ldi	r24, 0xF5	; 245
    1624:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_9600;
    1626:	8c ec       	ldi	r24, 0xCC	; 204
    1628:	87 83       	std	Z+7, r24	; 0x07
    162a:	08 95       	ret

0000162c <ReadCalibrationByte>:
uint8_t ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    162c:	aa ec       	ldi	r26, 0xCA	; 202
    162e:	b1 e0       	ldi	r27, 0x01	; 1
    1630:	92 e0       	ldi	r25, 0x02	; 2
    1632:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
    1634:	e8 2f       	mov	r30, r24
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    163a:	1c 92       	st	X, r1

	return( result );
    163c:	08 95       	ret

0000163e <__floatunsisf>:
    163e:	e8 94       	clt
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <__floatsisf+0x12>

00001642 <__floatsisf>:
    1642:	97 fb       	bst	r25, 7
    1644:	3e f4       	brtc	.+14     	; 0x1654 <__floatsisf+0x12>
    1646:	90 95       	com	r25
    1648:	80 95       	com	r24
    164a:	70 95       	com	r23
    164c:	61 95       	neg	r22
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	8f 4f       	sbci	r24, 0xFF	; 255
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	99 23       	and	r25, r25
    1656:	a9 f0       	breq	.+42     	; 0x1682 <__floatsisf+0x40>
    1658:	f9 2f       	mov	r31, r25
    165a:	96 e9       	ldi	r25, 0x96	; 150
    165c:	bb 27       	eor	r27, r27
    165e:	93 95       	inc	r25
    1660:	f6 95       	lsr	r31
    1662:	87 95       	ror	r24
    1664:	77 95       	ror	r23
    1666:	67 95       	ror	r22
    1668:	b7 95       	ror	r27
    166a:	f1 11       	cpse	r31, r1
    166c:	f8 cf       	rjmp	.-16     	; 0x165e <__floatsisf+0x1c>
    166e:	fa f4       	brpl	.+62     	; 0x16ae <__floatsisf+0x6c>
    1670:	bb 0f       	add	r27, r27
    1672:	11 f4       	brne	.+4      	; 0x1678 <__floatsisf+0x36>
    1674:	60 ff       	sbrs	r22, 0
    1676:	1b c0       	rjmp	.+54     	; 0x16ae <__floatsisf+0x6c>
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	8f 4f       	sbci	r24, 0xFF	; 255
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	16 c0       	rjmp	.+44     	; 0x16ae <__floatsisf+0x6c>
    1682:	88 23       	and	r24, r24
    1684:	11 f0       	breq	.+4      	; 0x168a <__floatsisf+0x48>
    1686:	96 e9       	ldi	r25, 0x96	; 150
    1688:	11 c0       	rjmp	.+34     	; 0x16ac <__floatsisf+0x6a>
    168a:	77 23       	and	r23, r23
    168c:	21 f0       	breq	.+8      	; 0x1696 <__floatsisf+0x54>
    168e:	9e e8       	ldi	r25, 0x8E	; 142
    1690:	87 2f       	mov	r24, r23
    1692:	76 2f       	mov	r23, r22
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <__floatsisf+0x5e>
    1696:	66 23       	and	r22, r22
    1698:	71 f0       	breq	.+28     	; 0x16b6 <__floatsisf+0x74>
    169a:	96 e8       	ldi	r25, 0x86	; 134
    169c:	86 2f       	mov	r24, r22
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	2a f0       	brmi	.+10     	; 0x16ae <__floatsisf+0x6c>
    16a4:	9a 95       	dec	r25
    16a6:	66 0f       	add	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	da f7       	brpl	.-10     	; 0x16a4 <__floatsisf+0x62>
    16ae:	88 0f       	add	r24, r24
    16b0:	96 95       	lsr	r25
    16b2:	87 95       	ror	r24
    16b4:	97 f9       	bld	r25, 7
    16b6:	08 95       	ret

000016b8 <__fp_inf>:
    16b8:	97 f9       	bld	r25, 7
    16ba:	9f 67       	ori	r25, 0x7F	; 127
    16bc:	80 e8       	ldi	r24, 0x80	; 128
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	08 95       	ret

000016c4 <__fp_nan>:
    16c4:	9f ef       	ldi	r25, 0xFF	; 255
    16c6:	80 ec       	ldi	r24, 0xC0	; 192
    16c8:	08 95       	ret

000016ca <__fp_pscA>:
    16ca:	00 24       	eor	r0, r0
    16cc:	0a 94       	dec	r0
    16ce:	16 16       	cp	r1, r22
    16d0:	17 06       	cpc	r1, r23
    16d2:	18 06       	cpc	r1, r24
    16d4:	09 06       	cpc	r0, r25
    16d6:	08 95       	ret

000016d8 <__fp_pscB>:
    16d8:	00 24       	eor	r0, r0
    16da:	0a 94       	dec	r0
    16dc:	12 16       	cp	r1, r18
    16de:	13 06       	cpc	r1, r19
    16e0:	14 06       	cpc	r1, r20
    16e2:	05 06       	cpc	r0, r21
    16e4:	08 95       	ret

000016e6 <__fp_round>:
    16e6:	09 2e       	mov	r0, r25
    16e8:	03 94       	inc	r0
    16ea:	00 0c       	add	r0, r0
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <__fp_round+0xc>
    16ee:	88 23       	and	r24, r24
    16f0:	52 f0       	brmi	.+20     	; 0x1706 <__fp_round+0x20>
    16f2:	bb 0f       	add	r27, r27
    16f4:	40 f4       	brcc	.+16     	; 0x1706 <__fp_round+0x20>
    16f6:	bf 2b       	or	r27, r31
    16f8:	11 f4       	brne	.+4      	; 0x16fe <__fp_round+0x18>
    16fa:	60 ff       	sbrs	r22, 0
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <__fp_round+0x20>
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	08 95       	ret

00001708 <__fp_split3>:
    1708:	57 fd       	sbrc	r21, 7
    170a:	90 58       	subi	r25, 0x80	; 128
    170c:	44 0f       	add	r20, r20
    170e:	55 1f       	adc	r21, r21
    1710:	59 f0       	breq	.+22     	; 0x1728 <__fp_splitA+0x10>
    1712:	5f 3f       	cpi	r21, 0xFF	; 255
    1714:	71 f0       	breq	.+28     	; 0x1732 <__fp_splitA+0x1a>
    1716:	47 95       	ror	r20

00001718 <__fp_splitA>:
    1718:	88 0f       	add	r24, r24
    171a:	97 fb       	bst	r25, 7
    171c:	99 1f       	adc	r25, r25
    171e:	61 f0       	breq	.+24     	; 0x1738 <__fp_splitA+0x20>
    1720:	9f 3f       	cpi	r25, 0xFF	; 255
    1722:	79 f0       	breq	.+30     	; 0x1742 <__fp_splitA+0x2a>
    1724:	87 95       	ror	r24
    1726:	08 95       	ret
    1728:	12 16       	cp	r1, r18
    172a:	13 06       	cpc	r1, r19
    172c:	14 06       	cpc	r1, r20
    172e:	55 1f       	adc	r21, r21
    1730:	f2 cf       	rjmp	.-28     	; 0x1716 <__fp_split3+0xe>
    1732:	46 95       	lsr	r20
    1734:	f1 df       	rcall	.-30     	; 0x1718 <__fp_splitA>
    1736:	08 c0       	rjmp	.+16     	; 0x1748 <__fp_splitA+0x30>
    1738:	16 16       	cp	r1, r22
    173a:	17 06       	cpc	r1, r23
    173c:	18 06       	cpc	r1, r24
    173e:	99 1f       	adc	r25, r25
    1740:	f1 cf       	rjmp	.-30     	; 0x1724 <__fp_splitA+0xc>
    1742:	86 95       	lsr	r24
    1744:	71 05       	cpc	r23, r1
    1746:	61 05       	cpc	r22, r1
    1748:	08 94       	sec
    174a:	08 95       	ret

0000174c <__fp_zero>:
    174c:	e8 94       	clt

0000174e <__fp_szero>:
    174e:	bb 27       	eor	r27, r27
    1750:	66 27       	eor	r22, r22
    1752:	77 27       	eor	r23, r23
    1754:	cb 01       	movw	r24, r22
    1756:	97 f9       	bld	r25, 7
    1758:	08 95       	ret

0000175a <__mulsf3>:
    175a:	0b d0       	rcall	.+22     	; 0x1772 <__mulsf3x>
    175c:	c4 cf       	rjmp	.-120    	; 0x16e6 <__fp_round>
    175e:	b5 df       	rcall	.-150    	; 0x16ca <__fp_pscA>
    1760:	28 f0       	brcs	.+10     	; 0x176c <__mulsf3+0x12>
    1762:	ba df       	rcall	.-140    	; 0x16d8 <__fp_pscB>
    1764:	18 f0       	brcs	.+6      	; 0x176c <__mulsf3+0x12>
    1766:	95 23       	and	r25, r21
    1768:	09 f0       	breq	.+2      	; 0x176c <__mulsf3+0x12>
    176a:	a6 cf       	rjmp	.-180    	; 0x16b8 <__fp_inf>
    176c:	ab cf       	rjmp	.-170    	; 0x16c4 <__fp_nan>
    176e:	11 24       	eor	r1, r1
    1770:	ee cf       	rjmp	.-36     	; 0x174e <__fp_szero>

00001772 <__mulsf3x>:
    1772:	ca df       	rcall	.-108    	; 0x1708 <__fp_split3>
    1774:	a0 f3       	brcs	.-24     	; 0x175e <__mulsf3+0x4>

00001776 <__mulsf3_pse>:
    1776:	95 9f       	mul	r25, r21
    1778:	d1 f3       	breq	.-12     	; 0x176e <__mulsf3+0x14>
    177a:	95 0f       	add	r25, r21
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	55 1f       	adc	r21, r21
    1780:	62 9f       	mul	r22, r18
    1782:	f0 01       	movw	r30, r0
    1784:	72 9f       	mul	r23, r18
    1786:	bb 27       	eor	r27, r27
    1788:	f0 0d       	add	r31, r0
    178a:	b1 1d       	adc	r27, r1
    178c:	63 9f       	mul	r22, r19
    178e:	aa 27       	eor	r26, r26
    1790:	f0 0d       	add	r31, r0
    1792:	b1 1d       	adc	r27, r1
    1794:	aa 1f       	adc	r26, r26
    1796:	64 9f       	mul	r22, r20
    1798:	66 27       	eor	r22, r22
    179a:	b0 0d       	add	r27, r0
    179c:	a1 1d       	adc	r26, r1
    179e:	66 1f       	adc	r22, r22
    17a0:	82 9f       	mul	r24, r18
    17a2:	22 27       	eor	r18, r18
    17a4:	b0 0d       	add	r27, r0
    17a6:	a1 1d       	adc	r26, r1
    17a8:	62 1f       	adc	r22, r18
    17aa:	73 9f       	mul	r23, r19
    17ac:	b0 0d       	add	r27, r0
    17ae:	a1 1d       	adc	r26, r1
    17b0:	62 1f       	adc	r22, r18
    17b2:	83 9f       	mul	r24, r19
    17b4:	a0 0d       	add	r26, r0
    17b6:	61 1d       	adc	r22, r1
    17b8:	22 1f       	adc	r18, r18
    17ba:	74 9f       	mul	r23, r20
    17bc:	33 27       	eor	r19, r19
    17be:	a0 0d       	add	r26, r0
    17c0:	61 1d       	adc	r22, r1
    17c2:	23 1f       	adc	r18, r19
    17c4:	84 9f       	mul	r24, r20
    17c6:	60 0d       	add	r22, r0
    17c8:	21 1d       	adc	r18, r1
    17ca:	82 2f       	mov	r24, r18
    17cc:	76 2f       	mov	r23, r22
    17ce:	6a 2f       	mov	r22, r26
    17d0:	11 24       	eor	r1, r1
    17d2:	9f 57       	subi	r25, 0x7F	; 127
    17d4:	50 40       	sbci	r21, 0x00	; 0
    17d6:	8a f0       	brmi	.+34     	; 0x17fa <__mulsf3_pse+0x84>
    17d8:	e1 f0       	breq	.+56     	; 0x1812 <__mulsf3_pse+0x9c>
    17da:	88 23       	and	r24, r24
    17dc:	4a f0       	brmi	.+18     	; 0x17f0 <__mulsf3_pse+0x7a>
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	bb 1f       	adc	r27, r27
    17e4:	66 1f       	adc	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	91 50       	subi	r25, 0x01	; 1
    17ec:	50 40       	sbci	r21, 0x00	; 0
    17ee:	a9 f7       	brne	.-22     	; 0x17da <__mulsf3_pse+0x64>
    17f0:	9e 3f       	cpi	r25, 0xFE	; 254
    17f2:	51 05       	cpc	r21, r1
    17f4:	70 f0       	brcs	.+28     	; 0x1812 <__mulsf3_pse+0x9c>
    17f6:	60 cf       	rjmp	.-320    	; 0x16b8 <__fp_inf>
    17f8:	aa cf       	rjmp	.-172    	; 0x174e <__fp_szero>
    17fa:	5f 3f       	cpi	r21, 0xFF	; 255
    17fc:	ec f3       	brlt	.-6      	; 0x17f8 <__mulsf3_pse+0x82>
    17fe:	98 3e       	cpi	r25, 0xE8	; 232
    1800:	dc f3       	brlt	.-10     	; 0x17f8 <__mulsf3_pse+0x82>
    1802:	86 95       	lsr	r24
    1804:	77 95       	ror	r23
    1806:	67 95       	ror	r22
    1808:	b7 95       	ror	r27
    180a:	f7 95       	ror	r31
    180c:	e7 95       	ror	r30
    180e:	9f 5f       	subi	r25, 0xFF	; 255
    1810:	c1 f7       	brne	.-16     	; 0x1802 <__mulsf3_pse+0x8c>
    1812:	fe 2b       	or	r31, r30
    1814:	88 0f       	add	r24, r24
    1816:	91 1d       	adc	r25, r1
    1818:	96 95       	lsr	r25
    181a:	87 95       	ror	r24
    181c:	97 f9       	bld	r25, 7
    181e:	08 95       	ret

00001820 <vfprintf>:
    1820:	2f 92       	push	r2
    1822:	3f 92       	push	r3
    1824:	4f 92       	push	r4
    1826:	5f 92       	push	r5
    1828:	6f 92       	push	r6
    182a:	7f 92       	push	r7
    182c:	8f 92       	push	r8
    182e:	9f 92       	push	r9
    1830:	af 92       	push	r10
    1832:	bf 92       	push	r11
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	62 97       	sbiw	r28, 0x12	; 18
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	7c 01       	movw	r14, r24
    1850:	1b 01       	movw	r2, r22
    1852:	6a 01       	movw	r12, r20
    1854:	fc 01       	movw	r30, r24
    1856:	16 82       	std	Z+6, r1	; 0x06
    1858:	17 82       	std	Z+7, r1	; 0x07
    185a:	83 81       	ldd	r24, Z+3	; 0x03
    185c:	81 fd       	sbrc	r24, 1
    185e:	03 c0       	rjmp	.+6      	; 0x1866 <vfprintf+0x46>
    1860:	4e c3       	rjmp	.+1692   	; 0x1efe <vfprintf+0x6de>
    1862:	65 01       	movw	r12, r10
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <vfprintf+0x50>
    1866:	88 24       	eor	r8, r8
    1868:	83 94       	inc	r8
    186a:	91 2c       	mov	r9, r1
    186c:	8c 0e       	add	r8, r28
    186e:	9d 1e       	adc	r9, r29
    1870:	f7 01       	movw	r30, r14
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	f1 01       	movw	r30, r2
    1876:	93 fd       	sbrc	r25, 3
    1878:	85 91       	lpm	r24, Z+
    187a:	93 ff       	sbrs	r25, 3
    187c:	81 91       	ld	r24, Z+
    187e:	1f 01       	movw	r2, r30
    1880:	88 23       	and	r24, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <vfprintf+0x66>
    1884:	38 c3       	rjmp	.+1648   	; 0x1ef6 <vfprintf+0x6d6>
    1886:	85 32       	cpi	r24, 0x25	; 37
    1888:	39 f4       	brne	.+14     	; 0x1898 <vfprintf+0x78>
    188a:	93 fd       	sbrc	r25, 3
    188c:	85 91       	lpm	r24, Z+
    188e:	93 ff       	sbrs	r25, 3
    1890:	81 91       	ld	r24, Z+
    1892:	1f 01       	movw	r2, r30
    1894:	85 32       	cpi	r24, 0x25	; 37
    1896:	29 f4       	brne	.+10     	; 0x18a2 <vfprintf+0x82>
    1898:	b7 01       	movw	r22, r14
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	5a d4       	rcall	.+2228   	; 0x2152 <fputc>
    189e:	56 01       	movw	r10, r12
    18a0:	e0 cf       	rjmp	.-64     	; 0x1862 <vfprintf+0x42>
    18a2:	71 2c       	mov	r7, r1
    18a4:	61 2c       	mov	r6, r1
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	20 32       	cpi	r18, 0x20	; 32
    18aa:	a8 f4       	brcc	.+42     	; 0x18d6 <vfprintf+0xb6>
    18ac:	8b 32       	cpi	r24, 0x2B	; 43
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <vfprintf+0xa8>
    18b0:	28 f4       	brcc	.+10     	; 0x18bc <vfprintf+0x9c>
    18b2:	80 32       	cpi	r24, 0x20	; 32
    18b4:	51 f0       	breq	.+20     	; 0x18ca <vfprintf+0xaa>
    18b6:	83 32       	cpi	r24, 0x23	; 35
    18b8:	71 f4       	brne	.+28     	; 0x18d6 <vfprintf+0xb6>
    18ba:	0b c0       	rjmp	.+22     	; 0x18d2 <vfprintf+0xb2>
    18bc:	8d 32       	cpi	r24, 0x2D	; 45
    18be:	39 f0       	breq	.+14     	; 0x18ce <vfprintf+0xae>
    18c0:	80 33       	cpi	r24, 0x30	; 48
    18c2:	49 f4       	brne	.+18     	; 0x18d6 <vfprintf+0xb6>
    18c4:	21 60       	ori	r18, 0x01	; 1
    18c6:	28 c0       	rjmp	.+80     	; 0x1918 <vfprintf+0xf8>
    18c8:	22 60       	ori	r18, 0x02	; 2
    18ca:	24 60       	ori	r18, 0x04	; 4
    18cc:	25 c0       	rjmp	.+74     	; 0x1918 <vfprintf+0xf8>
    18ce:	28 60       	ori	r18, 0x08	; 8
    18d0:	23 c0       	rjmp	.+70     	; 0x1918 <vfprintf+0xf8>
    18d2:	20 61       	ori	r18, 0x10	; 16
    18d4:	21 c0       	rjmp	.+66     	; 0x1918 <vfprintf+0xf8>
    18d6:	27 fd       	sbrc	r18, 7
    18d8:	27 c0       	rjmp	.+78     	; 0x1928 <vfprintf+0x108>
    18da:	38 2f       	mov	r19, r24
    18dc:	30 53       	subi	r19, 0x30	; 48
    18de:	3a 30       	cpi	r19, 0x0A	; 10
    18e0:	78 f4       	brcc	.+30     	; 0x1900 <vfprintf+0xe0>
    18e2:	26 ff       	sbrs	r18, 6
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <vfprintf+0xd2>
    18e6:	fa e0       	ldi	r31, 0x0A	; 10
    18e8:	7f 9e       	mul	r7, r31
    18ea:	30 0d       	add	r19, r0
    18ec:	11 24       	eor	r1, r1
    18ee:	73 2e       	mov	r7, r19
    18f0:	13 c0       	rjmp	.+38     	; 0x1918 <vfprintf+0xf8>
    18f2:	4a e0       	ldi	r20, 0x0A	; 10
    18f4:	64 9e       	mul	r6, r20
    18f6:	30 0d       	add	r19, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	63 2e       	mov	r6, r19
    18fc:	20 62       	ori	r18, 0x20	; 32
    18fe:	0c c0       	rjmp	.+24     	; 0x1918 <vfprintf+0xf8>
    1900:	8e 32       	cpi	r24, 0x2E	; 46
    1902:	21 f4       	brne	.+8      	; 0x190c <vfprintf+0xec>
    1904:	26 fd       	sbrc	r18, 6
    1906:	f7 c2       	rjmp	.+1518   	; 0x1ef6 <vfprintf+0x6d6>
    1908:	20 64       	ori	r18, 0x40	; 64
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <vfprintf+0xf8>
    190c:	8c 36       	cpi	r24, 0x6C	; 108
    190e:	11 f4       	brne	.+4      	; 0x1914 <vfprintf+0xf4>
    1910:	20 68       	ori	r18, 0x80	; 128
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <vfprintf+0xf8>
    1914:	88 36       	cpi	r24, 0x68	; 104
    1916:	41 f4       	brne	.+16     	; 0x1928 <vfprintf+0x108>
    1918:	f1 01       	movw	r30, r2
    191a:	93 fd       	sbrc	r25, 3
    191c:	85 91       	lpm	r24, Z+
    191e:	93 ff       	sbrs	r25, 3
    1920:	81 91       	ld	r24, Z+
    1922:	1f 01       	movw	r2, r30
    1924:	81 11       	cpse	r24, r1
    1926:	c0 cf       	rjmp	.-128    	; 0x18a8 <vfprintf+0x88>
    1928:	98 2f       	mov	r25, r24
    192a:	95 54       	subi	r25, 0x45	; 69
    192c:	93 30       	cpi	r25, 0x03	; 3
    192e:	18 f4       	brcc	.+6      	; 0x1936 <vfprintf+0x116>
    1930:	20 61       	ori	r18, 0x10	; 16
    1932:	80 5e       	subi	r24, 0xE0	; 224
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <vfprintf+0x122>
    1936:	98 2f       	mov	r25, r24
    1938:	95 56       	subi	r25, 0x65	; 101
    193a:	93 30       	cpi	r25, 0x03	; 3
    193c:	08 f0       	brcs	.+2      	; 0x1940 <vfprintf+0x120>
    193e:	94 c1       	rjmp	.+808    	; 0x1c68 <vfprintf+0x448>
    1940:	2f 7e       	andi	r18, 0xEF	; 239
    1942:	26 fd       	sbrc	r18, 6
    1944:	02 c0       	rjmp	.+4      	; 0x194a <vfprintf+0x12a>
    1946:	16 e0       	ldi	r17, 0x06	; 6
    1948:	71 2e       	mov	r7, r17
    194a:	bf e3       	ldi	r27, 0x3F	; 63
    194c:	5b 2e       	mov	r5, r27
    194e:	52 22       	and	r5, r18
    1950:	85 36       	cpi	r24, 0x65	; 101
    1952:	19 f4       	brne	.+6      	; 0x195a <vfprintf+0x13a>
    1954:	f0 e4       	ldi	r31, 0x40	; 64
    1956:	5f 2a       	or	r5, r31
    1958:	07 c0       	rjmp	.+14     	; 0x1968 <vfprintf+0x148>
    195a:	86 36       	cpi	r24, 0x66	; 102
    195c:	19 f4       	brne	.+6      	; 0x1964 <vfprintf+0x144>
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	54 2a       	or	r5, r20
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <vfprintf+0x148>
    1964:	71 10       	cpse	r7, r1
    1966:	7a 94       	dec	r7
    1968:	57 fe       	sbrs	r5, 7
    196a:	07 c0       	rjmp	.+14     	; 0x197a <vfprintf+0x15a>
    196c:	5b e3       	ldi	r21, 0x3B	; 59
    196e:	57 15       	cp	r21, r7
    1970:	48 f0       	brcs	.+18     	; 0x1984 <vfprintf+0x164>
    1972:	47 2c       	mov	r4, r7
    1974:	43 94       	inc	r4
    1976:	27 e0       	ldi	r18, 0x07	; 7
    1978:	0d c0       	rjmp	.+26     	; 0x1994 <vfprintf+0x174>
    197a:	87 e0       	ldi	r24, 0x07	; 7
    197c:	87 15       	cp	r24, r7
    197e:	30 f0       	brcs	.+12     	; 0x198c <vfprintf+0x16c>
    1980:	27 2d       	mov	r18, r7
    1982:	07 c0       	rjmp	.+14     	; 0x1992 <vfprintf+0x172>
    1984:	27 e0       	ldi	r18, 0x07	; 7
    1986:	ac e3       	ldi	r26, 0x3C	; 60
    1988:	4a 2e       	mov	r4, r26
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <vfprintf+0x174>
    198c:	27 e0       	ldi	r18, 0x07	; 7
    198e:	f7 e0       	ldi	r31, 0x07	; 7
    1990:	7f 2e       	mov	r7, r31
    1992:	41 2c       	mov	r4, r1
    1994:	56 01       	movw	r10, r12
    1996:	94 e0       	ldi	r25, 0x04	; 4
    1998:	a9 0e       	add	r10, r25
    199a:	b1 1c       	adc	r11, r1
    199c:	f6 01       	movw	r30, r12
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	04 2d       	mov	r16, r4
    19a8:	a4 01       	movw	r20, r8
    19aa:	d6 d2       	rcall	.+1452   	; 0x1f58 <__ftoa_engine>
    19ac:	8c 01       	movw	r16, r24
    19ae:	49 81       	ldd	r20, Y+1	; 0x01
    19b0:	4c 87       	std	Y+12, r20	; 0x0c
    19b2:	40 ff       	sbrs	r20, 0
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <vfprintf+0x19a>
    19b6:	43 ff       	sbrs	r20, 3
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <vfprintf+0x1a8>
    19ba:	51 fc       	sbrc	r5, 1
    19bc:	08 c0       	rjmp	.+16     	; 0x19ce <vfprintf+0x1ae>
    19be:	52 fe       	sbrs	r5, 2
    19c0:	09 c0       	rjmp	.+18     	; 0x19d4 <vfprintf+0x1b4>
    19c2:	e0 e2       	ldi	r30, 0x20	; 32
    19c4:	de 2e       	mov	r13, r30
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <vfprintf+0x1b6>
    19c8:	7d e2       	ldi	r23, 0x2D	; 45
    19ca:	d7 2e       	mov	r13, r23
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <vfprintf+0x1b6>
    19ce:	6b e2       	ldi	r22, 0x2B	; 43
    19d0:	d6 2e       	mov	r13, r22
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <vfprintf+0x1b6>
    19d4:	d1 2c       	mov	r13, r1
    19d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    19d8:	8c 70       	andi	r24, 0x0C	; 12
    19da:	89 f1       	breq	.+98     	; 0x1a3e <vfprintf+0x21e>
    19dc:	dd 20       	and	r13, r13
    19de:	11 f0       	breq	.+4      	; 0x19e4 <vfprintf+0x1c4>
    19e0:	84 e0       	ldi	r24, 0x04	; 4
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <vfprintf+0x1c6>
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	86 15       	cp	r24, r6
    19e8:	10 f0       	brcs	.+4      	; 0x19ee <vfprintf+0x1ce>
    19ea:	61 2c       	mov	r6, r1
    19ec:	0a c0       	rjmp	.+20     	; 0x1a02 <vfprintf+0x1e2>
    19ee:	68 1a       	sub	r6, r24
    19f0:	53 fc       	sbrc	r5, 3
    19f2:	07 c0       	rjmp	.+14     	; 0x1a02 <vfprintf+0x1e2>
    19f4:	b7 01       	movw	r22, r14
    19f6:	80 e2       	ldi	r24, 0x20	; 32
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	ab d3       	rcall	.+1878   	; 0x2152 <fputc>
    19fc:	6a 94       	dec	r6
    19fe:	d1 f7       	brne	.-12     	; 0x19f4 <vfprintf+0x1d4>
    1a00:	f4 cf       	rjmp	.-24     	; 0x19ea <vfprintf+0x1ca>
    1a02:	dd 20       	and	r13, r13
    1a04:	21 f0       	breq	.+8      	; 0x1a0e <vfprintf+0x1ee>
    1a06:	b7 01       	movw	r22, r14
    1a08:	8d 2d       	mov	r24, r13
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a2 d3       	rcall	.+1860   	; 0x2152 <fputc>
    1a0e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a10:	53 fd       	sbrc	r21, 3
    1a12:	03 c0       	rjmp	.+6      	; 0x1a1a <vfprintf+0x1fa>
    1a14:	00 e0       	ldi	r16, 0x00	; 0
    1a16:	12 e0       	ldi	r17, 0x02	; 2
    1a18:	0b c0       	rjmp	.+22     	; 0x1a30 <vfprintf+0x210>
    1a1a:	0c ef       	ldi	r16, 0xFC	; 252
    1a1c:	11 e0       	ldi	r17, 0x01	; 1
    1a1e:	08 c0       	rjmp	.+16     	; 0x1a30 <vfprintf+0x210>
    1a20:	51 10       	cpse	r5, r1
    1a22:	80 52       	subi	r24, 0x20	; 32
    1a24:	b7 01       	movw	r22, r14
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	94 d3       	rcall	.+1832   	; 0x2152 <fputc>
    1a2a:	0f 5f       	subi	r16, 0xFF	; 255
    1a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <vfprintf+0x214>
    1a30:	80 e1       	ldi	r24, 0x10	; 16
    1a32:	58 22       	and	r5, r24
    1a34:	f8 01       	movw	r30, r16
    1a36:	84 91       	lpm	r24, Z
    1a38:	81 11       	cpse	r24, r1
    1a3a:	f2 cf       	rjmp	.-28     	; 0x1a20 <vfprintf+0x200>
    1a3c:	59 c2       	rjmp	.+1202   	; 0x1ef0 <vfprintf+0x6d0>
    1a3e:	57 fe       	sbrs	r5, 7
    1a40:	0e c0       	rjmp	.+28     	; 0x1a5e <vfprintf+0x23e>
    1a42:	40 0e       	add	r4, r16
    1a44:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a46:	44 ff       	sbrs	r20, 4
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <vfprintf+0x232>
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	81 33       	cpi	r24, 0x31	; 49
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <vfprintf+0x232>
    1a50:	4a 94       	dec	r4
    1a52:	14 14       	cp	r1, r4
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <vfprintf+0x288>
    1a56:	58 e0       	ldi	r21, 0x08	; 8
    1a58:	54 15       	cp	r21, r4
    1a5a:	48 f1       	brcs	.+82     	; 0x1aae <vfprintf+0x28e>
    1a5c:	2c c0       	rjmp	.+88     	; 0x1ab6 <vfprintf+0x296>
    1a5e:	56 fc       	sbrc	r5, 6
    1a60:	2a c0       	rjmp	.+84     	; 0x1ab6 <vfprintf+0x296>
    1a62:	87 2d       	mov	r24, r7
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	80 17       	cp	r24, r16
    1a68:	91 07       	cpc	r25, r17
    1a6a:	44 f0       	brlt	.+16     	; 0x1a7c <vfprintf+0x25c>
    1a6c:	0c 3f       	cpi	r16, 0xFC	; 252
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	18 07       	cpc	r17, r24
    1a72:	24 f0       	brlt	.+8      	; 0x1a7c <vfprintf+0x25c>
    1a74:	90 e8       	ldi	r25, 0x80	; 128
    1a76:	59 2a       	or	r5, r25
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <vfprintf+0x25c>
    1a7a:	7a 94       	dec	r7
    1a7c:	77 20       	and	r7, r7
    1a7e:	49 f0       	breq	.+18     	; 0x1a92 <vfprintf+0x272>
    1a80:	e2 e0       	ldi	r30, 0x02	; 2
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	ec 0f       	add	r30, r28
    1a86:	fd 1f       	adc	r31, r29
    1a88:	e7 0d       	add	r30, r7
    1a8a:	f1 1d       	adc	r31, r1
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 33       	cpi	r24, 0x30	; 48
    1a90:	a1 f3       	breq	.-24     	; 0x1a7a <vfprintf+0x25a>
    1a92:	57 fe       	sbrs	r5, 7
    1a94:	10 c0       	rjmp	.+32     	; 0x1ab6 <vfprintf+0x296>
    1a96:	47 2c       	mov	r4, r7
    1a98:	43 94       	inc	r4
    1a9a:	87 2d       	mov	r24, r7
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	08 17       	cp	r16, r24
    1aa0:	19 07       	cpc	r17, r25
    1aa2:	44 f4       	brge	.+16     	; 0x1ab4 <vfprintf+0x294>
    1aa4:	70 1a       	sub	r7, r16
    1aa6:	07 c0       	rjmp	.+14     	; 0x1ab6 <vfprintf+0x296>
    1aa8:	44 24       	eor	r4, r4
    1aaa:	43 94       	inc	r4
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <vfprintf+0x296>
    1aae:	58 e0       	ldi	r21, 0x08	; 8
    1ab0:	45 2e       	mov	r4, r21
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <vfprintf+0x296>
    1ab4:	71 2c       	mov	r7, r1
    1ab6:	57 fe       	sbrs	r5, 7
    1ab8:	07 c0       	rjmp	.+14     	; 0x1ac8 <vfprintf+0x2a8>
    1aba:	10 16       	cp	r1, r16
    1abc:	11 06       	cpc	r1, r17
    1abe:	3c f4       	brge	.+14     	; 0x1ace <vfprintf+0x2ae>
    1ac0:	98 01       	movw	r18, r16
    1ac2:	2f 5f       	subi	r18, 0xFF	; 255
    1ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac6:	05 c0       	rjmp	.+10     	; 0x1ad2 <vfprintf+0x2b2>
    1ac8:	25 e0       	ldi	r18, 0x05	; 5
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vfprintf+0x2b2>
    1ace:	21 e0       	ldi	r18, 0x01	; 1
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	dd 20       	and	r13, r13
    1ad4:	11 f0       	breq	.+4      	; 0x1ada <vfprintf+0x2ba>
    1ad6:	2f 5f       	subi	r18, 0xFF	; 255
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ada:	77 20       	and	r7, r7
    1adc:	31 f0       	breq	.+12     	; 0x1aea <vfprintf+0x2ca>
    1ade:	47 2d       	mov	r20, r7
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	4f 5f       	subi	r20, 0xFF	; 255
    1ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae6:	24 0f       	add	r18, r20
    1ae8:	35 1f       	adc	r19, r21
    1aea:	46 2d       	mov	r20, r6
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	24 17       	cp	r18, r20
    1af0:	35 07       	cpc	r19, r21
    1af2:	14 f4       	brge	.+4      	; 0x1af8 <vfprintf+0x2d8>
    1af4:	62 1a       	sub	r6, r18
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <vfprintf+0x2da>
    1af8:	61 2c       	mov	r6, r1
    1afa:	85 2d       	mov	r24, r5
    1afc:	89 70       	andi	r24, 0x09	; 9
    1afe:	41 f4       	brne	.+16     	; 0x1b10 <vfprintf+0x2f0>
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <vfprintf+0x2ec>
    1b02:	b7 01       	movw	r22, r14
    1b04:	80 e2       	ldi	r24, 0x20	; 32
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	24 d3       	rcall	.+1608   	; 0x2152 <fputc>
    1b0a:	6a 94       	dec	r6
    1b0c:	61 10       	cpse	r6, r1
    1b0e:	f9 cf       	rjmp	.-14     	; 0x1b02 <vfprintf+0x2e2>
    1b10:	dd 20       	and	r13, r13
    1b12:	21 f0       	breq	.+8      	; 0x1b1c <vfprintf+0x2fc>
    1b14:	b7 01       	movw	r22, r14
    1b16:	8d 2d       	mov	r24, r13
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	1b d3       	rcall	.+1590   	; 0x2152 <fputc>
    1b1c:	53 fc       	sbrc	r5, 3
    1b1e:	08 c0       	rjmp	.+16     	; 0x1b30 <vfprintf+0x310>
    1b20:	05 c0       	rjmp	.+10     	; 0x1b2c <vfprintf+0x30c>
    1b22:	b7 01       	movw	r22, r14
    1b24:	80 e3       	ldi	r24, 0x30	; 48
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	14 d3       	rcall	.+1576   	; 0x2152 <fputc>
    1b2a:	6a 94       	dec	r6
    1b2c:	61 10       	cpse	r6, r1
    1b2e:	f9 cf       	rjmp	.-14     	; 0x1b22 <vfprintf+0x302>
    1b30:	57 fe       	sbrs	r5, 7
    1b32:	54 c0       	rjmp	.+168    	; 0x1bdc <vfprintf+0x3bc>
    1b34:	68 01       	movw	r12, r16
    1b36:	17 ff       	sbrs	r17, 7
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <vfprintf+0x31e>
    1b3a:	c1 2c       	mov	r12, r1
    1b3c:	d1 2c       	mov	r13, r1
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	a8 01       	movw	r20, r16
    1b44:	44 19       	sub	r20, r4
    1b46:	51 09       	sbc	r21, r1
    1b48:	4d 87       	std	Y+13, r20	; 0x0d
    1b4a:	5e 87       	std	Y+14, r21	; 0x0e
    1b4c:	28 01       	movw	r4, r16
    1b4e:	4c 18       	sub	r4, r12
    1b50:	5d 08       	sbc	r5, r13
    1b52:	48 0c       	add	r4, r8
    1b54:	59 1c       	adc	r5, r9
    1b56:	87 2d       	mov	r24, r7
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	44 27       	eor	r20, r20
    1b5c:	55 27       	eor	r21, r21
    1b5e:	48 1b       	sub	r20, r24
    1b60:	59 0b       	sbc	r21, r25
    1b62:	4f 87       	std	Y+15, r20	; 0x0f
    1b64:	58 8b       	std	Y+16, r21	; 0x10
    1b66:	5f ef       	ldi	r21, 0xFF	; 255
    1b68:	c5 16       	cp	r12, r21
    1b6a:	d5 06       	cpc	r13, r21
    1b6c:	41 f4       	brne	.+16     	; 0x1b7e <vfprintf+0x35e>
    1b6e:	b7 01       	movw	r22, r14
    1b70:	8e e2       	ldi	r24, 0x2E	; 46
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	2a 8b       	std	Y+18, r18	; 0x12
    1b76:	39 8b       	std	Y+17, r19	; 0x11
    1b78:	ec d2       	rcall	.+1496   	; 0x2152 <fputc>
    1b7a:	39 89       	ldd	r19, Y+17	; 0x11
    1b7c:	2a 89       	ldd	r18, Y+18	; 0x12
    1b7e:	0c 15       	cp	r16, r12
    1b80:	1d 05       	cpc	r17, r13
    1b82:	54 f0       	brlt	.+20     	; 0x1b98 <vfprintf+0x378>
    1b84:	4d 85       	ldd	r20, Y+13	; 0x0d
    1b86:	5e 85       	ldd	r21, Y+14	; 0x0e
    1b88:	4c 15       	cp	r20, r12
    1b8a:	5d 05       	cpc	r21, r13
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <vfprintf+0x378>
    1b8e:	f2 01       	movw	r30, r4
    1b90:	e2 0f       	add	r30, r18
    1b92:	f3 1f       	adc	r31, r19
    1b94:	81 81       	ldd	r24, Z+1	; 0x01
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <vfprintf+0x37a>
    1b98:	80 e3       	ldi	r24, 0x30	; 48
    1b9a:	51 e0       	ldi	r21, 0x01	; 1
    1b9c:	c5 1a       	sub	r12, r21
    1b9e:	d1 08       	sbc	r13, r1
    1ba0:	2f 5f       	subi	r18, 0xFF	; 255
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ba6:	58 89       	ldd	r21, Y+16	; 0x10
    1ba8:	c4 16       	cp	r12, r20
    1baa:	d5 06       	cpc	r13, r21
    1bac:	44 f0       	brlt	.+16     	; 0x1bbe <vfprintf+0x39e>
    1bae:	b7 01       	movw	r22, r14
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	2a 8b       	std	Y+18, r18	; 0x12
    1bb4:	39 8b       	std	Y+17, r19	; 0x11
    1bb6:	cd d2       	rcall	.+1434   	; 0x2152 <fputc>
    1bb8:	2a 89       	ldd	r18, Y+18	; 0x12
    1bba:	39 89       	ldd	r19, Y+17	; 0x11
    1bbc:	d4 cf       	rjmp	.-88     	; 0x1b66 <vfprintf+0x346>
    1bbe:	c0 16       	cp	r12, r16
    1bc0:	d1 06       	cpc	r13, r17
    1bc2:	49 f4       	brne	.+18     	; 0x1bd6 <vfprintf+0x3b6>
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	96 33       	cpi	r25, 0x36	; 54
    1bc8:	28 f4       	brcc	.+10     	; 0x1bd4 <vfprintf+0x3b4>
    1bca:	95 33       	cpi	r25, 0x35	; 53
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <vfprintf+0x3b6>
    1bce:	5c 85       	ldd	r21, Y+12	; 0x0c
    1bd0:	54 fd       	sbrc	r21, 4
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <vfprintf+0x3b6>
    1bd4:	81 e3       	ldi	r24, 0x31	; 49
    1bd6:	b7 01       	movw	r22, r14
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	44 c0       	rjmp	.+136    	; 0x1c64 <vfprintf+0x444>
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	81 33       	cpi	r24, 0x31	; 49
    1be0:	19 f0       	breq	.+6      	; 0x1be8 <vfprintf+0x3c8>
    1be2:	4c 85       	ldd	r20, Y+12	; 0x0c
    1be4:	4f 7e       	andi	r20, 0xEF	; 239
    1be6:	4c 87       	std	Y+12, r20	; 0x0c
    1be8:	b7 01       	movw	r22, r14
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	b2 d2       	rcall	.+1380   	; 0x2152 <fputc>
    1bee:	71 10       	cpse	r7, r1
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <vfprintf+0x3dc>
    1bf2:	54 fe       	sbrs	r5, 4
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <vfprintf+0x3fe>
    1bf6:	85 e4       	ldi	r24, 0x45	; 69
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	13 c0       	rjmp	.+38     	; 0x1c22 <vfprintf+0x402>
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	8e e2       	ldi	r24, 0x2E	; 46
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a7 d2       	rcall	.+1358   	; 0x2152 <fputc>
    1c04:	42 e0       	ldi	r20, 0x02	; 2
    1c06:	d4 2e       	mov	r13, r20
    1c08:	f4 01       	movw	r30, r8
    1c0a:	ed 0d       	add	r30, r13
    1c0c:	f1 1d       	adc	r31, r1
    1c0e:	d3 94       	inc	r13
    1c10:	b7 01       	movw	r22, r14
    1c12:	80 81       	ld	r24, Z
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9d d2       	rcall	.+1338   	; 0x2152 <fputc>
    1c18:	7a 94       	dec	r7
    1c1a:	b1 f7       	brne	.-20     	; 0x1c08 <vfprintf+0x3e8>
    1c1c:	ea cf       	rjmp	.-44     	; 0x1bf2 <vfprintf+0x3d2>
    1c1e:	85 e6       	ldi	r24, 0x65	; 101
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	b7 01       	movw	r22, r14
    1c24:	96 d2       	rcall	.+1324   	; 0x2152 <fputc>
    1c26:	17 fd       	sbrc	r17, 7
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <vfprintf+0x416>
    1c2a:	01 15       	cp	r16, r1
    1c2c:	11 05       	cpc	r17, r1
    1c2e:	41 f4       	brne	.+16     	; 0x1c40 <vfprintf+0x420>
    1c30:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c32:	54 ff       	sbrs	r21, 4
    1c34:	05 c0       	rjmp	.+10     	; 0x1c40 <vfprintf+0x420>
    1c36:	11 95       	neg	r17
    1c38:	01 95       	neg	r16
    1c3a:	11 09       	sbc	r17, r1
    1c3c:	8d e2       	ldi	r24, 0x2D	; 45
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <vfprintf+0x422>
    1c40:	8b e2       	ldi	r24, 0x2B	; 43
    1c42:	b7 01       	movw	r22, r14
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	85 d2       	rcall	.+1290   	; 0x2152 <fputc>
    1c48:	80 e3       	ldi	r24, 0x30	; 48
    1c4a:	03 c0       	rjmp	.+6      	; 0x1c52 <vfprintf+0x432>
    1c4c:	8f 5f       	subi	r24, 0xFF	; 255
    1c4e:	0a 50       	subi	r16, 0x0A	; 10
    1c50:	11 09       	sbc	r17, r1
    1c52:	0a 30       	cpi	r16, 0x0A	; 10
    1c54:	11 05       	cpc	r17, r1
    1c56:	d4 f7       	brge	.-12     	; 0x1c4c <vfprintf+0x42c>
    1c58:	b7 01       	movw	r22, r14
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	7a d2       	rcall	.+1268   	; 0x2152 <fputc>
    1c5e:	b7 01       	movw	r22, r14
    1c60:	c8 01       	movw	r24, r16
    1c62:	c0 96       	adiw	r24, 0x30	; 48
    1c64:	76 d2       	rcall	.+1260   	; 0x2152 <fputc>
    1c66:	44 c1       	rjmp	.+648    	; 0x1ef0 <vfprintf+0x6d0>
    1c68:	83 36       	cpi	r24, 0x63	; 99
    1c6a:	31 f0       	breq	.+12     	; 0x1c78 <vfprintf+0x458>
    1c6c:	83 37       	cpi	r24, 0x73	; 115
    1c6e:	81 f0       	breq	.+32     	; 0x1c90 <vfprintf+0x470>
    1c70:	83 35       	cpi	r24, 0x53	; 83
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <vfprintf+0x456>
    1c74:	5a c0       	rjmp	.+180    	; 0x1d2a <vfprintf+0x50a>
    1c76:	23 c0       	rjmp	.+70     	; 0x1cbe <vfprintf+0x49e>
    1c78:	56 01       	movw	r10, r12
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	a8 0e       	add	r10, r24
    1c7e:	b1 1c       	adc	r11, r1
    1c80:	f6 01       	movw	r30, r12
    1c82:	80 81       	ld	r24, Z
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	cc 24       	eor	r12, r12
    1c88:	c3 94       	inc	r12
    1c8a:	d1 2c       	mov	r13, r1
    1c8c:	84 01       	movw	r16, r8
    1c8e:	13 c0       	rjmp	.+38     	; 0x1cb6 <vfprintf+0x496>
    1c90:	56 01       	movw	r10, r12
    1c92:	f2 e0       	ldi	r31, 0x02	; 2
    1c94:	af 0e       	add	r10, r31
    1c96:	b1 1c       	adc	r11, r1
    1c98:	f6 01       	movw	r30, r12
    1c9a:	00 81       	ld	r16, Z
    1c9c:	11 81       	ldd	r17, Z+1	; 0x01
    1c9e:	26 ff       	sbrs	r18, 6
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <vfprintf+0x488>
    1ca2:	67 2d       	mov	r22, r7
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <vfprintf+0x48c>
    1ca8:	6f ef       	ldi	r22, 0xFF	; 255
    1caa:	7f ef       	ldi	r23, 0xFF	; 255
    1cac:	c8 01       	movw	r24, r16
    1cae:	2a 8b       	std	Y+18, r18	; 0x12
    1cb0:	36 d2       	rcall	.+1132   	; 0x211e <strnlen>
    1cb2:	6c 01       	movw	r12, r24
    1cb4:	2a 89       	ldd	r18, Y+18	; 0x12
    1cb6:	9f e7       	ldi	r25, 0x7F	; 127
    1cb8:	59 2e       	mov	r5, r25
    1cba:	52 22       	and	r5, r18
    1cbc:	16 c0       	rjmp	.+44     	; 0x1cea <vfprintf+0x4ca>
    1cbe:	56 01       	movw	r10, r12
    1cc0:	f2 e0       	ldi	r31, 0x02	; 2
    1cc2:	af 0e       	add	r10, r31
    1cc4:	b1 1c       	adc	r11, r1
    1cc6:	f6 01       	movw	r30, r12
    1cc8:	00 81       	ld	r16, Z
    1cca:	11 81       	ldd	r17, Z+1	; 0x01
    1ccc:	26 ff       	sbrs	r18, 6
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <vfprintf+0x4b6>
    1cd0:	67 2d       	mov	r22, r7
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <vfprintf+0x4ba>
    1cd6:	6f ef       	ldi	r22, 0xFF	; 255
    1cd8:	7f ef       	ldi	r23, 0xFF	; 255
    1cda:	c8 01       	movw	r24, r16
    1cdc:	2a 8b       	std	Y+18, r18	; 0x12
    1cde:	14 d2       	rcall	.+1064   	; 0x2108 <strnlen_P>
    1ce0:	6c 01       	movw	r12, r24
    1ce2:	2a 89       	ldd	r18, Y+18	; 0x12
    1ce4:	80 e8       	ldi	r24, 0x80	; 128
    1ce6:	58 2e       	mov	r5, r24
    1ce8:	52 2a       	or	r5, r18
    1cea:	53 fc       	sbrc	r5, 3
    1cec:	1a c0       	rjmp	.+52     	; 0x1d22 <vfprintf+0x502>
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <vfprintf+0x4da>
    1cf0:	b7 01       	movw	r22, r14
    1cf2:	80 e2       	ldi	r24, 0x20	; 32
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	2d d2       	rcall	.+1114   	; 0x2152 <fputc>
    1cf8:	6a 94       	dec	r6
    1cfa:	86 2d       	mov	r24, r6
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	c8 16       	cp	r12, r24
    1d00:	d9 06       	cpc	r13, r25
    1d02:	b0 f3       	brcs	.-20     	; 0x1cf0 <vfprintf+0x4d0>
    1d04:	0e c0       	rjmp	.+28     	; 0x1d22 <vfprintf+0x502>
    1d06:	f8 01       	movw	r30, r16
    1d08:	57 fc       	sbrc	r5, 7
    1d0a:	85 91       	lpm	r24, Z+
    1d0c:	57 fe       	sbrs	r5, 7
    1d0e:	81 91       	ld	r24, Z+
    1d10:	8f 01       	movw	r16, r30
    1d12:	b7 01       	movw	r22, r14
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	1d d2       	rcall	.+1082   	; 0x2152 <fputc>
    1d18:	61 10       	cpse	r6, r1
    1d1a:	6a 94       	dec	r6
    1d1c:	f1 e0       	ldi	r31, 0x01	; 1
    1d1e:	cf 1a       	sub	r12, r31
    1d20:	d1 08       	sbc	r13, r1
    1d22:	c1 14       	cp	r12, r1
    1d24:	d1 04       	cpc	r13, r1
    1d26:	79 f7       	brne	.-34     	; 0x1d06 <vfprintf+0x4e6>
    1d28:	e3 c0       	rjmp	.+454    	; 0x1ef0 <vfprintf+0x6d0>
    1d2a:	84 36       	cpi	r24, 0x64	; 100
    1d2c:	11 f0       	breq	.+4      	; 0x1d32 <vfprintf+0x512>
    1d2e:	89 36       	cpi	r24, 0x69	; 105
    1d30:	49 f5       	brne	.+82     	; 0x1d84 <vfprintf+0x564>
    1d32:	56 01       	movw	r10, r12
    1d34:	27 ff       	sbrs	r18, 7
    1d36:	09 c0       	rjmp	.+18     	; 0x1d4a <vfprintf+0x52a>
    1d38:	44 e0       	ldi	r20, 0x04	; 4
    1d3a:	a4 0e       	add	r10, r20
    1d3c:	b1 1c       	adc	r11, r1
    1d3e:	f6 01       	movw	r30, r12
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	0a c0       	rjmp	.+20     	; 0x1d5e <vfprintf+0x53e>
    1d4a:	f2 e0       	ldi	r31, 0x02	; 2
    1d4c:	af 0e       	add	r10, r31
    1d4e:	b1 1c       	adc	r11, r1
    1d50:	f6 01       	movw	r30, r12
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	88 27       	eor	r24, r24
    1d58:	77 fd       	sbrc	r23, 7
    1d5a:	80 95       	com	r24
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	12 2f       	mov	r17, r18
    1d60:	1f 76       	andi	r17, 0x6F	; 111
    1d62:	97 ff       	sbrs	r25, 7
    1d64:	08 c0       	rjmp	.+16     	; 0x1d76 <vfprintf+0x556>
    1d66:	90 95       	com	r25
    1d68:	80 95       	com	r24
    1d6a:	70 95       	com	r23
    1d6c:	61 95       	neg	r22
    1d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d70:	8f 4f       	sbci	r24, 0xFF	; 255
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	10 68       	ori	r17, 0x80	; 128
    1d76:	2a e0       	ldi	r18, 0x0A	; 10
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	a4 01       	movw	r20, r8
    1d7c:	25 d2       	rcall	.+1098   	; 0x21c8 <__ultoa_invert>
    1d7e:	d8 2e       	mov	r13, r24
    1d80:	d8 18       	sub	r13, r8
    1d82:	3f c0       	rjmp	.+126    	; 0x1e02 <vfprintf+0x5e2>
    1d84:	12 2f       	mov	r17, r18
    1d86:	85 37       	cpi	r24, 0x75	; 117
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <vfprintf+0x572>
    1d8a:	1f 7e       	andi	r17, 0xEF	; 239
    1d8c:	2a e0       	ldi	r18, 0x0A	; 10
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	1f c0       	rjmp	.+62     	; 0x1dd0 <vfprintf+0x5b0>
    1d92:	19 7f       	andi	r17, 0xF9	; 249
    1d94:	8f 36       	cpi	r24, 0x6F	; 111
    1d96:	a1 f0       	breq	.+40     	; 0x1dc0 <vfprintf+0x5a0>
    1d98:	20 f4       	brcc	.+8      	; 0x1da2 <vfprintf+0x582>
    1d9a:	88 35       	cpi	r24, 0x58	; 88
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <vfprintf+0x580>
    1d9e:	ab c0       	rjmp	.+342    	; 0x1ef6 <vfprintf+0x6d6>
    1da0:	0b c0       	rjmp	.+22     	; 0x1db8 <vfprintf+0x598>
    1da2:	80 37       	cpi	r24, 0x70	; 112
    1da4:	21 f0       	breq	.+8      	; 0x1dae <vfprintf+0x58e>
    1da6:	88 37       	cpi	r24, 0x78	; 120
    1da8:	09 f0       	breq	.+2      	; 0x1dac <vfprintf+0x58c>
    1daa:	a5 c0       	rjmp	.+330    	; 0x1ef6 <vfprintf+0x6d6>
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <vfprintf+0x590>
    1dae:	10 61       	ori	r17, 0x10	; 16
    1db0:	14 ff       	sbrs	r17, 4
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <vfprintf+0x5a6>
    1db4:	14 60       	ori	r17, 0x04	; 4
    1db6:	07 c0       	rjmp	.+14     	; 0x1dc6 <vfprintf+0x5a6>
    1db8:	24 ff       	sbrs	r18, 4
    1dba:	08 c0       	rjmp	.+16     	; 0x1dcc <vfprintf+0x5ac>
    1dbc:	16 60       	ori	r17, 0x06	; 6
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <vfprintf+0x5ac>
    1dc0:	28 e0       	ldi	r18, 0x08	; 8
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <vfprintf+0x5b0>
    1dc6:	20 e1       	ldi	r18, 0x10	; 16
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <vfprintf+0x5b0>
    1dcc:	20 e1       	ldi	r18, 0x10	; 16
    1dce:	32 e0       	ldi	r19, 0x02	; 2
    1dd0:	56 01       	movw	r10, r12
    1dd2:	17 ff       	sbrs	r17, 7
    1dd4:	09 c0       	rjmp	.+18     	; 0x1de8 <vfprintf+0x5c8>
    1dd6:	f4 e0       	ldi	r31, 0x04	; 4
    1dd8:	af 0e       	add	r10, r31
    1dda:	b1 1c       	adc	r11, r1
    1ddc:	f6 01       	movw	r30, r12
    1dde:	60 81       	ld	r22, Z
    1de0:	71 81       	ldd	r23, Z+1	; 0x01
    1de2:	82 81       	ldd	r24, Z+2	; 0x02
    1de4:	93 81       	ldd	r25, Z+3	; 0x03
    1de6:	08 c0       	rjmp	.+16     	; 0x1df8 <vfprintf+0x5d8>
    1de8:	f2 e0       	ldi	r31, 0x02	; 2
    1dea:	af 0e       	add	r10, r31
    1dec:	b1 1c       	adc	r11, r1
    1dee:	f6 01       	movw	r30, r12
    1df0:	60 81       	ld	r22, Z
    1df2:	71 81       	ldd	r23, Z+1	; 0x01
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a4 01       	movw	r20, r8
    1dfa:	e6 d1       	rcall	.+972    	; 0x21c8 <__ultoa_invert>
    1dfc:	d8 2e       	mov	r13, r24
    1dfe:	d8 18       	sub	r13, r8
    1e00:	1f 77       	andi	r17, 0x7F	; 127
    1e02:	16 ff       	sbrs	r17, 6
    1e04:	0b c0       	rjmp	.+22     	; 0x1e1c <vfprintf+0x5fc>
    1e06:	21 2f       	mov	r18, r17
    1e08:	2e 7f       	andi	r18, 0xFE	; 254
    1e0a:	d7 14       	cp	r13, r7
    1e0c:	50 f4       	brcc	.+20     	; 0x1e22 <vfprintf+0x602>
    1e0e:	14 ff       	sbrs	r17, 4
    1e10:	0a c0       	rjmp	.+20     	; 0x1e26 <vfprintf+0x606>
    1e12:	12 fd       	sbrc	r17, 2
    1e14:	08 c0       	rjmp	.+16     	; 0x1e26 <vfprintf+0x606>
    1e16:	21 2f       	mov	r18, r17
    1e18:	2e 7e       	andi	r18, 0xEE	; 238
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <vfprintf+0x606>
    1e1c:	0d 2d       	mov	r16, r13
    1e1e:	21 2f       	mov	r18, r17
    1e20:	03 c0       	rjmp	.+6      	; 0x1e28 <vfprintf+0x608>
    1e22:	0d 2d       	mov	r16, r13
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <vfprintf+0x608>
    1e26:	07 2d       	mov	r16, r7
    1e28:	24 ff       	sbrs	r18, 4
    1e2a:	0c c0       	rjmp	.+24     	; 0x1e44 <vfprintf+0x624>
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	ed 0d       	add	r30, r13
    1e30:	f1 1d       	adc	r31, r1
    1e32:	80 81       	ld	r24, Z
    1e34:	80 33       	cpi	r24, 0x30	; 48
    1e36:	11 f4       	brne	.+4      	; 0x1e3c <vfprintf+0x61c>
    1e38:	29 7e       	andi	r18, 0xE9	; 233
    1e3a:	08 c0       	rjmp	.+16     	; 0x1e4c <vfprintf+0x62c>
    1e3c:	22 ff       	sbrs	r18, 2
    1e3e:	05 c0       	rjmp	.+10     	; 0x1e4a <vfprintf+0x62a>
    1e40:	0e 5f       	subi	r16, 0xFE	; 254
    1e42:	04 c0       	rjmp	.+8      	; 0x1e4c <vfprintf+0x62c>
    1e44:	82 2f       	mov	r24, r18
    1e46:	86 78       	andi	r24, 0x86	; 134
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <vfprintf+0x62c>
    1e4a:	0f 5f       	subi	r16, 0xFF	; 255
    1e4c:	23 fd       	sbrc	r18, 3
    1e4e:	13 c0       	rjmp	.+38     	; 0x1e76 <vfprintf+0x656>
    1e50:	20 ff       	sbrs	r18, 0
    1e52:	0e c0       	rjmp	.+28     	; 0x1e70 <vfprintf+0x650>
    1e54:	7d 2c       	mov	r7, r13
    1e56:	06 15       	cp	r16, r6
    1e58:	58 f4       	brcc	.+22     	; 0x1e70 <vfprintf+0x650>
    1e5a:	76 0c       	add	r7, r6
    1e5c:	70 1a       	sub	r7, r16
    1e5e:	06 2d       	mov	r16, r6
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <vfprintf+0x650>
    1e62:	b7 01       	movw	r22, r14
    1e64:	80 e2       	ldi	r24, 0x20	; 32
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	2a 8b       	std	Y+18, r18	; 0x12
    1e6a:	73 d1       	rcall	.+742    	; 0x2152 <fputc>
    1e6c:	0f 5f       	subi	r16, 0xFF	; 255
    1e6e:	2a 89       	ldd	r18, Y+18	; 0x12
    1e70:	06 15       	cp	r16, r6
    1e72:	b8 f3       	brcs	.-18     	; 0x1e62 <vfprintf+0x642>
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <vfprintf+0x65e>
    1e76:	06 15       	cp	r16, r6
    1e78:	10 f4       	brcc	.+4      	; 0x1e7e <vfprintf+0x65e>
    1e7a:	60 1a       	sub	r6, r16
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <vfprintf+0x660>
    1e7e:	61 2c       	mov	r6, r1
    1e80:	24 ff       	sbrs	r18, 4
    1e82:	11 c0       	rjmp	.+34     	; 0x1ea6 <vfprintf+0x686>
    1e84:	b7 01       	movw	r22, r14
    1e86:	80 e3       	ldi	r24, 0x30	; 48
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	2a 8b       	std	Y+18, r18	; 0x12
    1e8c:	62 d1       	rcall	.+708    	; 0x2152 <fputc>
    1e8e:	2a 89       	ldd	r18, Y+18	; 0x12
    1e90:	22 ff       	sbrs	r18, 2
    1e92:	1c c0       	rjmp	.+56     	; 0x1ecc <vfprintf+0x6ac>
    1e94:	21 ff       	sbrs	r18, 1
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <vfprintf+0x67e>
    1e98:	88 e5       	ldi	r24, 0x58	; 88
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <vfprintf+0x682>
    1e9e:	88 e7       	ldi	r24, 0x78	; 120
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	b7 01       	movw	r22, r14
    1ea4:	0c c0       	rjmp	.+24     	; 0x1ebe <vfprintf+0x69e>
    1ea6:	82 2f       	mov	r24, r18
    1ea8:	86 78       	andi	r24, 0x86	; 134
    1eaa:	81 f0       	breq	.+32     	; 0x1ecc <vfprintf+0x6ac>
    1eac:	21 fd       	sbrc	r18, 1
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <vfprintf+0x694>
    1eb0:	80 e2       	ldi	r24, 0x20	; 32
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <vfprintf+0x696>
    1eb4:	8b e2       	ldi	r24, 0x2B	; 43
    1eb6:	27 fd       	sbrc	r18, 7
    1eb8:	8d e2       	ldi	r24, 0x2D	; 45
    1eba:	b7 01       	movw	r22, r14
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	49 d1       	rcall	.+658    	; 0x2152 <fputc>
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <vfprintf+0x6ac>
    1ec2:	b7 01       	movw	r22, r14
    1ec4:	80 e3       	ldi	r24, 0x30	; 48
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	44 d1       	rcall	.+648    	; 0x2152 <fputc>
    1eca:	7a 94       	dec	r7
    1ecc:	d7 14       	cp	r13, r7
    1ece:	c8 f3       	brcs	.-14     	; 0x1ec2 <vfprintf+0x6a2>
    1ed0:	da 94       	dec	r13
    1ed2:	f4 01       	movw	r30, r8
    1ed4:	ed 0d       	add	r30, r13
    1ed6:	f1 1d       	adc	r31, r1
    1ed8:	b7 01       	movw	r22, r14
    1eda:	80 81       	ld	r24, Z
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	39 d1       	rcall	.+626    	; 0x2152 <fputc>
    1ee0:	d1 10       	cpse	r13, r1
    1ee2:	f6 cf       	rjmp	.-20     	; 0x1ed0 <vfprintf+0x6b0>
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <vfprintf+0x6d0>
    1ee6:	b7 01       	movw	r22, r14
    1ee8:	80 e2       	ldi	r24, 0x20	; 32
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	32 d1       	rcall	.+612    	; 0x2152 <fputc>
    1eee:	6a 94       	dec	r6
    1ef0:	61 10       	cpse	r6, r1
    1ef2:	f9 cf       	rjmp	.-14     	; 0x1ee6 <vfprintf+0x6c6>
    1ef4:	b6 cc       	rjmp	.-1684   	; 0x1862 <vfprintf+0x42>
    1ef6:	f7 01       	movw	r30, r14
    1ef8:	26 81       	ldd	r18, Z+6	; 0x06
    1efa:	37 81       	ldd	r19, Z+7	; 0x07
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <vfprintf+0x6e2>
    1efe:	2f ef       	ldi	r18, 0xFF	; 255
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	c9 01       	movw	r24, r18
    1f04:	62 96       	adiw	r28, 0x12	; 18
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	df 90       	pop	r13
    1f18:	cf 90       	pop	r12
    1f1a:	bf 90       	pop	r11
    1f1c:	af 90       	pop	r10
    1f1e:	9f 90       	pop	r9
    1f20:	8f 90       	pop	r8
    1f22:	7f 90       	pop	r7
    1f24:	6f 90       	pop	r6
    1f26:	5f 90       	pop	r5
    1f28:	4f 90       	pop	r4
    1f2a:	3f 90       	pop	r3
    1f2c:	2f 90       	pop	r2
    1f2e:	08 95       	ret

00001f30 <__udivmodhi4>:
    1f30:	aa 1b       	sub	r26, r26
    1f32:	bb 1b       	sub	r27, r27
    1f34:	51 e1       	ldi	r21, 0x11	; 17
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <__udivmodhi4_ep>

00001f38 <__udivmodhi4_loop>:
    1f38:	aa 1f       	adc	r26, r26
    1f3a:	bb 1f       	adc	r27, r27
    1f3c:	a6 17       	cp	r26, r22
    1f3e:	b7 07       	cpc	r27, r23
    1f40:	10 f0       	brcs	.+4      	; 0x1f46 <__udivmodhi4_ep>
    1f42:	a6 1b       	sub	r26, r22
    1f44:	b7 0b       	sbc	r27, r23

00001f46 <__udivmodhi4_ep>:
    1f46:	88 1f       	adc	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	5a 95       	dec	r21
    1f4c:	a9 f7       	brne	.-22     	; 0x1f38 <__udivmodhi4_loop>
    1f4e:	80 95       	com	r24
    1f50:	90 95       	com	r25
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	08 95       	ret

00001f58 <__ftoa_engine>:
    1f58:	28 30       	cpi	r18, 0x08	; 8
    1f5a:	08 f0       	brcs	.+2      	; 0x1f5e <__ftoa_engine+0x6>
    1f5c:	27 e0       	ldi	r18, 0x07	; 7
    1f5e:	33 27       	eor	r19, r19
    1f60:	da 01       	movw	r26, r20
    1f62:	99 0f       	add	r25, r25
    1f64:	31 1d       	adc	r19, r1
    1f66:	87 fd       	sbrc	r24, 7
    1f68:	91 60       	ori	r25, 0x01	; 1
    1f6a:	00 96       	adiw	r24, 0x00	; 0
    1f6c:	61 05       	cpc	r22, r1
    1f6e:	71 05       	cpc	r23, r1
    1f70:	39 f4       	brne	.+14     	; 0x1f80 <__ftoa_engine+0x28>
    1f72:	32 60       	ori	r19, 0x02	; 2
    1f74:	2e 5f       	subi	r18, 0xFE	; 254
    1f76:	3d 93       	st	X+, r19
    1f78:	30 e3       	ldi	r19, 0x30	; 48
    1f7a:	2a 95       	dec	r18
    1f7c:	e1 f7       	brne	.-8      	; 0x1f76 <__ftoa_engine+0x1e>
    1f7e:	08 95       	ret
    1f80:	9f 3f       	cpi	r25, 0xFF	; 255
    1f82:	30 f0       	brcs	.+12     	; 0x1f90 <__ftoa_engine+0x38>
    1f84:	80 38       	cpi	r24, 0x80	; 128
    1f86:	71 05       	cpc	r23, r1
    1f88:	61 05       	cpc	r22, r1
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <__ftoa_engine+0x36>
    1f8c:	3c 5f       	subi	r19, 0xFC	; 252
    1f8e:	3c 5f       	subi	r19, 0xFC	; 252
    1f90:	3d 93       	st	X+, r19
    1f92:	91 30       	cpi	r25, 0x01	; 1
    1f94:	08 f0       	brcs	.+2      	; 0x1f98 <__ftoa_engine+0x40>
    1f96:	80 68       	ori	r24, 0x80	; 128
    1f98:	91 1d       	adc	r25, r1
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	1f 93       	push	r17
    1fa0:	0f 93       	push	r16
    1fa2:	ff 92       	push	r15
    1fa4:	ef 92       	push	r14
    1fa6:	19 2f       	mov	r17, r25
    1fa8:	98 7f       	andi	r25, 0xF8	; 248
    1faa:	96 95       	lsr	r25
    1fac:	e9 2f       	mov	r30, r25
    1fae:	96 95       	lsr	r25
    1fb0:	96 95       	lsr	r25
    1fb2:	e9 0f       	add	r30, r25
    1fb4:	ff 27       	eor	r31, r31
    1fb6:	e2 5a       	subi	r30, 0xA2	; 162
    1fb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fba:	99 27       	eor	r25, r25
    1fbc:	33 27       	eor	r19, r19
    1fbe:	ee 24       	eor	r14, r14
    1fc0:	ff 24       	eor	r15, r15
    1fc2:	a7 01       	movw	r20, r14
    1fc4:	e7 01       	movw	r28, r14
    1fc6:	05 90       	lpm	r0, Z+
    1fc8:	08 94       	sec
    1fca:	07 94       	ror	r0
    1fcc:	28 f4       	brcc	.+10     	; 0x1fd8 <__ftoa_engine+0x80>
    1fce:	36 0f       	add	r19, r22
    1fd0:	e7 1e       	adc	r14, r23
    1fd2:	f8 1e       	adc	r15, r24
    1fd4:	49 1f       	adc	r20, r25
    1fd6:	51 1d       	adc	r21, r1
    1fd8:	66 0f       	add	r22, r22
    1fda:	77 1f       	adc	r23, r23
    1fdc:	88 1f       	adc	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	06 94       	lsr	r0
    1fe2:	a1 f7       	brne	.-24     	; 0x1fcc <__ftoa_engine+0x74>
    1fe4:	05 90       	lpm	r0, Z+
    1fe6:	07 94       	ror	r0
    1fe8:	28 f4       	brcc	.+10     	; 0x1ff4 <__ftoa_engine+0x9c>
    1fea:	e7 0e       	add	r14, r23
    1fec:	f8 1e       	adc	r15, r24
    1fee:	49 1f       	adc	r20, r25
    1ff0:	56 1f       	adc	r21, r22
    1ff2:	c1 1d       	adc	r28, r1
    1ff4:	77 0f       	add	r23, r23
    1ff6:	88 1f       	adc	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	66 1f       	adc	r22, r22
    1ffc:	06 94       	lsr	r0
    1ffe:	a1 f7       	brne	.-24     	; 0x1fe8 <__ftoa_engine+0x90>
    2000:	05 90       	lpm	r0, Z+
    2002:	07 94       	ror	r0
    2004:	28 f4       	brcc	.+10     	; 0x2010 <__ftoa_engine+0xb8>
    2006:	f8 0e       	add	r15, r24
    2008:	49 1f       	adc	r20, r25
    200a:	56 1f       	adc	r21, r22
    200c:	c7 1f       	adc	r28, r23
    200e:	d1 1d       	adc	r29, r1
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	66 1f       	adc	r22, r22
    2016:	77 1f       	adc	r23, r23
    2018:	06 94       	lsr	r0
    201a:	a1 f7       	brne	.-24     	; 0x2004 <__ftoa_engine+0xac>
    201c:	05 90       	lpm	r0, Z+
    201e:	07 94       	ror	r0
    2020:	20 f4       	brcc	.+8      	; 0x202a <__ftoa_engine+0xd2>
    2022:	49 0f       	add	r20, r25
    2024:	56 1f       	adc	r21, r22
    2026:	c7 1f       	adc	r28, r23
    2028:	d8 1f       	adc	r29, r24
    202a:	99 0f       	add	r25, r25
    202c:	66 1f       	adc	r22, r22
    202e:	77 1f       	adc	r23, r23
    2030:	88 1f       	adc	r24, r24
    2032:	06 94       	lsr	r0
    2034:	a9 f7       	brne	.-22     	; 0x2020 <__ftoa_engine+0xc8>
    2036:	84 91       	lpm	r24, Z
    2038:	10 95       	com	r17
    203a:	17 70       	andi	r17, 0x07	; 7
    203c:	41 f0       	breq	.+16     	; 0x204e <__ftoa_engine+0xf6>
    203e:	d6 95       	lsr	r29
    2040:	c7 95       	ror	r28
    2042:	57 95       	ror	r21
    2044:	47 95       	ror	r20
    2046:	f7 94       	ror	r15
    2048:	e7 94       	ror	r14
    204a:	1a 95       	dec	r17
    204c:	c1 f7       	brne	.-16     	; 0x203e <__ftoa_engine+0xe6>
    204e:	e4 e0       	ldi	r30, 0x04	; 4
    2050:	f2 e0       	ldi	r31, 0x02	; 2
    2052:	68 94       	set
    2054:	15 90       	lpm	r1, Z+
    2056:	15 91       	lpm	r17, Z+
    2058:	35 91       	lpm	r19, Z+
    205a:	65 91       	lpm	r22, Z+
    205c:	95 91       	lpm	r25, Z+
    205e:	05 90       	lpm	r0, Z+
    2060:	7f e2       	ldi	r23, 0x2F	; 47
    2062:	73 95       	inc	r23
    2064:	e1 18       	sub	r14, r1
    2066:	f1 0a       	sbc	r15, r17
    2068:	43 0b       	sbc	r20, r19
    206a:	56 0b       	sbc	r21, r22
    206c:	c9 0b       	sbc	r28, r25
    206e:	d0 09       	sbc	r29, r0
    2070:	c0 f7       	brcc	.-16     	; 0x2062 <__ftoa_engine+0x10a>
    2072:	e1 0c       	add	r14, r1
    2074:	f1 1e       	adc	r15, r17
    2076:	43 1f       	adc	r20, r19
    2078:	56 1f       	adc	r21, r22
    207a:	c9 1f       	adc	r28, r25
    207c:	d0 1d       	adc	r29, r0
    207e:	7e f4       	brtc	.+30     	; 0x209e <__ftoa_engine+0x146>
    2080:	70 33       	cpi	r23, 0x30	; 48
    2082:	11 f4       	brne	.+4      	; 0x2088 <__ftoa_engine+0x130>
    2084:	8a 95       	dec	r24
    2086:	e6 cf       	rjmp	.-52     	; 0x2054 <__ftoa_engine+0xfc>
    2088:	e8 94       	clt
    208a:	01 50       	subi	r16, 0x01	; 1
    208c:	30 f0       	brcs	.+12     	; 0x209a <__ftoa_engine+0x142>
    208e:	08 0f       	add	r16, r24
    2090:	0a f4       	brpl	.+2      	; 0x2094 <__ftoa_engine+0x13c>
    2092:	00 27       	eor	r16, r16
    2094:	02 17       	cp	r16, r18
    2096:	08 f4       	brcc	.+2      	; 0x209a <__ftoa_engine+0x142>
    2098:	20 2f       	mov	r18, r16
    209a:	23 95       	inc	r18
    209c:	02 2f       	mov	r16, r18
    209e:	7a 33       	cpi	r23, 0x3A	; 58
    20a0:	28 f0       	brcs	.+10     	; 0x20ac <__ftoa_engine+0x154>
    20a2:	79 e3       	ldi	r23, 0x39	; 57
    20a4:	7d 93       	st	X+, r23
    20a6:	2a 95       	dec	r18
    20a8:	e9 f7       	brne	.-6      	; 0x20a4 <__ftoa_engine+0x14c>
    20aa:	10 c0       	rjmp	.+32     	; 0x20cc <__ftoa_engine+0x174>
    20ac:	7d 93       	st	X+, r23
    20ae:	2a 95       	dec	r18
    20b0:	89 f6       	brne	.-94     	; 0x2054 <__ftoa_engine+0xfc>
    20b2:	06 94       	lsr	r0
    20b4:	97 95       	ror	r25
    20b6:	67 95       	ror	r22
    20b8:	37 95       	ror	r19
    20ba:	17 95       	ror	r17
    20bc:	17 94       	ror	r1
    20be:	e1 18       	sub	r14, r1
    20c0:	f1 0a       	sbc	r15, r17
    20c2:	43 0b       	sbc	r20, r19
    20c4:	56 0b       	sbc	r21, r22
    20c6:	c9 0b       	sbc	r28, r25
    20c8:	d0 09       	sbc	r29, r0
    20ca:	98 f0       	brcs	.+38     	; 0x20f2 <__ftoa_engine+0x19a>
    20cc:	23 95       	inc	r18
    20ce:	7e 91       	ld	r23, -X
    20d0:	73 95       	inc	r23
    20d2:	7a 33       	cpi	r23, 0x3A	; 58
    20d4:	08 f0       	brcs	.+2      	; 0x20d8 <__ftoa_engine+0x180>
    20d6:	70 e3       	ldi	r23, 0x30	; 48
    20d8:	7c 93       	st	X, r23
    20da:	20 13       	cpse	r18, r16
    20dc:	b8 f7       	brcc	.-18     	; 0x20cc <__ftoa_engine+0x174>
    20de:	7e 91       	ld	r23, -X
    20e0:	70 61       	ori	r23, 0x10	; 16
    20e2:	7d 93       	st	X+, r23
    20e4:	30 f0       	brcs	.+12     	; 0x20f2 <__ftoa_engine+0x19a>
    20e6:	83 95       	inc	r24
    20e8:	71 e3       	ldi	r23, 0x31	; 49
    20ea:	7d 93       	st	X+, r23
    20ec:	70 e3       	ldi	r23, 0x30	; 48
    20ee:	2a 95       	dec	r18
    20f0:	e1 f7       	brne	.-8      	; 0x20ea <__ftoa_engine+0x192>
    20f2:	11 24       	eor	r1, r1
    20f4:	ef 90       	pop	r14
    20f6:	ff 90       	pop	r15
    20f8:	0f 91       	pop	r16
    20fa:	1f 91       	pop	r17
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	99 27       	eor	r25, r25
    2102:	87 fd       	sbrc	r24, 7
    2104:	90 95       	com	r25
    2106:	08 95       	ret

00002108 <strnlen_P>:
    2108:	fc 01       	movw	r30, r24
    210a:	05 90       	lpm	r0, Z+
    210c:	61 50       	subi	r22, 0x01	; 1
    210e:	70 40       	sbci	r23, 0x00	; 0
    2110:	01 10       	cpse	r0, r1
    2112:	d8 f7       	brcc	.-10     	; 0x210a <strnlen_P+0x2>
    2114:	80 95       	com	r24
    2116:	90 95       	com	r25
    2118:	8e 0f       	add	r24, r30
    211a:	9f 1f       	adc	r25, r31
    211c:	08 95       	ret

0000211e <strnlen>:
    211e:	fc 01       	movw	r30, r24
    2120:	61 50       	subi	r22, 0x01	; 1
    2122:	70 40       	sbci	r23, 0x00	; 0
    2124:	01 90       	ld	r0, Z+
    2126:	01 10       	cpse	r0, r1
    2128:	d8 f7       	brcc	.-10     	; 0x2120 <strnlen+0x2>
    212a:	80 95       	com	r24
    212c:	90 95       	com	r25
    212e:	8e 0f       	add	r24, r30
    2130:	9f 1f       	adc	r25, r31
    2132:	08 95       	ret

00002134 <fprintf>:
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	ce 01       	movw	r24, r28
    213e:	0a 96       	adiw	r24, 0x0a	; 10
    2140:	ac 01       	movw	r20, r24
    2142:	68 85       	ldd	r22, Y+8	; 0x08
    2144:	79 85       	ldd	r23, Y+9	; 0x09
    2146:	8e 81       	ldd	r24, Y+6	; 0x06
    2148:	9f 81       	ldd	r25, Y+7	; 0x07
    214a:	6a db       	rcall	.-2348   	; 0x1820 <vfprintf>
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	08 95       	ret

00002152 <fputc>:
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	8c 01       	movw	r16, r24
    215c:	eb 01       	movw	r28, r22
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	81 fd       	sbrc	r24, 1
    2162:	03 c0       	rjmp	.+6      	; 0x216a <fputc+0x18>
    2164:	0f ef       	ldi	r16, 0xFF	; 255
    2166:	1f ef       	ldi	r17, 0xFF	; 255
    2168:	1a c0       	rjmp	.+52     	; 0x219e <fputc+0x4c>
    216a:	82 ff       	sbrs	r24, 2
    216c:	0d c0       	rjmp	.+26     	; 0x2188 <fputc+0x36>
    216e:	2e 81       	ldd	r18, Y+6	; 0x06
    2170:	3f 81       	ldd	r19, Y+7	; 0x07
    2172:	8c 81       	ldd	r24, Y+4	; 0x04
    2174:	9d 81       	ldd	r25, Y+5	; 0x05
    2176:	28 17       	cp	r18, r24
    2178:	39 07       	cpc	r19, r25
    217a:	64 f4       	brge	.+24     	; 0x2194 <fputc+0x42>
    217c:	e8 81       	ld	r30, Y
    217e:	f9 81       	ldd	r31, Y+1	; 0x01
    2180:	01 93       	st	Z+, r16
    2182:	e8 83       	st	Y, r30
    2184:	f9 83       	std	Y+1, r31	; 0x01
    2186:	06 c0       	rjmp	.+12     	; 0x2194 <fputc+0x42>
    2188:	e8 85       	ldd	r30, Y+8	; 0x08
    218a:	f9 85       	ldd	r31, Y+9	; 0x09
    218c:	80 2f       	mov	r24, r16
    218e:	19 95       	eicall
    2190:	89 2b       	or	r24, r25
    2192:	41 f7       	brne	.-48     	; 0x2164 <fputc+0x12>
    2194:	8e 81       	ldd	r24, Y+6	; 0x06
    2196:	9f 81       	ldd	r25, Y+7	; 0x07
    2198:	01 96       	adiw	r24, 0x01	; 1
    219a:	8e 83       	std	Y+6, r24	; 0x06
    219c:	9f 83       	std	Y+7, r25	; 0x07
    219e:	c8 01       	movw	r24, r16
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	08 95       	ret

000021aa <fscanf>:
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	ce 01       	movw	r24, r28
    21b4:	0a 96       	adiw	r24, 0x0a	; 10
    21b6:	ac 01       	movw	r20, r24
    21b8:	68 85       	ldd	r22, Y+8	; 0x08
    21ba:	79 85       	ldd	r23, Y+9	; 0x09
    21bc:	8e 81       	ldd	r24, Y+6	; 0x06
    21be:	9f 81       	ldd	r25, Y+7	; 0x07
    21c0:	fc d1       	rcall	.+1016   	; 0x25ba <vfscanf>
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	08 95       	ret

000021c8 <__ultoa_invert>:
    21c8:	fa 01       	movw	r30, r20
    21ca:	aa 27       	eor	r26, r26
    21cc:	28 30       	cpi	r18, 0x08	; 8
    21ce:	51 f1       	breq	.+84     	; 0x2224 <__ultoa_invert+0x5c>
    21d0:	20 31       	cpi	r18, 0x10	; 16
    21d2:	81 f1       	breq	.+96     	; 0x2234 <__ultoa_invert+0x6c>
    21d4:	e8 94       	clt
    21d6:	6f 93       	push	r22
    21d8:	6e 7f       	andi	r22, 0xFE	; 254
    21da:	6e 5f       	subi	r22, 0xFE	; 254
    21dc:	7f 4f       	sbci	r23, 0xFF	; 255
    21de:	8f 4f       	sbci	r24, 0xFF	; 255
    21e0:	9f 4f       	sbci	r25, 0xFF	; 255
    21e2:	af 4f       	sbci	r26, 0xFF	; 255
    21e4:	b1 e0       	ldi	r27, 0x01	; 1
    21e6:	3e d0       	rcall	.+124    	; 0x2264 <__ultoa_invert+0x9c>
    21e8:	b4 e0       	ldi	r27, 0x04	; 4
    21ea:	3c d0       	rcall	.+120    	; 0x2264 <__ultoa_invert+0x9c>
    21ec:	67 0f       	add	r22, r23
    21ee:	78 1f       	adc	r23, r24
    21f0:	89 1f       	adc	r24, r25
    21f2:	9a 1f       	adc	r25, r26
    21f4:	a1 1d       	adc	r26, r1
    21f6:	68 0f       	add	r22, r24
    21f8:	79 1f       	adc	r23, r25
    21fa:	8a 1f       	adc	r24, r26
    21fc:	91 1d       	adc	r25, r1
    21fe:	a1 1d       	adc	r26, r1
    2200:	6a 0f       	add	r22, r26
    2202:	71 1d       	adc	r23, r1
    2204:	81 1d       	adc	r24, r1
    2206:	91 1d       	adc	r25, r1
    2208:	a1 1d       	adc	r26, r1
    220a:	20 d0       	rcall	.+64     	; 0x224c <__ultoa_invert+0x84>
    220c:	09 f4       	brne	.+2      	; 0x2210 <__ultoa_invert+0x48>
    220e:	68 94       	set
    2210:	3f 91       	pop	r19
    2212:	2a e0       	ldi	r18, 0x0A	; 10
    2214:	26 9f       	mul	r18, r22
    2216:	11 24       	eor	r1, r1
    2218:	30 19       	sub	r19, r0
    221a:	30 5d       	subi	r19, 0xD0	; 208
    221c:	31 93       	st	Z+, r19
    221e:	de f6       	brtc	.-74     	; 0x21d6 <__ultoa_invert+0xe>
    2220:	cf 01       	movw	r24, r30
    2222:	08 95       	ret
    2224:	46 2f       	mov	r20, r22
    2226:	47 70       	andi	r20, 0x07	; 7
    2228:	40 5d       	subi	r20, 0xD0	; 208
    222a:	41 93       	st	Z+, r20
    222c:	b3 e0       	ldi	r27, 0x03	; 3
    222e:	0f d0       	rcall	.+30     	; 0x224e <__ultoa_invert+0x86>
    2230:	c9 f7       	brne	.-14     	; 0x2224 <__ultoa_invert+0x5c>
    2232:	f6 cf       	rjmp	.-20     	; 0x2220 <__ultoa_invert+0x58>
    2234:	46 2f       	mov	r20, r22
    2236:	4f 70       	andi	r20, 0x0F	; 15
    2238:	40 5d       	subi	r20, 0xD0	; 208
    223a:	4a 33       	cpi	r20, 0x3A	; 58
    223c:	18 f0       	brcs	.+6      	; 0x2244 <__ultoa_invert+0x7c>
    223e:	49 5d       	subi	r20, 0xD9	; 217
    2240:	31 fd       	sbrc	r19, 1
    2242:	40 52       	subi	r20, 0x20	; 32
    2244:	41 93       	st	Z+, r20
    2246:	02 d0       	rcall	.+4      	; 0x224c <__ultoa_invert+0x84>
    2248:	a9 f7       	brne	.-22     	; 0x2234 <__ultoa_invert+0x6c>
    224a:	ea cf       	rjmp	.-44     	; 0x2220 <__ultoa_invert+0x58>
    224c:	b4 e0       	ldi	r27, 0x04	; 4
    224e:	a6 95       	lsr	r26
    2250:	97 95       	ror	r25
    2252:	87 95       	ror	r24
    2254:	77 95       	ror	r23
    2256:	67 95       	ror	r22
    2258:	ba 95       	dec	r27
    225a:	c9 f7       	brne	.-14     	; 0x224e <__ultoa_invert+0x86>
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	61 05       	cpc	r22, r1
    2260:	71 05       	cpc	r23, r1
    2262:	08 95       	ret
    2264:	9b 01       	movw	r18, r22
    2266:	ac 01       	movw	r20, r24
    2268:	0a 2e       	mov	r0, r26
    226a:	06 94       	lsr	r0
    226c:	57 95       	ror	r21
    226e:	47 95       	ror	r20
    2270:	37 95       	ror	r19
    2272:	27 95       	ror	r18
    2274:	ba 95       	dec	r27
    2276:	c9 f7       	brne	.-14     	; 0x226a <__ultoa_invert+0xa2>
    2278:	62 0f       	add	r22, r18
    227a:	73 1f       	adc	r23, r19
    227c:	84 1f       	adc	r24, r20
    227e:	95 1f       	adc	r25, r21
    2280:	a0 1d       	adc	r26, r0
    2282:	08 95       	ret

00002284 <putval>:
    2284:	20 fd       	sbrc	r18, 0
    2286:	09 c0       	rjmp	.+18     	; 0x229a <putval+0x16>
    2288:	fc 01       	movw	r30, r24
    228a:	23 fd       	sbrc	r18, 3
    228c:	05 c0       	rjmp	.+10     	; 0x2298 <putval+0x14>
    228e:	22 ff       	sbrs	r18, 2
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <putval+0x12>
    2292:	73 83       	std	Z+3, r23	; 0x03
    2294:	62 83       	std	Z+2, r22	; 0x02
    2296:	51 83       	std	Z+1, r21	; 0x01
    2298:	40 83       	st	Z, r20
    229a:	08 95       	ret

0000229c <mulacc>:
    229c:	cf 92       	push	r12
    229e:	df 92       	push	r13
    22a0:	ef 92       	push	r14
    22a2:	ff 92       	push	r15
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	44 fd       	sbrc	r20, 4
    22aa:	10 c0       	rjmp	.+32     	; 0x22cc <mulacc+0x30>
    22ac:	46 fd       	sbrc	r20, 6
    22ae:	10 c0       	rjmp	.+32     	; 0x22d0 <mulacc+0x34>
    22b0:	db 01       	movw	r26, r22
    22b2:	fc 01       	movw	r30, r24
    22b4:	aa 0f       	add	r26, r26
    22b6:	bb 1f       	adc	r27, r27
    22b8:	ee 1f       	adc	r30, r30
    22ba:	ff 1f       	adc	r31, r31
    22bc:	10 94       	com	r1
    22be:	d1 f7       	brne	.-12     	; 0x22b4 <mulacc+0x18>
    22c0:	6a 0f       	add	r22, r26
    22c2:	7b 1f       	adc	r23, r27
    22c4:	8e 1f       	adc	r24, r30
    22c6:	9f 1f       	adc	r25, r31
    22c8:	31 e0       	ldi	r19, 0x01	; 1
    22ca:	03 c0       	rjmp	.+6      	; 0x22d2 <mulacc+0x36>
    22cc:	33 e0       	ldi	r19, 0x03	; 3
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <mulacc+0x36>
    22d0:	34 e0       	ldi	r19, 0x04	; 4
    22d2:	66 0f       	add	r22, r22
    22d4:	77 1f       	adc	r23, r23
    22d6:	88 1f       	adc	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	31 50       	subi	r19, 0x01	; 1
    22dc:	d1 f7       	brne	.-12     	; 0x22d2 <mulacc+0x36>
    22de:	6b 01       	movw	r12, r22
    22e0:	7c 01       	movw	r14, r24
    22e2:	c2 0e       	add	r12, r18
    22e4:	d1 1c       	adc	r13, r1
    22e6:	e1 1c       	adc	r14, r1
    22e8:	f1 1c       	adc	r15, r1
    22ea:	97 01       	movw	r18, r14
    22ec:	86 01       	movw	r16, r12
    22ee:	b6 01       	movw	r22, r12
    22f0:	c9 01       	movw	r24, r18
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	08 95       	ret

00002300 <skip_spaces>:
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	8c 01       	movw	r16, r24
    230a:	c8 01       	movw	r24, r16
    230c:	89 d2       	rcall	.+1298   	; 0x2820 <fgetc>
    230e:	ec 01       	movw	r28, r24
    2310:	97 fd       	sbrc	r25, 7
    2312:	06 c0       	rjmp	.+12     	; 0x2320 <skip_spaces+0x20>
    2314:	72 d2       	rcall	.+1252   	; 0x27fa <isspace>
    2316:	89 2b       	or	r24, r25
    2318:	c1 f7       	brne	.-16     	; 0x230a <skip_spaces+0xa>
    231a:	b8 01       	movw	r22, r16
    231c:	ce 01       	movw	r24, r28
    231e:	c0 d2       	rcall	.+1408   	; 0x28a0 <ungetc>
    2320:	ce 01       	movw	r24, r28
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	08 95       	ret

0000232c <conv_int>:
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
    2330:	af 92       	push	r10
    2332:	cf 92       	push	r12
    2334:	df 92       	push	r13
    2336:	ef 92       	push	r14
    2338:	ff 92       	push	r15
    233a:	0f 93       	push	r16
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	ec 01       	movw	r28, r24
    2344:	a6 2e       	mov	r10, r22
    2346:	4a 01       	movw	r8, r20
    2348:	02 2f       	mov	r16, r18
    234a:	6a d2       	rcall	.+1236   	; 0x2820 <fgetc>
    234c:	ac 01       	movw	r20, r24
    234e:	55 27       	eor	r21, r21
    2350:	4b 32       	cpi	r20, 0x2B	; 43
    2352:	51 05       	cpc	r21, r1
    2354:	21 f0       	breq	.+8      	; 0x235e <conv_int+0x32>
    2356:	4d 32       	cpi	r20, 0x2D	; 45
    2358:	51 05       	cpc	r21, r1
    235a:	49 f4       	brne	.+18     	; 0x236e <conv_int+0x42>
    235c:	00 68       	ori	r16, 0x80	; 128
    235e:	aa 94       	dec	r10
    2360:	11 f4       	brne	.+4      	; 0x2366 <conv_int+0x3a>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	5c c0       	rjmp	.+184    	; 0x241e <conv_int+0xf2>
    2366:	ce 01       	movw	r24, r28
    2368:	5b d2       	rcall	.+1206   	; 0x2820 <fgetc>
    236a:	97 fd       	sbrc	r25, 7
    236c:	fa cf       	rjmp	.-12     	; 0x2362 <conv_int+0x36>
    236e:	10 2f       	mov	r17, r16
    2370:	1d 7f       	andi	r17, 0xFD	; 253
    2372:	30 2f       	mov	r19, r16
    2374:	30 73       	andi	r19, 0x30	; 48
    2376:	d1 f4       	brne	.+52     	; 0x23ac <conv_int+0x80>
    2378:	80 33       	cpi	r24, 0x30	; 48
    237a:	c1 f4       	brne	.+48     	; 0x23ac <conv_int+0x80>
    237c:	aa 94       	dec	r10
    237e:	09 f4       	brne	.+2      	; 0x2382 <conv_int+0x56>
    2380:	3b c0       	rjmp	.+118    	; 0x23f8 <conv_int+0xcc>
    2382:	ce 01       	movw	r24, r28
    2384:	4d d2       	rcall	.+1178   	; 0x2820 <fgetc>
    2386:	97 fd       	sbrc	r25, 7
    2388:	37 c0       	rjmp	.+110    	; 0x23f8 <conv_int+0xcc>
    238a:	88 37       	cpi	r24, 0x78	; 120
    238c:	11 f0       	breq	.+4      	; 0x2392 <conv_int+0x66>
    238e:	88 35       	cpi	r24, 0x58	; 88
    2390:	41 f4       	brne	.+16     	; 0x23a2 <conv_int+0x76>
    2392:	12 64       	ori	r17, 0x42	; 66
    2394:	aa 94       	dec	r10
    2396:	81 f1       	breq	.+96     	; 0x23f8 <conv_int+0xcc>
    2398:	ce 01       	movw	r24, r28
    239a:	42 d2       	rcall	.+1156   	; 0x2820 <fgetc>
    239c:	97 ff       	sbrs	r25, 7
    239e:	06 c0       	rjmp	.+12     	; 0x23ac <conv_int+0x80>
    23a0:	2b c0       	rjmp	.+86     	; 0x23f8 <conv_int+0xcc>
    23a2:	06 ff       	sbrs	r16, 6
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <conv_int+0x7e>
    23a6:	12 60       	ori	r17, 0x02	; 2
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <conv_int+0x80>
    23aa:	12 61       	ori	r17, 0x12	; 18
    23ac:	c1 2c       	mov	r12, r1
    23ae:	d1 2c       	mov	r13, r1
    23b0:	76 01       	movw	r14, r12
    23b2:	28 2f       	mov	r18, r24
    23b4:	20 53       	subi	r18, 0x30	; 48
    23b6:	28 30       	cpi	r18, 0x08	; 8
    23b8:	78 f0       	brcs	.+30     	; 0x23d8 <conv_int+0xac>
    23ba:	14 ff       	sbrs	r17, 4
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <conv_int+0x98>
    23be:	be 01       	movw	r22, r28
    23c0:	6f d2       	rcall	.+1246   	; 0x28a0 <ungetc>
    23c2:	17 c0       	rjmp	.+46     	; 0x23f2 <conv_int+0xc6>
    23c4:	2a 30       	cpi	r18, 0x0A	; 10
    23c6:	40 f0       	brcs	.+16     	; 0x23d8 <conv_int+0xac>
    23c8:	16 ff       	sbrs	r17, 6
    23ca:	f9 cf       	rjmp	.-14     	; 0x23be <conv_int+0x92>
    23cc:	2f 7d       	andi	r18, 0xDF	; 223
    23ce:	32 2f       	mov	r19, r18
    23d0:	31 51       	subi	r19, 0x11	; 17
    23d2:	36 30       	cpi	r19, 0x06	; 6
    23d4:	a0 f7       	brcc	.-24     	; 0x23be <conv_int+0x92>
    23d6:	27 50       	subi	r18, 0x07	; 7
    23d8:	41 2f       	mov	r20, r17
    23da:	c7 01       	movw	r24, r14
    23dc:	b6 01       	movw	r22, r12
    23de:	5e df       	rcall	.-324    	; 0x229c <mulacc>
    23e0:	6b 01       	movw	r12, r22
    23e2:	7c 01       	movw	r14, r24
    23e4:	12 60       	ori	r17, 0x02	; 2
    23e6:	aa 94       	dec	r10
    23e8:	51 f0       	breq	.+20     	; 0x23fe <conv_int+0xd2>
    23ea:	ce 01       	movw	r24, r28
    23ec:	19 d2       	rcall	.+1074   	; 0x2820 <fgetc>
    23ee:	97 ff       	sbrs	r25, 7
    23f0:	e0 cf       	rjmp	.-64     	; 0x23b2 <conv_int+0x86>
    23f2:	11 fd       	sbrc	r17, 1
    23f4:	04 c0       	rjmp	.+8      	; 0x23fe <conv_int+0xd2>
    23f6:	b5 cf       	rjmp	.-150    	; 0x2362 <conv_int+0x36>
    23f8:	c1 2c       	mov	r12, r1
    23fa:	d1 2c       	mov	r13, r1
    23fc:	76 01       	movw	r14, r12
    23fe:	17 ff       	sbrs	r17, 7
    2400:	08 c0       	rjmp	.+16     	; 0x2412 <conv_int+0xe6>
    2402:	f0 94       	com	r15
    2404:	e0 94       	com	r14
    2406:	d0 94       	com	r13
    2408:	c0 94       	com	r12
    240a:	c1 1c       	adc	r12, r1
    240c:	d1 1c       	adc	r13, r1
    240e:	e1 1c       	adc	r14, r1
    2410:	f1 1c       	adc	r15, r1
    2412:	21 2f       	mov	r18, r17
    2414:	b7 01       	movw	r22, r14
    2416:	a6 01       	movw	r20, r12
    2418:	c4 01       	movw	r24, r8
    241a:	34 df       	rcall	.-408    	; 0x2284 <putval>
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	af 90       	pop	r10
    2430:	9f 90       	pop	r9
    2432:	8f 90       	pop	r8
    2434:	08 95       	ret

00002436 <conv_brk>:
    2436:	6f 92       	push	r6
    2438:	7f 92       	push	r7
    243a:	9f 92       	push	r9
    243c:	af 92       	push	r10
    243e:	bf 92       	push	r11
    2440:	cf 92       	push	r12
    2442:	df 92       	push	r13
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	a1 97       	sbiw	r28, 0x21	; 33
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	6c 01       	movw	r12, r24
    245c:	7a 01       	movw	r14, r20
    245e:	89 01       	movw	r16, r18
    2460:	fe 01       	movw	r30, r28
    2462:	31 96       	adiw	r30, 0x01	; 1
    2464:	80 e2       	ldi	r24, 0x20	; 32
    2466:	df 01       	movw	r26, r30
    2468:	1d 92       	st	X+, r1
    246a:	8a 95       	dec	r24
    246c:	e9 f7       	brne	.-6      	; 0x2468 <conv_brk+0x32>
    246e:	d6 01       	movw	r26, r12
    2470:	13 96       	adiw	r26, 0x03	; 3
    2472:	9c 90       	ld	r9, X
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	a1 2c       	mov	r10, r1
    247a:	a0 e0       	ldi	r26, 0x00	; 0
    247c:	b1 2c       	mov	r11, r1
    247e:	cf 01       	movw	r24, r30
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	f8 01       	movw	r30, r16
    2486:	93 fc       	sbrc	r9, 3
    2488:	75 91       	lpm	r23, Z+
    248a:	93 fe       	sbrs	r9, 3
    248c:	71 91       	ld	r23, Z+
    248e:	8f 01       	movw	r16, r30
    2490:	71 11       	cpse	r23, r1
    2492:	03 c0       	rjmp	.+6      	; 0x249a <conv_brk+0x64>
    2494:	00 e0       	ldi	r16, 0x00	; 0
    2496:	10 e0       	ldi	r17, 0x00	; 0
    2498:	7e c0       	rjmp	.+252    	; 0x2596 <conv_brk+0x160>
    249a:	7e 35       	cpi	r23, 0x5E	; 94
    249c:	19 f4       	brne	.+6      	; 0x24a4 <conv_brk+0x6e>
    249e:	21 15       	cp	r18, r1
    24a0:	31 05       	cpc	r19, r1
    24a2:	59 f1       	breq	.+86     	; 0x24fa <conv_brk+0xc4>
    24a4:	eb 2d       	mov	r30, r11
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	e2 17       	cp	r30, r18
    24aa:	f3 07       	cpc	r31, r19
    24ac:	3c f4       	brge	.+14     	; 0x24bc <conv_brk+0x86>
    24ae:	7d 35       	cpi	r23, 0x5D	; 93
    24b0:	69 f1       	breq	.+90     	; 0x250c <conv_brk+0xd6>
    24b2:	7d 32       	cpi	r23, 0x2D	; 45
    24b4:	19 f4       	brne	.+6      	; 0x24bc <conv_brk+0x86>
    24b6:	aa 23       	and	r26, r26
    24b8:	19 f1       	breq	.+70     	; 0x2500 <conv_brk+0xca>
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <conv_brk+0x8c>
    24bc:	a1 11       	cpse	r26, r1
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <conv_brk+0x8c>
    24c0:	a7 2e       	mov	r10, r23
    24c2:	e7 2f       	mov	r30, r23
    24c4:	e6 95       	lsr	r30
    24c6:	e6 95       	lsr	r30
    24c8:	e6 95       	lsr	r30
    24ca:	3c 01       	movw	r6, r24
    24cc:	6e 0e       	add	r6, r30
    24ce:	71 1c       	adc	r7, r1
    24d0:	f3 01       	movw	r30, r6
    24d2:	a7 2f       	mov	r26, r23
    24d4:	a7 70       	andi	r26, 0x07	; 7
    24d6:	3a 01       	movw	r6, r20
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <conv_brk+0xa8>
    24da:	66 0c       	add	r6, r6
    24dc:	77 1c       	adc	r7, r7
    24de:	aa 95       	dec	r26
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <conv_brk+0xa4>
    24e2:	d3 01       	movw	r26, r6
    24e4:	b0 81       	ld	r27, Z
    24e6:	ba 2b       	or	r27, r26
    24e8:	b0 83       	st	Z, r27
    24ea:	7a 15       	cp	r23, r10
    24ec:	59 f0       	breq	.+22     	; 0x2504 <conv_brk+0xce>
    24ee:	7a 15       	cp	r23, r10
    24f0:	10 f4       	brcc	.+4      	; 0x24f6 <conv_brk+0xc0>
    24f2:	7f 5f       	subi	r23, 0xFF	; 255
    24f4:	e6 cf       	rjmp	.-52     	; 0x24c2 <conv_brk+0x8c>
    24f6:	71 50       	subi	r23, 0x01	; 1
    24f8:	e4 cf       	rjmp	.-56     	; 0x24c2 <conv_brk+0x8c>
    24fa:	bb 24       	eor	r11, r11
    24fc:	b3 94       	inc	r11
    24fe:	03 c0       	rjmp	.+6      	; 0x2506 <conv_brk+0xd0>
    2500:	a1 e0       	ldi	r26, 0x01	; 1
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <conv_brk+0xd0>
    2504:	a0 e0       	ldi	r26, 0x00	; 0
    2506:	2f 5f       	subi	r18, 0xFF	; 255
    2508:	3f 4f       	sbci	r19, 0xFF	; 255
    250a:	bc cf       	rjmp	.-136    	; 0x2484 <conv_brk+0x4e>
    250c:	aa 23       	and	r26, r26
    250e:	19 f0       	breq	.+6      	; 0x2516 <conv_brk+0xe0>
    2510:	8e 81       	ldd	r24, Y+6	; 0x06
    2512:	80 62       	ori	r24, 0x20	; 32
    2514:	8e 83       	std	Y+6, r24	; 0x06
    2516:	b1 10       	cpse	r11, r1
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <conv_brk+0xea>
    251a:	bb 24       	eor	r11, r11
    251c:	b3 94       	inc	r11
    251e:	0b c0       	rjmp	.+22     	; 0x2536 <conv_brk+0x100>
    2520:	fe 01       	movw	r30, r28
    2522:	31 96       	adiw	r30, 0x01	; 1
    2524:	ce 01       	movw	r24, r28
    2526:	81 96       	adiw	r24, 0x21	; 33
    2528:	20 81       	ld	r18, Z
    252a:	20 95       	com	r18
    252c:	21 93       	st	Z+, r18
    252e:	e8 17       	cp	r30, r24
    2530:	f9 07       	cpc	r31, r25
    2532:	d1 f7       	brne	.-12     	; 0x2528 <conv_brk+0xf2>
    2534:	f2 cf       	rjmp	.-28     	; 0x251a <conv_brk+0xe4>
    2536:	c6 01       	movw	r24, r12
    2538:	69 a3       	std	Y+33, r22	; 0x21
    253a:	72 d1       	rcall	.+740    	; 0x2820 <fgetc>
    253c:	69 a1       	ldd	r22, Y+33	; 0x21
    253e:	97 fd       	sbrc	r25, 7
    2540:	23 c0       	rjmp	.+70     	; 0x2588 <conv_brk+0x152>
    2542:	28 2f       	mov	r18, r24
    2544:	26 95       	lsr	r18
    2546:	26 95       	lsr	r18
    2548:	26 95       	lsr	r18
    254a:	e1 e0       	ldi	r30, 0x01	; 1
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	ec 0f       	add	r30, r28
    2550:	fd 1f       	adc	r31, r29
    2552:	e2 0f       	add	r30, r18
    2554:	f1 1d       	adc	r31, r1
    2556:	20 81       	ld	r18, Z
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	ac 01       	movw	r20, r24
    255c:	47 70       	andi	r20, 0x07	; 7
    255e:	55 27       	eor	r21, r21
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <conv_brk+0x130>
    2562:	35 95       	asr	r19
    2564:	27 95       	ror	r18
    2566:	4a 95       	dec	r20
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <conv_brk+0x12c>
    256a:	20 fd       	sbrc	r18, 0
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <conv_brk+0x13e>
    256e:	b6 01       	movw	r22, r12
    2570:	97 d1       	rcall	.+814    	; 0x28a0 <ungetc>
    2572:	0a c0       	rjmp	.+20     	; 0x2588 <conv_brk+0x152>
    2574:	e1 14       	cp	r14, r1
    2576:	f1 04       	cpc	r15, r1
    2578:	19 f0       	breq	.+6      	; 0x2580 <conv_brk+0x14a>
    257a:	d7 01       	movw	r26, r14
    257c:	8d 93       	st	X+, r24
    257e:	7d 01       	movw	r14, r26
    2580:	61 50       	subi	r22, 0x01	; 1
    2582:	b1 2c       	mov	r11, r1
    2584:	c1 f6       	brne	.-80     	; 0x2536 <conv_brk+0x100>
    2586:	02 c0       	rjmp	.+4      	; 0x258c <conv_brk+0x156>
    2588:	b1 10       	cpse	r11, r1
    258a:	84 cf       	rjmp	.-248    	; 0x2494 <conv_brk+0x5e>
    258c:	e1 14       	cp	r14, r1
    258e:	f1 04       	cpc	r15, r1
    2590:	11 f0       	breq	.+4      	; 0x2596 <conv_brk+0x160>
    2592:	f7 01       	movw	r30, r14
    2594:	10 82       	st	Z, r1
    2596:	c8 01       	movw	r24, r16
    2598:	a1 96       	adiw	r28, 0x21	; 33
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	1f 91       	pop	r17
    25a4:	0f 91       	pop	r16
    25a6:	ff 90       	pop	r15
    25a8:	ef 90       	pop	r14
    25aa:	df 90       	pop	r13
    25ac:	cf 90       	pop	r12
    25ae:	bf 90       	pop	r11
    25b0:	af 90       	pop	r10
    25b2:	9f 90       	pop	r9
    25b4:	7f 90       	pop	r7
    25b6:	6f 90       	pop	r6
    25b8:	08 95       	ret

000025ba <vfscanf>:
    25ba:	4f 92       	push	r4
    25bc:	5f 92       	push	r5
    25be:	7f 92       	push	r7
    25c0:	8f 92       	push	r8
    25c2:	9f 92       	push	r9
    25c4:	af 92       	push	r10
    25c6:	bf 92       	push	r11
    25c8:	cf 92       	push	r12
    25ca:	df 92       	push	r13
    25cc:	ef 92       	push	r14
    25ce:	ff 92       	push	r15
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	1f 92       	push	r1
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	8c 01       	movw	r16, r24
    25e0:	2b 01       	movw	r4, r22
    25e2:	7a 01       	movw	r14, r20
    25e4:	fc 01       	movw	r30, r24
    25e6:	16 82       	std	Z+6, r1	; 0x06
    25e8:	17 82       	std	Z+7, r1	; 0x07
    25ea:	a1 2c       	mov	r10, r1
    25ec:	e2 c0       	rjmp	.+452    	; 0x27b2 <vfscanf+0x1f8>
    25ee:	8c 2d       	mov	r24, r12
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	03 d1       	rcall	.+518    	; 0x27fa <isspace>
    25f4:	89 2b       	or	r24, r25
    25f6:	19 f0       	breq	.+6      	; 0x25fe <vfscanf+0x44>
    25f8:	c8 01       	movw	r24, r16
    25fa:	82 de       	rcall	.-764    	; 0x2300 <skip_spaces>
    25fc:	da c0       	rjmp	.+436    	; 0x27b2 <vfscanf+0x1f8>
    25fe:	f5 e2       	ldi	r31, 0x25	; 37
    2600:	cf 12       	cpse	r12, r31
    2602:	0a c0       	rjmp	.+20     	; 0x2618 <vfscanf+0x5e>
    2604:	f2 01       	movw	r30, r4
    2606:	d3 fc       	sbrc	r13, 3
    2608:	35 91       	lpm	r19, Z+
    260a:	d3 fe       	sbrs	r13, 3
    260c:	31 91       	ld	r19, Z+
    260e:	2f 01       	movw	r4, r30
    2610:	35 32       	cpi	r19, 0x25	; 37
    2612:	61 f4       	brne	.+24     	; 0x262c <vfscanf+0x72>
    2614:	55 e2       	ldi	r21, 0x25	; 37
    2616:	c5 2e       	mov	r12, r21
    2618:	c8 01       	movw	r24, r16
    261a:	02 d1       	rcall	.+516    	; 0x2820 <fgetc>
    261c:	97 fd       	sbrc	r25, 7
    261e:	d4 c0       	rjmp	.+424    	; 0x27c8 <vfscanf+0x20e>
    2620:	c8 16       	cp	r12, r24
    2622:	09 f4       	brne	.+2      	; 0x2626 <vfscanf+0x6c>
    2624:	c6 c0       	rjmp	.+396    	; 0x27b2 <vfscanf+0x1f8>
    2626:	b8 01       	movw	r22, r16
    2628:	3b d1       	rcall	.+630    	; 0x28a0 <ungetc>
    262a:	d0 c0       	rjmp	.+416    	; 0x27cc <vfscanf+0x212>
    262c:	3a 32       	cpi	r19, 0x2A	; 42
    262e:	41 f4       	brne	.+16     	; 0x2640 <vfscanf+0x86>
    2630:	d3 fc       	sbrc	r13, 3
    2632:	35 91       	lpm	r19, Z+
    2634:	d3 fe       	sbrs	r13, 3
    2636:	31 91       	ld	r19, Z+
    2638:	2f 01       	movw	r4, r30
    263a:	bb 24       	eor	r11, r11
    263c:	b3 94       	inc	r11
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <vfscanf+0x88>
    2640:	b1 2c       	mov	r11, r1
    2642:	71 2c       	mov	r7, r1
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <vfscanf+0xaa>
    2646:	f2 e0       	ldi	r31, 0x02	; 2
    2648:	bf 2a       	or	r11, r31
    264a:	67 2d       	mov	r22, r7
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	23 de       	rcall	.-954    	; 0x229c <mulacc>
    2656:	76 2e       	mov	r7, r22
    2658:	f2 01       	movw	r30, r4
    265a:	d3 fc       	sbrc	r13, 3
    265c:	35 91       	lpm	r19, Z+
    265e:	d3 fe       	sbrs	r13, 3
    2660:	31 91       	ld	r19, Z+
    2662:	2f 01       	movw	r4, r30
    2664:	23 2f       	mov	r18, r19
    2666:	20 53       	subi	r18, 0x30	; 48
    2668:	2a 30       	cpi	r18, 0x0A	; 10
    266a:	68 f3       	brcs	.-38     	; 0x2646 <vfscanf+0x8c>
    266c:	b1 fe       	sbrs	r11, 1
    266e:	03 c0       	rjmp	.+6      	; 0x2676 <vfscanf+0xbc>
    2670:	71 10       	cpse	r7, r1
    2672:	03 c0       	rjmp	.+6      	; 0x267a <vfscanf+0xc0>
    2674:	ab c0       	rjmp	.+342    	; 0x27cc <vfscanf+0x212>
    2676:	77 24       	eor	r7, r7
    2678:	7a 94       	dec	r7
    267a:	38 36       	cpi	r19, 0x68	; 104
    267c:	19 f0       	breq	.+6      	; 0x2684 <vfscanf+0xca>
    267e:	3c 36       	cpi	r19, 0x6C	; 108
    2680:	99 f4       	brne	.+38     	; 0x26a8 <vfscanf+0xee>
    2682:	0a c0       	rjmp	.+20     	; 0x2698 <vfscanf+0xde>
    2684:	f2 01       	movw	r30, r4
    2686:	d3 fc       	sbrc	r13, 3
    2688:	35 91       	lpm	r19, Z+
    268a:	d3 fe       	sbrs	r13, 3
    268c:	31 91       	ld	r19, Z+
    268e:	2f 01       	movw	r4, r30
    2690:	38 36       	cpi	r19, 0x68	; 104
    2692:	51 f4       	brne	.+20     	; 0x26a8 <vfscanf+0xee>
    2694:	f8 e0       	ldi	r31, 0x08	; 8
    2696:	bf 2a       	or	r11, r31
    2698:	84 e0       	ldi	r24, 0x04	; 4
    269a:	b8 2a       	or	r11, r24
    269c:	f2 01       	movw	r30, r4
    269e:	d3 fc       	sbrc	r13, 3
    26a0:	35 91       	lpm	r19, Z+
    26a2:	d3 fe       	sbrs	r13, 3
    26a4:	31 91       	ld	r19, Z+
    26a6:	2f 01       	movw	r4, r30
    26a8:	33 23       	and	r19, r19
    26aa:	09 f4       	brne	.+2      	; 0x26ae <vfscanf+0xf4>
    26ac:	8f c0       	rjmp	.+286    	; 0x27cc <vfscanf+0x212>
    26ae:	63 2f       	mov	r22, r19
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	8e ef       	ldi	r24, 0xFE	; 254
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	39 83       	std	Y+1, r19	; 0x01
    26b8:	a8 d0       	rcall	.+336    	; 0x280a <strchr_P>
    26ba:	39 81       	ldd	r19, Y+1	; 0x01
    26bc:	89 2b       	or	r24, r25
    26be:	09 f4       	brne	.+2      	; 0x26c2 <vfscanf+0x108>
    26c0:	85 c0       	rjmp	.+266    	; 0x27cc <vfscanf+0x212>
    26c2:	b0 fc       	sbrc	r11, 0
    26c4:	07 c0       	rjmp	.+14     	; 0x26d4 <vfscanf+0x11a>
    26c6:	f7 01       	movw	r30, r14
    26c8:	c0 80       	ld	r12, Z
    26ca:	d1 80       	ldd	r13, Z+1	; 0x01
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	e8 0e       	add	r14, r24
    26d0:	f1 1c       	adc	r15, r1
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <vfscanf+0x11e>
    26d4:	c1 2c       	mov	r12, r1
    26d6:	d1 2c       	mov	r13, r1
    26d8:	3e 36       	cpi	r19, 0x6E	; 110
    26da:	49 f4       	brne	.+18     	; 0x26ee <vfscanf+0x134>
    26dc:	f8 01       	movw	r30, r16
    26de:	46 81       	ldd	r20, Z+6	; 0x06
    26e0:	57 81       	ldd	r21, Z+7	; 0x07
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	2b 2d       	mov	r18, r11
    26e8:	c6 01       	movw	r24, r12
    26ea:	cc dd       	rcall	.-1128   	; 0x2284 <putval>
    26ec:	62 c0       	rjmp	.+196    	; 0x27b2 <vfscanf+0x1f8>
    26ee:	33 36       	cpi	r19, 0x63	; 99
    26f0:	89 f4       	brne	.+34     	; 0x2714 <vfscanf+0x15a>
    26f2:	b1 fc       	sbrc	r11, 1
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <vfscanf+0x140>
    26f6:	77 24       	eor	r7, r7
    26f8:	73 94       	inc	r7
    26fa:	c8 01       	movw	r24, r16
    26fc:	91 d0       	rcall	.+290    	; 0x2820 <fgetc>
    26fe:	97 fd       	sbrc	r25, 7
    2700:	63 c0       	rjmp	.+198    	; 0x27c8 <vfscanf+0x20e>
    2702:	c1 14       	cp	r12, r1
    2704:	d1 04       	cpc	r13, r1
    2706:	19 f0       	breq	.+6      	; 0x270e <vfscanf+0x154>
    2708:	f6 01       	movw	r30, r12
    270a:	81 93       	st	Z+, r24
    270c:	6f 01       	movw	r12, r30
    270e:	7a 94       	dec	r7
    2710:	a1 f7       	brne	.-24     	; 0x26fa <vfscanf+0x140>
    2712:	4d c0       	rjmp	.+154    	; 0x27ae <vfscanf+0x1f4>
    2714:	3b 35       	cpi	r19, 0x5B	; 91
    2716:	51 f4       	brne	.+20     	; 0x272c <vfscanf+0x172>
    2718:	92 01       	movw	r18, r4
    271a:	a6 01       	movw	r20, r12
    271c:	67 2d       	mov	r22, r7
    271e:	c8 01       	movw	r24, r16
    2720:	8a de       	rcall	.-748    	; 0x2436 <conv_brk>
    2722:	2c 01       	movw	r4, r24
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	09 f0       	breq	.+2      	; 0x272a <vfscanf+0x170>
    2728:	42 c0       	rjmp	.+132    	; 0x27ae <vfscanf+0x1f4>
    272a:	3c c0       	rjmp	.+120    	; 0x27a4 <vfscanf+0x1ea>
    272c:	c8 01       	movw	r24, r16
    272e:	39 83       	std	Y+1, r19	; 0x01
    2730:	e7 dd       	rcall	.-1074   	; 0x2300 <skip_spaces>
    2732:	39 81       	ldd	r19, Y+1	; 0x01
    2734:	97 fd       	sbrc	r25, 7
    2736:	48 c0       	rjmp	.+144    	; 0x27c8 <vfscanf+0x20e>
    2738:	3f 36       	cpi	r19, 0x6F	; 111
    273a:	41 f1       	breq	.+80     	; 0x278c <vfscanf+0x1d2>
    273c:	28 f4       	brcc	.+10     	; 0x2748 <vfscanf+0x18e>
    273e:	34 36       	cpi	r19, 0x64	; 100
    2740:	11 f1       	breq	.+68     	; 0x2786 <vfscanf+0x1cc>
    2742:	39 36       	cpi	r19, 0x69	; 105
    2744:	31 f5       	brne	.+76     	; 0x2792 <vfscanf+0x1d8>
    2746:	27 c0       	rjmp	.+78     	; 0x2796 <vfscanf+0x1dc>
    2748:	33 37       	cpi	r19, 0x73	; 115
    274a:	19 f0       	breq	.+6      	; 0x2752 <vfscanf+0x198>
    274c:	35 37       	cpi	r19, 0x75	; 117
    274e:	09 f5       	brne	.+66     	; 0x2792 <vfscanf+0x1d8>
    2750:	1a c0       	rjmp	.+52     	; 0x2786 <vfscanf+0x1cc>
    2752:	c8 01       	movw	r24, r16
    2754:	65 d0       	rcall	.+202    	; 0x2820 <fgetc>
    2756:	4c 01       	movw	r8, r24
    2758:	97 fd       	sbrc	r25, 7
    275a:	0f c0       	rjmp	.+30     	; 0x277a <vfscanf+0x1c0>
    275c:	4e d0       	rcall	.+156    	; 0x27fa <isspace>
    275e:	89 2b       	or	r24, r25
    2760:	21 f0       	breq	.+8      	; 0x276a <vfscanf+0x1b0>
    2762:	b8 01       	movw	r22, r16
    2764:	c4 01       	movw	r24, r8
    2766:	9c d0       	rcall	.+312    	; 0x28a0 <ungetc>
    2768:	08 c0       	rjmp	.+16     	; 0x277a <vfscanf+0x1c0>
    276a:	c1 14       	cp	r12, r1
    276c:	d1 04       	cpc	r13, r1
    276e:	19 f0       	breq	.+6      	; 0x2776 <vfscanf+0x1bc>
    2770:	f6 01       	movw	r30, r12
    2772:	81 92       	st	Z+, r8
    2774:	6f 01       	movw	r12, r30
    2776:	7a 94       	dec	r7
    2778:	61 f7       	brne	.-40     	; 0x2752 <vfscanf+0x198>
    277a:	c1 14       	cp	r12, r1
    277c:	d1 04       	cpc	r13, r1
    277e:	b9 f0       	breq	.+46     	; 0x27ae <vfscanf+0x1f4>
    2780:	f6 01       	movw	r30, r12
    2782:	10 82       	st	Z, r1
    2784:	14 c0       	rjmp	.+40     	; 0x27ae <vfscanf+0x1f4>
    2786:	f0 e2       	ldi	r31, 0x20	; 32
    2788:	bf 2a       	or	r11, r31
    278a:	05 c0       	rjmp	.+10     	; 0x2796 <vfscanf+0x1dc>
    278c:	80 e1       	ldi	r24, 0x10	; 16
    278e:	b8 2a       	or	r11, r24
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <vfscanf+0x1dc>
    2792:	90 e4       	ldi	r25, 0x40	; 64
    2794:	b9 2a       	or	r11, r25
    2796:	2b 2d       	mov	r18, r11
    2798:	a6 01       	movw	r20, r12
    279a:	67 2d       	mov	r22, r7
    279c:	c8 01       	movw	r24, r16
    279e:	c6 dd       	rcall	.-1140   	; 0x232c <conv_int>
    27a0:	81 11       	cpse	r24, r1
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <vfscanf+0x1f4>
    27a4:	f8 01       	movw	r30, r16
    27a6:	83 81       	ldd	r24, Z+3	; 0x03
    27a8:	80 73       	andi	r24, 0x30	; 48
    27aa:	71 f4       	brne	.+28     	; 0x27c8 <vfscanf+0x20e>
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <vfscanf+0x212>
    27ae:	b0 fe       	sbrs	r11, 0
    27b0:	a3 94       	inc	r10
    27b2:	f8 01       	movw	r30, r16
    27b4:	d3 80       	ldd	r13, Z+3	; 0x03
    27b6:	f2 01       	movw	r30, r4
    27b8:	d3 fc       	sbrc	r13, 3
    27ba:	c5 90       	lpm	r12, Z+
    27bc:	d3 fe       	sbrs	r13, 3
    27be:	c1 90       	ld	r12, Z+
    27c0:	2f 01       	movw	r4, r30
    27c2:	c1 10       	cpse	r12, r1
    27c4:	14 cf       	rjmp	.-472    	; 0x25ee <vfscanf+0x34>
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <vfscanf+0x212>
    27c8:	aa 20       	and	r10, r10
    27ca:	19 f0       	breq	.+6      	; 0x27d2 <vfscanf+0x218>
    27cc:	2a 2d       	mov	r18, r10
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <vfscanf+0x21c>
    27d2:	2f ef       	ldi	r18, 0xFF	; 255
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	c9 01       	movw	r24, r18
    27d8:	0f 90       	pop	r0
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	ff 90       	pop	r15
    27e4:	ef 90       	pop	r14
    27e6:	df 90       	pop	r13
    27e8:	cf 90       	pop	r12
    27ea:	bf 90       	pop	r11
    27ec:	af 90       	pop	r10
    27ee:	9f 90       	pop	r9
    27f0:	8f 90       	pop	r8
    27f2:	7f 90       	pop	r7
    27f4:	5f 90       	pop	r5
    27f6:	4f 90       	pop	r4
    27f8:	08 95       	ret

000027fa <isspace>:
    27fa:	91 11       	cpse	r25, r1
    27fc:	6c c0       	rjmp	.+216    	; 0x28d6 <__ctype_isfalse>
    27fe:	80 32       	cpi	r24, 0x20	; 32
    2800:	19 f0       	breq	.+6      	; 0x2808 <isspace+0xe>
    2802:	89 50       	subi	r24, 0x09	; 9
    2804:	85 50       	subi	r24, 0x05	; 5
    2806:	d0 f7       	brcc	.-12     	; 0x27fc <isspace+0x2>
    2808:	08 95       	ret

0000280a <strchr_P>:
    280a:	fc 01       	movw	r30, r24
    280c:	05 90       	lpm	r0, Z+
    280e:	06 16       	cp	r0, r22
    2810:	21 f0       	breq	.+8      	; 0x281a <strchr_P+0x10>
    2812:	00 20       	and	r0, r0
    2814:	d9 f7       	brne	.-10     	; 0x280c <strchr_P+0x2>
    2816:	c0 01       	movw	r24, r0
    2818:	08 95       	ret
    281a:	31 97       	sbiw	r30, 0x01	; 1
    281c:	cf 01       	movw	r24, r30
    281e:	08 95       	ret

00002820 <fgetc>:
    2820:	cf 93       	push	r28
    2822:	df 93       	push	r29
    2824:	ec 01       	movw	r28, r24
    2826:	3b 81       	ldd	r19, Y+3	; 0x03
    2828:	30 ff       	sbrs	r19, 0
    282a:	34 c0       	rjmp	.+104    	; 0x2894 <fgetc+0x74>
    282c:	36 ff       	sbrs	r19, 6
    282e:	0a c0       	rjmp	.+20     	; 0x2844 <fgetc+0x24>
    2830:	3f 7b       	andi	r19, 0xBF	; 191
    2832:	3b 83       	std	Y+3, r19	; 0x03
    2834:	8e 81       	ldd	r24, Y+6	; 0x06
    2836:	9f 81       	ldd	r25, Y+7	; 0x07
    2838:	01 96       	adiw	r24, 0x01	; 1
    283a:	8e 83       	std	Y+6, r24	; 0x06
    283c:	9f 83       	std	Y+7, r25	; 0x07
    283e:	2a 81       	ldd	r18, Y+2	; 0x02
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	2a c0       	rjmp	.+84     	; 0x2898 <fgetc+0x78>
    2844:	32 ff       	sbrs	r19, 2
    2846:	0f c0       	rjmp	.+30     	; 0x2866 <fgetc+0x46>
    2848:	e8 81       	ld	r30, Y
    284a:	f9 81       	ldd	r31, Y+1	; 0x01
    284c:	80 81       	ld	r24, Z
    284e:	99 27       	eor	r25, r25
    2850:	87 fd       	sbrc	r24, 7
    2852:	90 95       	com	r25
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	19 f4       	brne	.+6      	; 0x285e <fgetc+0x3e>
    2858:	30 62       	ori	r19, 0x20	; 32
    285a:	3b 83       	std	Y+3, r19	; 0x03
    285c:	1b c0       	rjmp	.+54     	; 0x2894 <fgetc+0x74>
    285e:	31 96       	adiw	r30, 0x01	; 1
    2860:	e8 83       	st	Y, r30
    2862:	f9 83       	std	Y+1, r31	; 0x01
    2864:	0e c0       	rjmp	.+28     	; 0x2882 <fgetc+0x62>
    2866:	ea 85       	ldd	r30, Y+10	; 0x0a
    2868:	fb 85       	ldd	r31, Y+11	; 0x0b
    286a:	19 95       	eicall
    286c:	97 ff       	sbrs	r25, 7
    286e:	09 c0       	rjmp	.+18     	; 0x2882 <fgetc+0x62>
    2870:	2b 81       	ldd	r18, Y+3	; 0x03
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	11 f4       	brne	.+4      	; 0x287a <fgetc+0x5a>
    2876:	80 e1       	ldi	r24, 0x10	; 16
    2878:	01 c0       	rjmp	.+2      	; 0x287c <fgetc+0x5c>
    287a:	80 e2       	ldi	r24, 0x20	; 32
    287c:	82 2b       	or	r24, r18
    287e:	8b 83       	std	Y+3, r24	; 0x03
    2880:	09 c0       	rjmp	.+18     	; 0x2894 <fgetc+0x74>
    2882:	2e 81       	ldd	r18, Y+6	; 0x06
    2884:	3f 81       	ldd	r19, Y+7	; 0x07
    2886:	2f 5f       	subi	r18, 0xFF	; 255
    2888:	3f 4f       	sbci	r19, 0xFF	; 255
    288a:	2e 83       	std	Y+6, r18	; 0x06
    288c:	3f 83       	std	Y+7, r19	; 0x07
    288e:	9c 01       	movw	r18, r24
    2890:	33 27       	eor	r19, r19
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <fgetc+0x78>
    2894:	2f ef       	ldi	r18, 0xFF	; 255
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	c9 01       	movw	r24, r18
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	08 95       	ret

000028a0 <ungetc>:
    28a0:	fb 01       	movw	r30, r22
    28a2:	23 81       	ldd	r18, Z+3	; 0x03
    28a4:	20 ff       	sbrs	r18, 0
    28a6:	13 c0       	rjmp	.+38     	; 0x28ce <ungetc+0x2e>
    28a8:	26 fd       	sbrc	r18, 6
    28aa:	11 c0       	rjmp	.+34     	; 0x28ce <ungetc+0x2e>
    28ac:	8f 3f       	cpi	r24, 0xFF	; 255
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	93 07       	cpc	r25, r19
    28b2:	69 f0       	breq	.+26     	; 0x28ce <ungetc+0x2e>
    28b4:	82 83       	std	Z+2, r24	; 0x02
    28b6:	2f 7d       	andi	r18, 0xDF	; 223
    28b8:	20 64       	ori	r18, 0x40	; 64
    28ba:	23 83       	std	Z+3, r18	; 0x03
    28bc:	26 81       	ldd	r18, Z+6	; 0x06
    28be:	37 81       	ldd	r19, Z+7	; 0x07
    28c0:	21 50       	subi	r18, 0x01	; 1
    28c2:	31 09       	sbc	r19, r1
    28c4:	26 83       	std	Z+6, r18	; 0x06
    28c6:	37 83       	std	Z+7, r19	; 0x07
    28c8:	9c 01       	movw	r18, r24
    28ca:	33 27       	eor	r19, r19
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <ungetc+0x32>
    28ce:	2f ef       	ldi	r18, 0xFF	; 255
    28d0:	3f ef       	ldi	r19, 0xFF	; 255
    28d2:	c9 01       	movw	r24, r18
    28d4:	08 95       	ret

000028d6 <__ctype_isfalse>:
    28d6:	99 27       	eor	r25, r25
    28d8:	88 27       	eor	r24, r24

000028da <__ctype_istrue>:
    28da:	08 95       	ret

000028dc <_exit>:
    28dc:	f8 94       	cli

000028de <__stop_program>:
    28de:	ff cf       	rjmp	.-2      	; 0x28de <__stop_program>
