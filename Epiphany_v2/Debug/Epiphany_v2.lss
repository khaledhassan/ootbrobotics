
Epiphany_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000408  00802000  00001b6e  00001c02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000239  00802408  00802408  0000200a  2**0
                  ALLOC
  3 .stab         000029a0  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008d0  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000527c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c0  00000000  00000000  000052ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005a5e  00000000  00000000  0000566b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014bc  00000000  00000000  0000b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000255d  00000000  00000000  0000c585  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000df4  00000000  00000000  0000eae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002337  00000000  00000000  0000f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000029e3  00000000  00000000  00011c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000308  00000000  00000000  000145f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a1 c1       	rjmp	.+834    	; 0x348 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c1       	rjmp	.+830    	; 0x348 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c1       	rjmp	.+826    	; 0x348 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c1       	rjmp	.+822    	; 0x348 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c1       	rjmp	.+818    	; 0x348 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c1       	rjmp	.+814    	; 0x348 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c1       	rjmp	.+810    	; 0x348 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c1       	rjmp	.+806    	; 0x348 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c1       	rjmp	.+802    	; 0x348 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c1       	rjmp	.+798    	; 0x348 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c1       	rjmp	.+794    	; 0x348 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c1       	rjmp	.+790    	; 0x348 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c1       	rjmp	.+786    	; 0x348 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c1       	rjmp	.+782    	; 0x348 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c1       	rjmp	.+778    	; 0x348 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c1       	rjmp	.+774    	; 0x348 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c1       	rjmp	.+770    	; 0x348 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c1       	rjmp	.+766    	; 0x348 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c1       	rjmp	.+762    	; 0x348 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c1       	rjmp	.+758    	; 0x348 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c1       	rjmp	.+754    	; 0x348 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c1       	rjmp	.+750    	; 0x348 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c1       	rjmp	.+746    	; 0x348 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c1       	rjmp	.+742    	; 0x348 <__bad_interrupt>
      62:	00 00       	nop
      64:	e5 c4       	rjmp	.+2506   	; 0xa30 <__vector_25>
      66:	00 00       	nop
      68:	5d c6       	rjmp	.+3258   	; 0xd24 <__vector_26>
      6a:	00 00       	nop
      6c:	6d c1       	rjmp	.+730    	; 0x348 <__bad_interrupt>
      6e:	00 00       	nop
      70:	15 c5       	rjmp	.+2602   	; 0xa9c <__vector_28>
      72:	00 00       	nop
      74:	a3 c6       	rjmp	.+3398   	; 0xdbc <__vector_29>
      76:	00 00       	nop
      78:	67 c1       	rjmp	.+718    	; 0x348 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c1       	rjmp	.+714    	; 0x348 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c1       	rjmp	.+710    	; 0x348 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c1       	rjmp	.+706    	; 0x348 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c1       	rjmp	.+702    	; 0x348 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c1       	rjmp	.+698    	; 0x348 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5b c1       	rjmp	.+694    	; 0x348 <__bad_interrupt>
      92:	00 00       	nop
      94:	59 c1       	rjmp	.+690    	; 0x348 <__bad_interrupt>
      96:	00 00       	nop
      98:	57 c1       	rjmp	.+686    	; 0x348 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6e c2       	rjmp	.+1244   	; 0x57a <__vector_39>
      9e:	00 00       	nop
      a0:	b2 c2       	rjmp	.+1380   	; 0x606 <__vector_40>
      a2:	00 00       	nop
      a4:	f6 c2       	rjmp	.+1516   	; 0x692 <__vector_41>
      a6:	00 00       	nop
      a8:	3a c3       	rjmp	.+1652   	; 0x71e <__vector_42>
      aa:	00 00       	nop
      ac:	d1 c3       	rjmp	.+1954   	; 0x850 <__vector_43>
      ae:	00 00       	nop
      b0:	4b c1       	rjmp	.+662    	; 0x348 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c1       	rjmp	.+658    	; 0x348 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c1       	rjmp	.+654    	; 0x348 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c1       	rjmp	.+650    	; 0x348 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c1       	rjmp	.+646    	; 0x348 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c1       	rjmp	.+642    	; 0x348 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c1       	rjmp	.+638    	; 0x348 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3d c1       	rjmp	.+634    	; 0x348 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3b c1       	rjmp	.+630    	; 0x348 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f6 c3       	rjmp	.+2028   	; 0x8c2 <__vector_53>
      d6:	00 00       	nop
      d8:	37 c1       	rjmp	.+622    	; 0x348 <__bad_interrupt>
      da:	00 00       	nop
      dc:	35 c1       	rjmp	.+618    	; 0x348 <__bad_interrupt>
      de:	00 00       	nop
      e0:	33 c1       	rjmp	.+614    	; 0x348 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	31 c1       	rjmp	.+610    	; 0x348 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2f c1       	rjmp	.+606    	; 0x348 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2d c1       	rjmp	.+602    	; 0x348 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2b c1       	rjmp	.+598    	; 0x348 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	75 c5       	rjmp	.+2794   	; 0xbe0 <__vector_61>
      f6:	00 00       	nop
      f8:	45 c7       	rjmp	.+3722   	; 0xf84 <__vector_62>
      fa:	00 00       	nop
      fc:	25 c1       	rjmp	.+586    	; 0x348 <__bad_interrupt>
      fe:	00 00       	nop
     100:	23 c1       	rjmp	.+582    	; 0x348 <__bad_interrupt>
     102:	00 00       	nop
     104:	21 c1       	rjmp	.+578    	; 0x348 <__bad_interrupt>
     106:	00 00       	nop
     108:	1f c1       	rjmp	.+574    	; 0x348 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1d c1       	rjmp	.+570    	; 0x348 <__bad_interrupt>
     10e:	00 00       	nop
     110:	1b c1       	rjmp	.+566    	; 0x348 <__bad_interrupt>
     112:	00 00       	nop
     114:	19 c1       	rjmp	.+562    	; 0x348 <__bad_interrupt>
     116:	00 00       	nop
     118:	17 c1       	rjmp	.+558    	; 0x348 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	16 c1       	rjmp	.+556    	; 0x34a <__vector_71>
     11e:	00 00       	nop
     120:	5a c1       	rjmp	.+692    	; 0x3d6 <__vector_72>
     122:	00 00       	nop
     124:	9e c1       	rjmp	.+828    	; 0x462 <__vector_73>
     126:	00 00       	nop
     128:	e2 c1       	rjmp	.+964    	; 0x4ee <__vector_74>
     12a:	00 00       	nop
     12c:	0d c1       	rjmp	.+538    	; 0x348 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0b c1       	rjmp	.+534    	; 0x348 <__bad_interrupt>
     132:	00 00       	nop
     134:	09 c1       	rjmp	.+530    	; 0x348 <__bad_interrupt>
     136:	00 00       	nop
     138:	07 c1       	rjmp	.+526    	; 0x348 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	05 c1       	rjmp	.+522    	; 0x348 <__bad_interrupt>
     13e:	00 00       	nop
     140:	03 c1       	rjmp	.+518    	; 0x348 <__bad_interrupt>
     142:	00 00       	nop
     144:	01 c1       	rjmp	.+514    	; 0x348 <__bad_interrupt>
     146:	00 00       	nop
     148:	ff c0       	rjmp	.+510    	; 0x348 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	fd c0       	rjmp	.+506    	; 0x348 <__bad_interrupt>
     14e:	00 00       	nop
     150:	fb c0       	rjmp	.+502    	; 0x348 <__bad_interrupt>
     152:	00 00       	nop
     154:	f9 c0       	rjmp	.+498    	; 0x348 <__bad_interrupt>
     156:	00 00       	nop
     158:	f7 c0       	rjmp	.+494    	; 0x348 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f5 c0       	rjmp	.+490    	; 0x348 <__bad_interrupt>
     15e:	00 00       	nop
     160:	d3 c4       	rjmp	.+2470   	; 0xb08 <__vector_88>
     162:	00 00       	nop
     164:	77 c6       	rjmp	.+3310   	; 0xe54 <__vector_89>
     166:	00 00       	nop
     168:	ef c0       	rjmp	.+478    	; 0x348 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	03 c5       	rjmp	.+2566   	; 0xb74 <__vector_91>
     16e:	00 00       	nop
     170:	bd c6       	rjmp	.+3450   	; 0xeec <__vector_92>
     172:	00 00       	nop
     174:	e9 c0       	rjmp	.+466    	; 0x348 <__bad_interrupt>
     176:	00 00       	nop
     178:	e7 c0       	rjmp	.+462    	; 0x348 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e5 c0       	rjmp	.+458    	; 0x348 <__bad_interrupt>
     17e:	00 00       	nop
     180:	e3 c0       	rjmp	.+454    	; 0x348 <__bad_interrupt>
     182:	00 00       	nop
     184:	e1 c0       	rjmp	.+450    	; 0x348 <__bad_interrupt>
     186:	00 00       	nop
     188:	df c0       	rjmp	.+446    	; 0x348 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	dd c0       	rjmp	.+442    	; 0x348 <__bad_interrupt>
     18e:	00 00       	nop
     190:	db c0       	rjmp	.+438    	; 0x348 <__bad_interrupt>
     192:	00 00       	nop
     194:	d9 c0       	rjmp	.+434    	; 0x348 <__bad_interrupt>
     196:	00 00       	nop
     198:	d7 c0       	rjmp	.+430    	; 0x348 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d5 c0       	rjmp	.+426    	; 0x348 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d3 c0       	rjmp	.+422    	; 0x348 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d1 c0       	rjmp	.+418    	; 0x348 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cf c0       	rjmp	.+414    	; 0x348 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	cd c0       	rjmp	.+410    	; 0x348 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	cb c0       	rjmp	.+406    	; 0x348 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c9 c0       	rjmp	.+402    	; 0x348 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c7 c0       	rjmp	.+398    	; 0x348 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c5 c0       	rjmp	.+394    	; 0x348 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c3 c0       	rjmp	.+390    	; 0x348 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c1 c0       	rjmp	.+386    	; 0x348 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bf c0       	rjmp	.+382    	; 0x348 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	bd c0       	rjmp	.+378    	; 0x348 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	bb c0       	rjmp	.+374    	; 0x348 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b9 c0       	rjmp	.+370    	; 0x348 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b7 c0       	rjmp	.+366    	; 0x348 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c5       	rjmp	.+2670   	; 0xc4c <__vector_119>
     1de:	00 00       	nop
     1e0:	1d c7       	rjmp	.+3642   	; 0x101c <__vector_120>
     1e2:	00 00       	nop
     1e4:	b1 c0       	rjmp	.+354    	; 0x348 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	67 c5       	rjmp	.+2766   	; 0xcb8 <__vector_122>
     1ea:	00 00       	nop
     1ec:	63 c7       	rjmp	.+3782   	; 0x10b4 <__vector_123>
     1ee:	00 00       	nop
     1f0:	ab c0       	rjmp	.+342    	; 0x348 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a9 c0       	rjmp	.+338    	; 0x348 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a7 c0       	rjmp	.+334    	; 0x348 <__bad_interrupt>
	...

000001fc <__c.2006>:
     1fc:	6e 61 6e 00                                         nan.

00000200 <__c.2004>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	df e3       	ldi	r29, 0x3F	; 63
     306:	de bf       	out	0x3e, r29	; 62
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	14 e2       	ldi	r17, 0x24	; 36
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	ee e6       	ldi	r30, 0x6E	; 110
     31e:	fb e1       	ldi	r31, 0x1B	; 27
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a8 30       	cpi	r26, 0x08	; 8
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	26 e2       	ldi	r18, 0x26	; 38
     334:	a8 e0       	ldi	r26, 0x08	; 8
     336:	b4 e2       	ldi	r27, 0x24	; 36
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a1 34       	cpi	r26, 0x41	; 65
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	4d d3       	rcall	.+1690   	; 0x9de <main>
     344:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <_exit>

00000348 <__bad_interrupt>:
     348:	5b ce       	rjmp	.-842    	; 0x0 <__vectors>

0000034a <__vector_71>:
	else			return filterData(&adc_data[pinNum][0]);
}


ISR(ADCA_CH0_vect)
{
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	08 b6       	in	r0, 0x38	; 56
     356:	0f 92       	push	r0
     358:	18 be       	out	0x38, r1	; 56
     35a:	09 b6       	in	r0, 0x39	; 57
     35c:	0f 92       	push	r0
     35e:	19 be       	out	0x39, r1	; 57
     360:	0a b6       	in	r0, 0x3a	; 58
     362:	0f 92       	push	r0
     364:	1a be       	out	0x3a, r1	; 58
     366:	0b b6       	in	r0, 0x3b	; 59
     368:	0f 92       	push	r0
     36a:	1b be       	out	0x3b, r1	; 59
     36c:	2f 93       	push	r18
     36e:	8f 93       	push	r24
     370:	9f 93       	push	r25
     372:	af 93       	push	r26
     374:	bf 93       	push	r27
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	ef 93       	push	r30
     37c:	ff 93       	push	r31
	adc_data[0][adcCnt[0].CNT++] = ADCA.CH0.RES;
     37e:	a8 e0       	ldi	r26, 0x08	; 8
     380:	b4 e2       	ldi	r27, 0x24	; 36
     382:	2c 91       	ld	r18, X
     384:	2f 70       	andi	r18, 0x0F	; 15
     386:	e2 2f       	mov	r30, r18
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	c0 e0       	ldi	r28, 0x00	; 0
     38c:	d2 e0       	ldi	r29, 0x02	; 2
     38e:	8c a1       	ldd	r24, Y+36	; 0x24
     390:	9d a1       	ldd	r25, Y+37	; 0x25
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	e0 5f       	subi	r30, 0xF0	; 240
     398:	fb 4d       	sbci	r31, 0xDB	; 219
     39a:	80 83       	st	Z, r24
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	2f 5f       	subi	r18, 0xFF	; 255
     3a0:	2f 70       	andi	r18, 0x0F	; 15
     3a2:	8c 91       	ld	r24, X
     3a4:	80 7f       	andi	r24, 0xF0	; 240
     3a6:	82 2b       	or	r24, r18
     3a8:	8c 93       	st	X, r24
}
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	2f 91       	pop	r18
     3bc:	0f 90       	pop	r0
     3be:	0b be       	out	0x3b, r0	; 59
     3c0:	0f 90       	pop	r0
     3c2:	0a be       	out	0x3a, r0	; 58
     3c4:	0f 90       	pop	r0
     3c6:	09 be       	out	0x39, r0	; 57
     3c8:	0f 90       	pop	r0
     3ca:	08 be       	out	0x38, r0	; 56
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <__vector_72>:
ISR(ADCA_CH1_vect)
{
     3d6:	1f 92       	push	r1
     3d8:	0f 92       	push	r0
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	0f 92       	push	r0
     3de:	11 24       	eor	r1, r1
     3e0:	08 b6       	in	r0, 0x38	; 56
     3e2:	0f 92       	push	r0
     3e4:	18 be       	out	0x38, r1	; 56
     3e6:	09 b6       	in	r0, 0x39	; 57
     3e8:	0f 92       	push	r0
     3ea:	19 be       	out	0x39, r1	; 57
     3ec:	0a b6       	in	r0, 0x3a	; 58
     3ee:	0f 92       	push	r0
     3f0:	1a be       	out	0x3a, r1	; 58
     3f2:	0b b6       	in	r0, 0x3b	; 59
     3f4:	0f 92       	push	r0
     3f6:	1b be       	out	0x3b, r1	; 59
     3f8:	2f 93       	push	r18
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	af 93       	push	r26
     400:	bf 93       	push	r27
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
	adc_data[1][adcCnt[1].CNT++] = ADCA.CH1.RES;
     40a:	a9 e0       	ldi	r26, 0x09	; 9
     40c:	b4 e2       	ldi	r27, 0x24	; 36
     40e:	2c 91       	ld	r18, X
     410:	2f 70       	andi	r18, 0x0F	; 15
     412:	e2 2f       	mov	r30, r18
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	c0 e0       	ldi	r28, 0x00	; 0
     418:	d2 e0       	ldi	r29, 0x02	; 2
     41a:	8c a5       	ldd	r24, Y+44	; 0x2c
     41c:	9d a5       	ldd	r25, Y+45	; 0x2d
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	e0 5d       	subi	r30, 0xD0	; 208
     424:	fb 4d       	sbci	r31, 0xDB	; 219
     426:	80 83       	st	Z, r24
     428:	91 83       	std	Z+1, r25	; 0x01
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	2f 70       	andi	r18, 0x0F	; 15
     42e:	8c 91       	ld	r24, X
     430:	80 7f       	andi	r24, 0xF0	; 240
     432:	82 2b       	or	r24, r18
     434:	8c 93       	st	X, r24
}
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	2f 91       	pop	r18
     448:	0f 90       	pop	r0
     44a:	0b be       	out	0x3b, r0	; 59
     44c:	0f 90       	pop	r0
     44e:	0a be       	out	0x3a, r0	; 58
     450:	0f 90       	pop	r0
     452:	09 be       	out	0x39, r0	; 57
     454:	0f 90       	pop	r0
     456:	08 be       	out	0x38, r0	; 56
     458:	0f 90       	pop	r0
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	0f 90       	pop	r0
     45e:	1f 90       	pop	r1
     460:	18 95       	reti

00000462 <__vector_73>:
ISR(ADCA_CH2_vect)
{
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	08 b6       	in	r0, 0x38	; 56
     46e:	0f 92       	push	r0
     470:	18 be       	out	0x38, r1	; 56
     472:	09 b6       	in	r0, 0x39	; 57
     474:	0f 92       	push	r0
     476:	19 be       	out	0x39, r1	; 57
     478:	0a b6       	in	r0, 0x3a	; 58
     47a:	0f 92       	push	r0
     47c:	1a be       	out	0x3a, r1	; 58
     47e:	0b b6       	in	r0, 0x3b	; 59
     480:	0f 92       	push	r0
     482:	1b be       	out	0x3b, r1	; 59
     484:	2f 93       	push	r18
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	af 93       	push	r26
     48c:	bf 93       	push	r27
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	ef 93       	push	r30
     494:	ff 93       	push	r31
	adc_data[2][adcCnt[2].CNT++] = ADCA.CH2.RES;
     496:	aa e0       	ldi	r26, 0x0A	; 10
     498:	b4 e2       	ldi	r27, 0x24	; 36
     49a:	2c 91       	ld	r18, X
     49c:	2f 70       	andi	r18, 0x0F	; 15
     49e:	e2 2f       	mov	r30, r18
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	c0 e0       	ldi	r28, 0x00	; 0
     4a4:	d2 e0       	ldi	r29, 0x02	; 2
     4a6:	8c a9       	ldd	r24, Y+52	; 0x34
     4a8:	9d a9       	ldd	r25, Y+53	; 0x35
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	e0 5b       	subi	r30, 0xB0	; 176
     4b0:	fb 4d       	sbci	r31, 0xDB	; 219
     4b2:	80 83       	st	Z, r24
     4b4:	91 83       	std	Z+1, r25	; 0x01
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	2f 70       	andi	r18, 0x0F	; 15
     4ba:	8c 91       	ld	r24, X
     4bc:	80 7f       	andi	r24, 0xF0	; 240
     4be:	82 2b       	or	r24, r18
     4c0:	8c 93       	st	X, r24
}
     4c2:	ff 91       	pop	r31
     4c4:	ef 91       	pop	r30
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	bf 91       	pop	r27
     4cc:	af 91       	pop	r26
     4ce:	9f 91       	pop	r25
     4d0:	8f 91       	pop	r24
     4d2:	2f 91       	pop	r18
     4d4:	0f 90       	pop	r0
     4d6:	0b be       	out	0x3b, r0	; 59
     4d8:	0f 90       	pop	r0
     4da:	0a be       	out	0x3a, r0	; 58
     4dc:	0f 90       	pop	r0
     4de:	09 be       	out	0x39, r0	; 57
     4e0:	0f 90       	pop	r0
     4e2:	08 be       	out	0x38, r0	; 56
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <__vector_74>:
ISR(ADCA_CH3_vect)
{
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	08 b6       	in	r0, 0x38	; 56
     4fa:	0f 92       	push	r0
     4fc:	18 be       	out	0x38, r1	; 56
     4fe:	09 b6       	in	r0, 0x39	; 57
     500:	0f 92       	push	r0
     502:	19 be       	out	0x39, r1	; 57
     504:	0a b6       	in	r0, 0x3a	; 58
     506:	0f 92       	push	r0
     508:	1a be       	out	0x3a, r1	; 58
     50a:	0b b6       	in	r0, 0x3b	; 59
     50c:	0f 92       	push	r0
     50e:	1b be       	out	0x3b, r1	; 59
     510:	2f 93       	push	r18
     512:	8f 93       	push	r24
     514:	9f 93       	push	r25
     516:	af 93       	push	r26
     518:	bf 93       	push	r27
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	ef 93       	push	r30
     520:	ff 93       	push	r31
	adc_data[3][adcCnt[3].CNT++] = ADCA.CH3.RES;
     522:	ab e0       	ldi	r26, 0x0B	; 11
     524:	b4 e2       	ldi	r27, 0x24	; 36
     526:	2c 91       	ld	r18, X
     528:	2f 70       	andi	r18, 0x0F	; 15
     52a:	e2 2f       	mov	r30, r18
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	c0 e0       	ldi	r28, 0x00	; 0
     530:	d2 e0       	ldi	r29, 0x02	; 2
     532:	8c ad       	ldd	r24, Y+60	; 0x3c
     534:	9d ad       	ldd	r25, Y+61	; 0x3d
     536:	ee 0f       	add	r30, r30
     538:	ff 1f       	adc	r31, r31
     53a:	e0 59       	subi	r30, 0x90	; 144
     53c:	fb 4d       	sbci	r31, 0xDB	; 219
     53e:	80 83       	st	Z, r24
     540:	91 83       	std	Z+1, r25	; 0x01
     542:	2f 5f       	subi	r18, 0xFF	; 255
     544:	2f 70       	andi	r18, 0x0F	; 15
     546:	8c 91       	ld	r24, X
     548:	80 7f       	andi	r24, 0xF0	; 240
     54a:	82 2b       	or	r24, r18
     54c:	8c 93       	st	X, r24
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	bf 91       	pop	r27
     558:	af 91       	pop	r26
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	2f 91       	pop	r18
     560:	0f 90       	pop	r0
     562:	0b be       	out	0x3b, r0	; 59
     564:	0f 90       	pop	r0
     566:	0a be       	out	0x3a, r0	; 58
     568:	0f 90       	pop	r0
     56a:	09 be       	out	0x39, r0	; 57
     56c:	0f 90       	pop	r0
     56e:	08 be       	out	0x38, r0	; 56
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <__vector_39>:



ISR(ADCB_CH0_vect)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	08 b6       	in	r0, 0x38	; 56
     586:	0f 92       	push	r0
     588:	18 be       	out	0x38, r1	; 56
     58a:	09 b6       	in	r0, 0x39	; 57
     58c:	0f 92       	push	r0
     58e:	19 be       	out	0x39, r1	; 57
     590:	0a b6       	in	r0, 0x3a	; 58
     592:	0f 92       	push	r0
     594:	1a be       	out	0x3a, r1	; 58
     596:	0b b6       	in	r0, 0x3b	; 59
     598:	0f 92       	push	r0
     59a:	1b be       	out	0x3b, r1	; 59
     59c:	2f 93       	push	r18
     59e:	8f 93       	push	r24
     5a0:	9f 93       	push	r25
     5a2:	af 93       	push	r26
     5a4:	bf 93       	push	r27
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
	adc_data[4][adcCnt[4].CNT++] = ADCB.CH0.RES;
     5ae:	ac e0       	ldi	r26, 0x0C	; 12
     5b0:	b4 e2       	ldi	r27, 0x24	; 36
     5b2:	2c 91       	ld	r18, X
     5b4:	2f 70       	andi	r18, 0x0F	; 15
     5b6:	e2 2f       	mov	r30, r18
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	c0 e4       	ldi	r28, 0x40	; 64
     5bc:	d2 e0       	ldi	r29, 0x02	; 2
     5be:	8c a1       	ldd	r24, Y+36	; 0x24
     5c0:	9d a1       	ldd	r25, Y+37	; 0x25
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	e0 57       	subi	r30, 0x70	; 112
     5c8:	fb 4d       	sbci	r31, 0xDB	; 219
     5ca:	80 83       	st	Z, r24
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	2f 5f       	subi	r18, 0xFF	; 255
     5d0:	2f 70       	andi	r18, 0x0F	; 15
     5d2:	8c 91       	ld	r24, X
     5d4:	80 7f       	andi	r24, 0xF0	; 240
     5d6:	82 2b       	or	r24, r18
     5d8:	8c 93       	st	X, r24
}
     5da:	ff 91       	pop	r31
     5dc:	ef 91       	pop	r30
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	2f 91       	pop	r18
     5ec:	0f 90       	pop	r0
     5ee:	0b be       	out	0x3b, r0	; 59
     5f0:	0f 90       	pop	r0
     5f2:	0a be       	out	0x3a, r0	; 58
     5f4:	0f 90       	pop	r0
     5f6:	09 be       	out	0x39, r0	; 57
     5f8:	0f 90       	pop	r0
     5fa:	08 be       	out	0x38, r0	; 56
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <__vector_40>:
ISR(ADCB_CH1_vect)
{
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	08 b6       	in	r0, 0x38	; 56
     612:	0f 92       	push	r0
     614:	18 be       	out	0x38, r1	; 56
     616:	09 b6       	in	r0, 0x39	; 57
     618:	0f 92       	push	r0
     61a:	19 be       	out	0x39, r1	; 57
     61c:	0a b6       	in	r0, 0x3a	; 58
     61e:	0f 92       	push	r0
     620:	1a be       	out	0x3a, r1	; 58
     622:	0b b6       	in	r0, 0x3b	; 59
     624:	0f 92       	push	r0
     626:	1b be       	out	0x3b, r1	; 59
     628:	2f 93       	push	r18
     62a:	8f 93       	push	r24
     62c:	9f 93       	push	r25
     62e:	af 93       	push	r26
     630:	bf 93       	push	r27
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
	adc_data[5][adcCnt[5].CNT++] = ADCB.CH1.RES;
     63a:	ad e0       	ldi	r26, 0x0D	; 13
     63c:	b4 e2       	ldi	r27, 0x24	; 36
     63e:	2c 91       	ld	r18, X
     640:	2f 70       	andi	r18, 0x0F	; 15
     642:	e2 2f       	mov	r30, r18
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	c0 e4       	ldi	r28, 0x40	; 64
     648:	d2 e0       	ldi	r29, 0x02	; 2
     64a:	8c a5       	ldd	r24, Y+44	; 0x2c
     64c:	9d a5       	ldd	r25, Y+45	; 0x2d
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	e0 55       	subi	r30, 0x50	; 80
     654:	fb 4d       	sbci	r31, 0xDB	; 219
     656:	80 83       	st	Z, r24
     658:	91 83       	std	Z+1, r25	; 0x01
     65a:	2f 5f       	subi	r18, 0xFF	; 255
     65c:	2f 70       	andi	r18, 0x0F	; 15
     65e:	8c 91       	ld	r24, X
     660:	80 7f       	andi	r24, 0xF0	; 240
     662:	82 2b       	or	r24, r18
     664:	8c 93       	st	X, r24
}
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	bf 91       	pop	r27
     670:	af 91       	pop	r26
     672:	9f 91       	pop	r25
     674:	8f 91       	pop	r24
     676:	2f 91       	pop	r18
     678:	0f 90       	pop	r0
     67a:	0b be       	out	0x3b, r0	; 59
     67c:	0f 90       	pop	r0
     67e:	0a be       	out	0x3a, r0	; 58
     680:	0f 90       	pop	r0
     682:	09 be       	out	0x39, r0	; 57
     684:	0f 90       	pop	r0
     686:	08 be       	out	0x38, r0	; 56
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <__vector_41>:
ISR(ADCB_CH2_vect)
{
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	08 b6       	in	r0, 0x38	; 56
     69e:	0f 92       	push	r0
     6a0:	18 be       	out	0x38, r1	; 56
     6a2:	09 b6       	in	r0, 0x39	; 57
     6a4:	0f 92       	push	r0
     6a6:	19 be       	out	0x39, r1	; 57
     6a8:	0a b6       	in	r0, 0x3a	; 58
     6aa:	0f 92       	push	r0
     6ac:	1a be       	out	0x3a, r1	; 58
     6ae:	0b b6       	in	r0, 0x3b	; 59
     6b0:	0f 92       	push	r0
     6b2:	1b be       	out	0x3b, r1	; 59
     6b4:	2f 93       	push	r18
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ef 93       	push	r30
     6c4:	ff 93       	push	r31
	adc_data[6][adcCnt[6].CNT++] = ADCB.CH2.RES;
     6c6:	ae e0       	ldi	r26, 0x0E	; 14
     6c8:	b4 e2       	ldi	r27, 0x24	; 36
     6ca:	2c 91       	ld	r18, X
     6cc:	2f 70       	andi	r18, 0x0F	; 15
     6ce:	e2 2f       	mov	r30, r18
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	c0 e4       	ldi	r28, 0x40	; 64
     6d4:	d2 e0       	ldi	r29, 0x02	; 2
     6d6:	8c a9       	ldd	r24, Y+52	; 0x34
     6d8:	9d a9       	ldd	r25, Y+53	; 0x35
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	e0 53       	subi	r30, 0x30	; 48
     6e0:	fb 4d       	sbci	r31, 0xDB	; 219
     6e2:	80 83       	st	Z, r24
     6e4:	91 83       	std	Z+1, r25	; 0x01
     6e6:	2f 5f       	subi	r18, 0xFF	; 255
     6e8:	2f 70       	andi	r18, 0x0F	; 15
     6ea:	8c 91       	ld	r24, X
     6ec:	80 7f       	andi	r24, 0xF0	; 240
     6ee:	82 2b       	or	r24, r18
     6f0:	8c 93       	st	X, r24
}
     6f2:	ff 91       	pop	r31
     6f4:	ef 91       	pop	r30
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	2f 91       	pop	r18
     704:	0f 90       	pop	r0
     706:	0b be       	out	0x3b, r0	; 59
     708:	0f 90       	pop	r0
     70a:	0a be       	out	0x3a, r0	; 58
     70c:	0f 90       	pop	r0
     70e:	09 be       	out	0x39, r0	; 57
     710:	0f 90       	pop	r0
     712:	08 be       	out	0x38, r0	; 56
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <__vector_42>:
ISR(ADCB_CH3_vect)
{
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	08 b6       	in	r0, 0x38	; 56
     72a:	0f 92       	push	r0
     72c:	18 be       	out	0x38, r1	; 56
     72e:	09 b6       	in	r0, 0x39	; 57
     730:	0f 92       	push	r0
     732:	19 be       	out	0x39, r1	; 57
     734:	0a b6       	in	r0, 0x3a	; 58
     736:	0f 92       	push	r0
     738:	1a be       	out	0x3a, r1	; 58
     73a:	0b b6       	in	r0, 0x3b	; 59
     73c:	0f 92       	push	r0
     73e:	1b be       	out	0x3b, r1	; 59
     740:	2f 93       	push	r18
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	ef 93       	push	r30
     750:	ff 93       	push	r31
	adc_data[7][adcCnt[7].CNT++] = ADCB.CH3.RES;
     752:	af e0       	ldi	r26, 0x0F	; 15
     754:	b4 e2       	ldi	r27, 0x24	; 36
     756:	2c 91       	ld	r18, X
     758:	2f 70       	andi	r18, 0x0F	; 15
     75a:	e2 2f       	mov	r30, r18
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	c0 e4       	ldi	r28, 0x40	; 64
     760:	d2 e0       	ldi	r29, 0x02	; 2
     762:	8c ad       	ldd	r24, Y+60	; 0x3c
     764:	9d ad       	ldd	r25, Y+61	; 0x3d
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	e0 51       	subi	r30, 0x10	; 16
     76c:	fb 4d       	sbci	r31, 0xDB	; 219
     76e:	80 83       	st	Z, r24
     770:	91 83       	std	Z+1, r25	; 0x01
     772:	2f 5f       	subi	r18, 0xFF	; 255
     774:	2f 70       	andi	r18, 0x0F	; 15
     776:	8c 91       	ld	r24, X
     778:	80 7f       	andi	r24, 0xF0	; 240
     77a:	82 2b       	or	r24, r18
     77c:	8c 93       	st	X, r24
}
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	bf 91       	pop	r27
     788:	af 91       	pop	r26
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	2f 91       	pop	r18
     790:	0f 90       	pop	r0
     792:	0b be       	out	0x3b, r0	; 59
     794:	0f 90       	pop	r0
     796:	0a be       	out	0x3a, r0	; 58
     798:	0f 90       	pop	r0
     79a:	09 be       	out	0x39, r0	; 57
     79c:	0f 90       	pop	r0
     79e:	08 be       	out	0x38, r0	; 56
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <servo_getchar>:
}

int servo_getchar(FILE *stream){
uint8_t temp1;

	if (servoBuffer.tail == servoBuffer.bufferEnd){
     7aa:	e0 91 16 25 	lds	r30, 0x2516
     7ae:	f0 91 17 25 	lds	r31, 0x2517
     7b2:	80 91 12 25 	lds	r24, 0x2512
     7b6:	90 91 13 25 	lds	r25, 0x2513
     7ba:	e8 17       	cp	r30, r24
     7bc:	f9 07       	cpc	r31, r25
     7be:	89 f4       	brne	.+34     	; 0x7e2 <servo_getchar+0x38>
		uint8_t temp = *servoBuffer.tail;
     7c0:	20 81       	ld	r18, Z
		*servoBuffer.tail = 0;
     7c2:	10 82       	st	Z, r1
		servoBuffer.tail = servoBuffer.bufferBegin;
     7c4:	80 91 10 25 	lds	r24, 0x2510
     7c8:	90 91 11 25 	lds	r25, 0x2511
     7cc:	80 93 16 25 	sts	0x2516, r24
     7d0:	90 93 17 25 	sts	0x2517, r25
		while(!(USARTE0.STATUS & USART_DREIF_bm));
     7d4:	80 91 a1 0a 	lds	r24, 0x0AA1
     7d8:	85 ff       	sbrs	r24, 5
     7da:	fc cf       	rjmp	.-8      	; 0x7d4 <servo_getchar+0x2a>
		USARTE0.DATA = temp;	
     7dc:	20 93 a0 0a 	sts	0x0AA0, r18
     7e0:	08 95       	ret


	}
	//else return *servoBuffer.tail++;
	else{
		while(!(USARTE0.STATUS & USART_DREIF_bm));
     7e2:	80 91 a1 0a 	lds	r24, 0x0AA1
     7e6:	85 ff       	sbrs	r24, 5
     7e8:	fc cf       	rjmp	.-8      	; 0x7e2 <servo_getchar+0x38>
		USARTE0.DATA = *servoBuffer.tail;
     7ea:	80 81       	ld	r24, Z
     7ec:	80 93 a0 0a 	sts	0x0AA0, r24
		temp1 = *servoBuffer.tail;
		*servoBuffer.tail++ = 0;
     7f0:	11 92       	st	Z+, r1
     7f2:	e0 93 16 25 	sts	0x2516, r30
     7f6:	f0 93 17 25 	sts	0x2517, r31
	
	}
}
     7fa:	08 95       	ret

000007fc <storeServo>:

void storeServo(char c){
	if(servoBuffer.head == servoBuffer.bufferEnd){
     7fc:	e0 91 14 25 	lds	r30, 0x2514
     800:	f0 91 15 25 	lds	r31, 0x2515
     804:	20 91 12 25 	lds	r18, 0x2512
     808:	30 91 13 25 	lds	r19, 0x2513
     80c:	e2 17       	cp	r30, r18
     80e:	f3 07       	cpc	r31, r19
     810:	51 f4       	brne	.+20     	; 0x826 <storeServo+0x2a>
		*servoBuffer.head = c;
     812:	80 83       	st	Z, r24
		servoBuffer.head = servoBuffer.bufferBegin;	
     814:	80 91 10 25 	lds	r24, 0x2510
     818:	90 91 11 25 	lds	r25, 0x2511
     81c:	80 93 14 25 	sts	0x2514, r24
     820:	90 93 15 25 	sts	0x2515, r25
     824:	08 95       	ret
	}		
	else *servoBuffer.head++ = c;
     826:	81 93       	st	Z+, r24
     828:	e0 93 14 25 	sts	0x2514, r30
     82c:	f0 93 15 25 	sts	0x2515, r31
     830:	08 95       	ret

00000832 <servo_putchar>:
	
}

void servo_putchar(char c,FILE *unused)
{
	storeServo(c);
     832:	e4 cf       	rjmp	.-56     	; 0x7fc <storeServo>

00000834 <dataInServoBuffer>:
	}		
	else *servoBuffer.head++ = c;
}

uint8_t dataInServoBuffer(void){
	if(servoBuffer.head == servoBuffer.tail) return 0;	//no data to be read
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	40 91 14 25 	lds	r20, 0x2514
     83a:	50 91 15 25 	lds	r21, 0x2515
     83e:	20 91 16 25 	lds	r18, 0x2516
     842:	30 91 17 25 	lds	r19, 0x2517
     846:	42 17       	cp	r20, r18
     848:	53 07       	cpc	r21, r19
     84a:	09 f4       	brne	.+2      	; 0x84e <dataInServoBuffer+0x1a>
     84c:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;	
}
     84e:	08 95       	ret

00000850 <__vector_43>:


//Occurs upon Interrupt request from the Attiny
ISR(PORTE_INT0_vect){	
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	08 b6       	in	r0, 0x38	; 56
     85c:	0f 92       	push	r0
     85e:	18 be       	out	0x38, r1	; 56
     860:	09 b6       	in	r0, 0x39	; 57
     862:	0f 92       	push	r0
     864:	19 be       	out	0x39, r1	; 57
     866:	0b b6       	in	r0, 0x3b	; 59
     868:	0f 92       	push	r0
     86a:	1b be       	out	0x3b, r1	; 59
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
	cli();
     884:	f8 94       	cli
	if(dataInServoBuffer())	servo_getchar(NULL); //grabs the next byte from the servoBuffer	
     886:	d6 df       	rcall	.-84     	; 0x834 <dataInServoBuffer>
     888:	88 23       	and	r24, r24
     88a:	19 f0       	breq	.+6      	; 0x892 <__vector_43+0x42>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	8c df       	rcall	.-232    	; 0x7aa <servo_getchar>
	sei();
     892:	78 94       	sei
}
     894:	ff 91       	pop	r31
     896:	ef 91       	pop	r30
     898:	bf 91       	pop	r27
     89a:	af 91       	pop	r26
     89c:	9f 91       	pop	r25
     89e:	8f 91       	pop	r24
     8a0:	7f 91       	pop	r23
     8a2:	6f 91       	pop	r22
     8a4:	5f 91       	pop	r21
     8a6:	4f 91       	pop	r20
     8a8:	3f 91       	pop	r19
     8aa:	2f 91       	pop	r18
     8ac:	0f 90       	pop	r0
     8ae:	0b be       	out	0x3b, r0	; 59
     8b0:	0f 90       	pop	r0
     8b2:	09 be       	out	0x39, r0	; 57
     8b4:	0f 90       	pop	r0
     8b6:	08 be       	out	0x38, r0	; 56
     8b8:	0f 90       	pop	r0
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	0f 90       	pop	r0
     8be:	1f 90       	pop	r1
     8c0:	18 95       	reti

000008c2 <__vector_53>:

ISR(TCE1_OVF_vect){
     8c2:	1f 92       	push	r1
     8c4:	0f 92       	push	r0
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	0f 92       	push	r0
     8ca:	11 24       	eor	r1, r1
     8cc:	08 b6       	in	r0, 0x38	; 56
     8ce:	0f 92       	push	r0
     8d0:	18 be       	out	0x38, r1	; 56
     8d2:	09 b6       	in	r0, 0x39	; 57
     8d4:	0f 92       	push	r0
     8d6:	19 be       	out	0x39, r1	; 57
     8d8:	0a b6       	in	r0, 0x3a	; 58
     8da:	0f 92       	push	r0
     8dc:	1a be       	out	0x3a, r1	; 58
     8de:	0b b6       	in	r0, 0x3b	; 59
     8e0:	0f 92       	push	r0
     8e2:	1b be       	out	0x3b, r1	; 59
     8e4:	bf 92       	push	r11
     8e6:	cf 92       	push	r12
     8e8:	df 92       	push	r13
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	2f 93       	push	r18
     8f4:	3f 93       	push	r19
     8f6:	4f 93       	push	r20
     8f8:	5f 93       	push	r21
     8fa:	6f 93       	push	r22
     8fc:	7f 93       	push	r23
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	af 93       	push	r26
     904:	bf 93       	push	r27
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	ef 93       	push	r30
     90c:	ff 93       	push	r31
	cli();
     90e:	f8 94       	cli
     910:	0b ef       	ldi	r16, 0xFB	; 251
     912:	15 e2       	ldi	r17, 0x25	; 37
     914:	c0 e0       	ldi	r28, 0x00	; 0
     916:	d0 e0       	ldi	r29, 0x00	; 0
		}			
		//now if the servo is out of date we need to send its message to the servoBuffer
		else 
		{
		//print servoNumber, time high. time low, 0x80 | servoNumber
			fprintf(&servoBufferFile,"%c%c%c%c",i, (servo[i].servoTime >>8), servo[i].servoTime, (i | 0x80));
     918:	4e ef       	ldi	r20, 0xFE	; 254
     91a:	e4 2e       	mov	r14, r20
     91c:	43 e2       	ldi	r20, 0x23	; 35
     91e:	f4 2e       	mov	r15, r20
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	c5 2e       	mov	r12, r21
     924:	50 e2       	ldi	r21, 0x20	; 32
     926:	d5 2e       	mov	r13, r21
	{

	//for less impact logic could be implemented to poll the enable flag to refresh these servo channels at a slower rate.	

		//if the servo is up to date increment its idle cycles at that state
		if(servo[i].configReg.params.upToDate){
     928:	fe 01       	movw	r30, r28
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	ec 0f       	add	r30, r28
     930:	fd 1f       	adc	r31, r29
     932:	e5 50       	subi	r30, 0x05	; 5
     934:	fa 4d       	sbci	r31, 0xDA	; 218
     936:	80 81       	ld	r24, Z
     938:	86 ff       	sbrs	r24, 6
     93a:	0a c0       	rjmp	.+20     	; 0x950 <__vector_53+0x8e>
				
#ifdef servoRefresh
			servo[i].configReg.statusReg++;	//the idle cycles bit field is at the bottom of the reg.  
     93c:	d8 01       	movw	r26, r16
     93e:	8c 91       	ld	r24, X
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	8c 93       	st	X, r24
											//So an increment to the reg will increment the idle cycles
											//only as long as the range of increments is kept in check ie it stays under 31	
																							
			//if the servo has been idle for too long set it as out of date so it can be refreshed
			if(servo[i].configReg.statusReg & 0x1F >= servoRefreshThreshold)servo[i].configReg.params.upToDate = false;
     944:	80 ff       	sbrs	r24, 0
     946:	22 c0       	rjmp	.+68     	; 0x98c <__vector_53+0xca>
     948:	80 81       	ld	r24, Z
     94a:	8f 7b       	andi	r24, 0xBF	; 191
     94c:	80 83       	st	Z, r24
     94e:	1e c0       	rjmp	.+60     	; 0x98c <__vector_53+0xca>
	cli();
	if(dataInServoBuffer())	servo_getchar(NULL); //grabs the next byte from the servoBuffer	
	sei();
}

ISR(TCE1_OVF_vect){
     950:	f8 01       	movw	r30, r16
     952:	32 97       	sbiw	r30, 0x02	; 2
		}			
		//now if the servo is out of date we need to send its message to the servoBuffer
		else 
		{
		//print servoNumber, time high. time low, 0x80 | servoNumber
			fprintf(&servoBufferFile,"%c%c%c%c",i, (servo[i].servoTime >>8), servo[i].servoTime, (i | 0x80));
     954:	30 81       	ld	r19, Z
     956:	21 81       	ldd	r18, Z+1	; 0x01
	cli();
	if(dataInServoBuffer())	servo_getchar(NULL); //grabs the next byte from the servoBuffer	
	sei();
}

ISR(TCE1_OVF_vect){
     958:	ce 01       	movw	r24, r28
     95a:	99 27       	eor	r25, r25
     95c:	80 68       	ori	r24, 0x80	; 128
		}			
		//now if the servo is out of date we need to send its message to the servoBuffer
		else 
		{
		//print servoNumber, time high. time low, 0x80 | servoNumber
			fprintf(&servoBufferFile,"%c%c%c%c",i, (servo[i].servoTime >>8), servo[i].servoTime, (i | 0x80));
     95e:	9f 93       	push	r25
     960:	8f 93       	push	r24
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	1f 92       	push	r1
     968:	2f 93       	push	r18
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	ff 92       	push	r15
     970:	ef 92       	push	r14
     972:	df 92       	push	r13
     974:	cf 92       	push	r12
     976:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <fprintf>
	cli();
	if(dataInServoBuffer())	servo_getchar(NULL); //grabs the next byte from the servoBuffer	
	sei();
}

ISR(TCE1_OVF_vect){
     97a:	8c 2f       	mov	r24, r28
     97c:	80 54       	subi	r24, 0x40	; 64
		//now if the servo is out of date we need to send its message to the servoBuffer
		else 
		{
		//print servoNumber, time high. time low, 0x80 | servoNumber
			fprintf(&servoBufferFile,"%c%c%c%c",i, (servo[i].servoTime >>8), servo[i].servoTime, (i | 0x80));
			servo[i].configReg.statusReg = 0xC0 + i;	//this will clear the idleCyclesCount, set the servo as upToDate and preserve the enabled bit.
     97e:	d8 01       	movw	r26, r16
     980:	8c 93       	st	X, r24
     982:	ed b7       	in	r30, 0x3d	; 61
     984:	fe b7       	in	r31, 0x3e	; 62
     986:	3c 96       	adiw	r30, 0x0c	; 12
     988:	ed bf       	out	0x3d, r30	; 61
     98a:	fe bf       	out	0x3e, r31	; 62
     98c:	21 96       	adiw	r28, 0x01	; 1
     98e:	0d 5f       	subi	r16, 0xFD	; 253
     990:	1f 4f       	sbci	r17, 0xFF	; 255
}

ISR(TCE1_OVF_vect){
	cli();
	uint8_t i;		//simple increment var
	for(i=0;i<24;i++)
     992:	c8 31       	cpi	r28, 0x18	; 24
     994:	d1 05       	cpc	r29, r1
     996:	41 f6       	brne	.-112    	; 0x928 <__vector_53+0x66>
		//	servo[i].configReg.params.enabled = true;
		}
		
	}
	
	sei();
     998:	78 94       	sei
	
}
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	bf 91       	pop	r27
     9a4:	af 91       	pop	r26
     9a6:	9f 91       	pop	r25
     9a8:	8f 91       	pop	r24
     9aa:	7f 91       	pop	r23
     9ac:	6f 91       	pop	r22
     9ae:	5f 91       	pop	r21
     9b0:	4f 91       	pop	r20
     9b2:	3f 91       	pop	r19
     9b4:	2f 91       	pop	r18
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	cf 90       	pop	r12
     9c2:	bf 90       	pop	r11
     9c4:	0f 90       	pop	r0
     9c6:	0b be       	out	0x3b, r0	; 59
     9c8:	0f 90       	pop	r0
     9ca:	0a be       	out	0x3a, r0	; 58
     9cc:	0f 90       	pop	r0
     9ce:	09 be       	out	0x39, r0	; 57
     9d0:	0f 90       	pop	r0
     9d2:	08 be       	out	0x38, r0	; 56
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <main>:
#include "Epiphany.h"

int main(void)
{
	
	setup();
     9de:	02 d0       	rcall	.+4      	; 0x9e4 <setup>
	
	while(1)
    {	
		loop();
     9e0:	02 d0       	rcall	.+4      	; 0x9e6 <loop>
     9e2:	fe cf       	rjmp	.-4      	; 0x9e0 <main+0x2>

000009e4 <setup>:
#include "Epiphany.h"

void setup()
{
     9e4:	08 95       	ret

000009e6 <loop>:
	* and setup routines here
	*/
}
	
void loop()
{
     9e6:	08 95       	ret

000009e8 <bufferRead>:
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
	else return 1;	
}
     9e8:	fc 01       	movw	r30, r24
     9ea:	a6 81       	ldd	r26, Z+6	; 0x06
     9ec:	b7 81       	ldd	r27, Z+7	; 0x07
     9ee:	22 81       	ldd	r18, Z+2	; 0x02
     9f0:	33 81       	ldd	r19, Z+3	; 0x03
     9f2:	8c 91       	ld	r24, X
     9f4:	a2 17       	cp	r26, r18
     9f6:	b3 07       	cpc	r27, r19
     9f8:	29 f4       	brne	.+10     	; 0xa04 <bufferRead+0x1c>
     9fa:	20 81       	ld	r18, Z
     9fc:	31 81       	ldd	r19, Z+1	; 0x01
     9fe:	26 83       	std	Z+6, r18	; 0x06
     a00:	37 83       	std	Z+7, r19	; 0x07
     a02:	08 95       	ret
     a04:	11 96       	adiw	r26, 0x01	; 1
     a06:	a6 83       	std	Z+6, r26	; 0x06
     a08:	b7 83       	std	Z+7, r27	; 0x07
     a0a:	08 95       	ret

00000a0c <bufferWrite>:
     a0c:	fc 01       	movw	r30, r24
     a0e:	a4 81       	ldd	r26, Z+4	; 0x04
     a10:	b5 81       	ldd	r27, Z+5	; 0x05
     a12:	82 81       	ldd	r24, Z+2	; 0x02
     a14:	93 81       	ldd	r25, Z+3	; 0x03
     a16:	a8 17       	cp	r26, r24
     a18:	b9 07       	cpc	r27, r25
     a1a:	31 f4       	brne	.+12     	; 0xa28 <bufferWrite+0x1c>
     a1c:	6c 93       	st	X, r22
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	84 83       	std	Z+4, r24	; 0x04
     a24:	95 83       	std	Z+5, r25	; 0x05
     a26:	08 95       	ret
     a28:	6d 93       	st	X+, r22
     a2a:	a4 83       	std	Z+4, r26	; 0x04
     a2c:	b5 83       	std	Z+5, r27	; 0x05
     a2e:	08 95       	ret

00000a30 <__vector_25>:

ISR(USARTC0_RXC_vect){
     a30:	1f 92       	push	r1
     a32:	0f 92       	push	r0
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	0f 92       	push	r0
     a38:	11 24       	eor	r1, r1
     a3a:	08 b6       	in	r0, 0x38	; 56
     a3c:	0f 92       	push	r0
     a3e:	18 be       	out	0x38, r1	; 56
     a40:	09 b6       	in	r0, 0x39	; 57
     a42:	0f 92       	push	r0
     a44:	19 be       	out	0x39, r1	; 57
     a46:	0b b6       	in	r0, 0x3b	; 59
     a48:	0f 92       	push	r0
     a4a:	1b be       	out	0x3b, r1	; 59
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31
	bufferWrite(&bufRxC0,USARTC0.DATA);
     a64:	60 91 a0 08 	lds	r22, 0x08A0
     a68:	86 eb       	ldi	r24, 0xB6	; 182
     a6a:	93 e2       	ldi	r25, 0x23	; 35
     a6c:	cf df       	rcall	.-98     	; 0xa0c <bufferWrite>
}
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	7f 91       	pop	r23
     a7c:	6f 91       	pop	r22
     a7e:	5f 91       	pop	r21
     a80:	4f 91       	pop	r20
     a82:	3f 91       	pop	r19
     a84:	2f 91       	pop	r18
     a86:	0f 90       	pop	r0
     a88:	0b be       	out	0x3b, r0	; 59
     a8a:	0f 90       	pop	r0
     a8c:	09 be       	out	0x39, r0	; 57
     a8e:	0f 90       	pop	r0
     a90:	08 be       	out	0x38, r0	; 56
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <__vector_28>:
ISR(USARTC1_RXC_vect){
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	08 b6       	in	r0, 0x38	; 56
     aa8:	0f 92       	push	r0
     aaa:	18 be       	out	0x38, r1	; 56
     aac:	09 b6       	in	r0, 0x39	; 57
     aae:	0f 92       	push	r0
     ab0:	19 be       	out	0x39, r1	; 57
     ab2:	0b b6       	in	r0, 0x3b	; 59
     ab4:	0f 92       	push	r0
     ab6:	1b be       	out	0x3b, r1	; 59
     ab8:	2f 93       	push	r18
     aba:	3f 93       	push	r19
     abc:	4f 93       	push	r20
     abe:	5f 93       	push	r21
     ac0:	6f 93       	push	r22
     ac2:	7f 93       	push	r23
     ac4:	8f 93       	push	r24
     ac6:	9f 93       	push	r25
     ac8:	af 93       	push	r26
     aca:	bf 93       	push	r27
     acc:	ef 93       	push	r30
     ace:	ff 93       	push	r31
	bufferWrite(&bufRxC1,USARTC1.DATA);
     ad0:	60 91 b0 08 	lds	r22, 0x08B0
     ad4:	86 e2       	ldi	r24, 0x26	; 38
     ad6:	93 e2       	ldi	r25, 0x23	; 35
     ad8:	99 df       	rcall	.-206    	; 0xa0c <bufferWrite>
}
     ada:	ff 91       	pop	r31
     adc:	ef 91       	pop	r30
     ade:	bf 91       	pop	r27
     ae0:	af 91       	pop	r26
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	7f 91       	pop	r23
     ae8:	6f 91       	pop	r22
     aea:	5f 91       	pop	r21
     aec:	4f 91       	pop	r20
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	0f 90       	pop	r0
     af4:	0b be       	out	0x3b, r0	; 59
     af6:	0f 90       	pop	r0
     af8:	09 be       	out	0x39, r0	; 57
     afa:	0f 90       	pop	r0
     afc:	08 be       	out	0x38, r0	; 56
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_88>:
ISR(USARTD0_RXC_vect){
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	08 b6       	in	r0, 0x38	; 56
     b14:	0f 92       	push	r0
     b16:	18 be       	out	0x38, r1	; 56
     b18:	09 b6       	in	r0, 0x39	; 57
     b1a:	0f 92       	push	r0
     b1c:	19 be       	out	0x39, r1	; 57
     b1e:	0b b6       	in	r0, 0x3b	; 59
     b20:	0f 92       	push	r0
     b22:	1b be       	out	0x3b, r1	; 59
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
	bufferWrite(&bufRxD0,USARTD0.DATA);
     b3c:	60 91 a0 09 	lds	r22, 0x09A0
     b40:	86 e9       	ldi	r24, 0x96	; 150
     b42:	92 e2       	ldi	r25, 0x22	; 34
     b44:	63 df       	rcall	.-314    	; 0xa0c <bufferWrite>
}
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0b be       	out	0x3b, r0	; 59
     b62:	0f 90       	pop	r0
     b64:	09 be       	out	0x39, r0	; 57
     b66:	0f 90       	pop	r0
     b68:	08 be       	out	0x38, r0	; 56
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <__vector_91>:
ISR(USARTD1_RXC_vect){
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	08 b6       	in	r0, 0x38	; 56
     b80:	0f 92       	push	r0
     b82:	18 be       	out	0x38, r1	; 56
     b84:	09 b6       	in	r0, 0x39	; 57
     b86:	0f 92       	push	r0
     b88:	19 be       	out	0x39, r1	; 57
     b8a:	0b b6       	in	r0, 0x3b	; 59
     b8c:	0f 92       	push	r0
     b8e:	1b be       	out	0x3b, r1	; 59
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
	bufferWrite(&bufRxD1,USARTD1.DATA);
     ba8:	60 91 b0 09 	lds	r22, 0x09B0
     bac:	86 e0       	ldi	r24, 0x06	; 6
     bae:	92 e2       	ldi	r25, 0x22	; 34
     bb0:	2d df       	rcall	.-422    	; 0xa0c <bufferWrite>
}
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	bf 91       	pop	r27
     bb8:	af 91       	pop	r26
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	7f 91       	pop	r23
     bc0:	6f 91       	pop	r22
     bc2:	5f 91       	pop	r21
     bc4:	4f 91       	pop	r20
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	0f 90       	pop	r0
     bcc:	0b be       	out	0x3b, r0	; 59
     bce:	0f 90       	pop	r0
     bd0:	09 be       	out	0x39, r0	; 57
     bd2:	0f 90       	pop	r0
     bd4:	08 be       	out	0x38, r0	; 56
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_61>:
ISR(USARTE1_RXC_vect){
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	08 b6       	in	r0, 0x38	; 56
     bec:	0f 92       	push	r0
     bee:	18 be       	out	0x38, r1	; 56
     bf0:	09 b6       	in	r0, 0x39	; 57
     bf2:	0f 92       	push	r0
     bf4:	19 be       	out	0x39, r1	; 57
     bf6:	0b b6       	in	r0, 0x3b	; 59
     bf8:	0f 92       	push	r0
     bfa:	1b be       	out	0x3b, r1	; 59
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
	bufferWrite(&bufRxE1,USARTE1.DATA);
     c14:	60 91 b0 0a 	lds	r22, 0x0AB0
     c18:	86 e7       	ldi	r24, 0x76	; 118
     c1a:	91 e2       	ldi	r25, 0x21	; 33
     c1c:	f7 de       	rcall	.-530    	; 0xa0c <bufferWrite>
}
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	0f 90       	pop	r0
     c38:	0b be       	out	0x3b, r0	; 59
     c3a:	0f 90       	pop	r0
     c3c:	09 be       	out	0x39, r0	; 57
     c3e:	0f 90       	pop	r0
     c40:	08 be       	out	0x38, r0	; 56
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	0f 90       	pop	r0
     c48:	1f 90       	pop	r1
     c4a:	18 95       	reti

00000c4c <__vector_119>:
ISR(USARTF0_RXC_vect){
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	08 b6       	in	r0, 0x38	; 56
     c58:	0f 92       	push	r0
     c5a:	18 be       	out	0x38, r1	; 56
     c5c:	09 b6       	in	r0, 0x39	; 57
     c5e:	0f 92       	push	r0
     c60:	19 be       	out	0x39, r1	; 57
     c62:	0b b6       	in	r0, 0x3b	; 59
     c64:	0f 92       	push	r0
     c66:	1b be       	out	0x3b, r1	; 59
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
	bufferWrite(&bufRxF0,USARTF0.DATA);
     c80:	60 91 a0 0b 	lds	r22, 0x0BA0
     c84:	86 ee       	ldi	r24, 0xE6	; 230
     c86:	90 e2       	ldi	r25, 0x20	; 32
     c88:	c1 de       	rcall	.-638    	; 0xa0c <bufferWrite>
}
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0b be       	out	0x3b, r0	; 59
     ca6:	0f 90       	pop	r0
     ca8:	09 be       	out	0x39, r0	; 57
     caa:	0f 90       	pop	r0
     cac:	08 be       	out	0x38, r0	; 56
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <__vector_122>:
ISR(USARTF1_RXC_vect){
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	08 b6       	in	r0, 0x38	; 56
     cc4:	0f 92       	push	r0
     cc6:	18 be       	out	0x38, r1	; 56
     cc8:	09 b6       	in	r0, 0x39	; 57
     cca:	0f 92       	push	r0
     ccc:	19 be       	out	0x39, r1	; 57
     cce:	0b b6       	in	r0, 0x3b	; 59
     cd0:	0f 92       	push	r0
     cd2:	1b be       	out	0x3b, r1	; 59
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
	bufferWrite(&bufRxF1,USARTF1.DATA);
     cec:	60 91 b0 0b 	lds	r22, 0x0BB0
     cf0:	86 e5       	ldi	r24, 0x56	; 86
     cf2:	90 e2       	ldi	r25, 0x20	; 32
     cf4:	8b de       	rcall	.-746    	; 0xa0c <bufferWrite>
}
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0b be       	out	0x3b, r0	; 59
     d12:	0f 90       	pop	r0
     d14:	09 be       	out	0x39, r0	; 57
     d16:	0f 90       	pop	r0
     d18:	08 be       	out	0x38, r0	; 56
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_26>:

ISR(USARTC0_DRE_vect)
{
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	08 b6       	in	r0, 0x38	; 56
     d30:	0f 92       	push	r0
     d32:	18 be       	out	0x38, r1	; 56
     d34:	09 b6       	in	r0, 0x39	; 57
     d36:	0f 92       	push	r0
     d38:	19 be       	out	0x39, r1	; 57
     d3a:	0b b6       	in	r0, 0x3b	; 59
     d3c:	0f 92       	push	r0
     d3e:	1b be       	out	0x3b, r1	; 59
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	ef 93       	push	r30
     d56:	ff 93       	push	r31
	cli();
     d58:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
     d5a:	20 91 72 23 	lds	r18, 0x2372
     d5e:	30 91 73 23 	lds	r19, 0x2373
     d62:	80 91 74 23 	lds	r24, 0x2374
     d66:	90 91 75 23 	lds	r25, 0x2375
     d6a:	28 17       	cp	r18, r24
     d6c:	39 07       	cpc	r19, r25
     d6e:	19 f4       	brne	.+6      	; 0xd76 <__vector_26+0x52>
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <__vector_26+0x5e>
	if(dataInBuf(&bufTxC0))
	{
		USARTC0.DATA = bufferRead(&bufTxC0);		//this is used to send packets of data in quick bursts
	}
	else USARTC0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
     d72:	78 94       	sei
     d74:	0c c0       	rjmp	.+24     	; 0xd8e <__vector_26+0x6a>
ISR(USARTC0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxC0))
	{
		USARTC0.DATA = bufferRead(&bufTxC0);		//this is used to send packets of data in quick bursts
     d76:	8e e6       	ldi	r24, 0x6E	; 110
     d78:	93 e2       	ldi	r25, 0x23	; 35
     d7a:	36 de       	rcall	.-916    	; 0x9e8 <bufferRead>
     d7c:	80 93 a0 08 	sts	0x08A0, r24
     d80:	f8 cf       	rjmp	.-16     	; 0xd72 <__vector_26+0x4e>
	}
	else USARTC0.CTRLA &= ~USART_DREINTLVL_gm;
     d82:	80 91 a3 08 	lds	r24, 0x08A3
     d86:	8c 7f       	andi	r24, 0xFC	; 252
     d88:	80 93 a3 08 	sts	0x08A3, r24
     d8c:	f2 cf       	rjmp	.-28     	; 0xd72 <__vector_26+0x4e>
	sei();
}
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	0f 90       	pop	r0
     da8:	0b be       	out	0x3b, r0	; 59
     daa:	0f 90       	pop	r0
     dac:	09 be       	out	0x39, r0	; 57
     dae:	0f 90       	pop	r0
     db0:	08 be       	out	0x38, r0	; 56
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_29>:

ISR(USARTC1_DRE_vect)
{
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	08 b6       	in	r0, 0x38	; 56
     dc8:	0f 92       	push	r0
     dca:	18 be       	out	0x38, r1	; 56
     dcc:	09 b6       	in	r0, 0x39	; 57
     dce:	0f 92       	push	r0
     dd0:	19 be       	out	0x39, r1	; 57
     dd2:	0b b6       	in	r0, 0x3b	; 59
     dd4:	0f 92       	push	r0
     dd6:	1b be       	out	0x3b, r1	; 59
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	5f 93       	push	r21
     de0:	6f 93       	push	r22
     de2:	7f 93       	push	r23
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
	cli();
     df0:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
     df2:	20 91 e2 22 	lds	r18, 0x22E2
     df6:	30 91 e3 22 	lds	r19, 0x22E3
     dfa:	80 91 e4 22 	lds	r24, 0x22E4
     dfe:	90 91 e5 22 	lds	r25, 0x22E5
     e02:	28 17       	cp	r18, r24
     e04:	39 07       	cpc	r19, r25
     e06:	19 f4       	brne	.+6      	; 0xe0e <__vector_29+0x52>
     e08:	08 c0       	rjmp	.+16     	; 0xe1a <__vector_29+0x5e>
	if(dataInBuf(&bufTxC1))
	{
		USARTC1.DATA = bufferRead(&bufTxC1);		//this is used to send packets of data in quick bursts
	}
	else USARTC1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
     e0a:	78 94       	sei
     e0c:	0c c0       	rjmp	.+24     	; 0xe26 <__vector_29+0x6a>
ISR(USARTC1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxC1))
	{
		USARTC1.DATA = bufferRead(&bufTxC1);		//this is used to send packets of data in quick bursts
     e0e:	8e ed       	ldi	r24, 0xDE	; 222
     e10:	92 e2       	ldi	r25, 0x22	; 34
     e12:	ea dd       	rcall	.-1068   	; 0x9e8 <bufferRead>
     e14:	80 93 b0 08 	sts	0x08B0, r24
     e18:	f8 cf       	rjmp	.-16     	; 0xe0a <__vector_29+0x4e>
	}
	else USARTC1.CTRLA &= ~USART_DREINTLVL_gm;
     e1a:	80 91 b3 08 	lds	r24, 0x08B3
     e1e:	8c 7f       	andi	r24, 0xFC	; 252
     e20:	80 93 b3 08 	sts	0x08B3, r24
     e24:	f2 cf       	rjmp	.-28     	; 0xe0a <__vector_29+0x4e>
	sei();
}
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	bf 91       	pop	r27
     e2c:	af 91       	pop	r26
     e2e:	9f 91       	pop	r25
     e30:	8f 91       	pop	r24
     e32:	7f 91       	pop	r23
     e34:	6f 91       	pop	r22
     e36:	5f 91       	pop	r21
     e38:	4f 91       	pop	r20
     e3a:	3f 91       	pop	r19
     e3c:	2f 91       	pop	r18
     e3e:	0f 90       	pop	r0
     e40:	0b be       	out	0x3b, r0	; 59
     e42:	0f 90       	pop	r0
     e44:	09 be       	out	0x39, r0	; 57
     e46:	0f 90       	pop	r0
     e48:	08 be       	out	0x38, r0	; 56
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <__vector_89>:

ISR(USARTD0_DRE_vect)
{
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	08 b6       	in	r0, 0x38	; 56
     e60:	0f 92       	push	r0
     e62:	18 be       	out	0x38, r1	; 56
     e64:	09 b6       	in	r0, 0x39	; 57
     e66:	0f 92       	push	r0
     e68:	19 be       	out	0x39, r1	; 57
     e6a:	0b b6       	in	r0, 0x3b	; 59
     e6c:	0f 92       	push	r0
     e6e:	1b be       	out	0x3b, r1	; 59
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
	cli();
     e88:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
     e8a:	20 91 52 22 	lds	r18, 0x2252
     e8e:	30 91 53 22 	lds	r19, 0x2253
     e92:	80 91 54 22 	lds	r24, 0x2254
     e96:	90 91 55 22 	lds	r25, 0x2255
     e9a:	28 17       	cp	r18, r24
     e9c:	39 07       	cpc	r19, r25
     e9e:	19 f4       	brne	.+6      	; 0xea6 <__vector_89+0x52>
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <__vector_89+0x5e>
	if(dataInBuf(&bufTxD0))
	{
		USARTD0.DATA = bufferRead(&bufTxD0);		//this is used to send packets of data in quick bursts
	}
	else USARTD0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
     ea2:	78 94       	sei
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <__vector_89+0x6a>
ISR(USARTD0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxD0))
	{
		USARTD0.DATA = bufferRead(&bufTxD0);		//this is used to send packets of data in quick bursts
     ea6:	8e e4       	ldi	r24, 0x4E	; 78
     ea8:	92 e2       	ldi	r25, 0x22	; 34
     eaa:	9e dd       	rcall	.-1220   	; 0x9e8 <bufferRead>
     eac:	80 93 a0 09 	sts	0x09A0, r24
     eb0:	f8 cf       	rjmp	.-16     	; 0xea2 <__vector_89+0x4e>
	}
	else USARTD0.CTRLA &= ~USART_DREINTLVL_gm;
     eb2:	80 91 a3 09 	lds	r24, 0x09A3
     eb6:	8c 7f       	andi	r24, 0xFC	; 252
     eb8:	80 93 a3 09 	sts	0x09A3, r24
     ebc:	f2 cf       	rjmp	.-28     	; 0xea2 <__vector_89+0x4e>
	sei();
}
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0b be       	out	0x3b, r0	; 59
     eda:	0f 90       	pop	r0
     edc:	09 be       	out	0x39, r0	; 57
     ede:	0f 90       	pop	r0
     ee0:	08 be       	out	0x38, r0	; 56
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <__vector_92>:

ISR(USARTD1_DRE_vect)
{
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	08 b6       	in	r0, 0x38	; 56
     ef8:	0f 92       	push	r0
     efa:	18 be       	out	0x38, r1	; 56
     efc:	09 b6       	in	r0, 0x39	; 57
     efe:	0f 92       	push	r0
     f00:	19 be       	out	0x39, r1	; 57
     f02:	0b b6       	in	r0, 0x3b	; 59
     f04:	0f 92       	push	r0
     f06:	1b be       	out	0x3b, r1	; 59
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
	cli();
     f20:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
     f22:	20 91 c2 21 	lds	r18, 0x21C2
     f26:	30 91 c3 21 	lds	r19, 0x21C3
     f2a:	80 91 c4 21 	lds	r24, 0x21C4
     f2e:	90 91 c5 21 	lds	r25, 0x21C5
     f32:	28 17       	cp	r18, r24
     f34:	39 07       	cpc	r19, r25
     f36:	19 f4       	brne	.+6      	; 0xf3e <__vector_92+0x52>
     f38:	08 c0       	rjmp	.+16     	; 0xf4a <__vector_92+0x5e>
	if(dataInBuf(&bufTxD1))
	{
		USARTD1.DATA = bufferRead(&bufTxD1);		//this is used to send packets of data in quick bursts
	}
	else USARTD1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
     f3a:	78 94       	sei
     f3c:	0c c0       	rjmp	.+24     	; 0xf56 <__vector_92+0x6a>
ISR(USARTD1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxD1))
	{
		USARTD1.DATA = bufferRead(&bufTxD1);		//this is used to send packets of data in quick bursts
     f3e:	8e eb       	ldi	r24, 0xBE	; 190
     f40:	91 e2       	ldi	r25, 0x21	; 33
     f42:	52 dd       	rcall	.-1372   	; 0x9e8 <bufferRead>
     f44:	80 93 b0 09 	sts	0x09B0, r24
     f48:	f8 cf       	rjmp	.-16     	; 0xf3a <__vector_92+0x4e>
	}
	else USARTD1.CTRLA &= ~USART_DREINTLVL_gm;
     f4a:	80 91 b3 09 	lds	r24, 0x09B3
     f4e:	8c 7f       	andi	r24, 0xFC	; 252
     f50:	80 93 b3 09 	sts	0x09B3, r24
     f54:	f2 cf       	rjmp	.-28     	; 0xf3a <__vector_92+0x4e>
	sei();
}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0b be       	out	0x3b, r0	; 59
     f72:	0f 90       	pop	r0
     f74:	09 be       	out	0x39, r0	; 57
     f76:	0f 90       	pop	r0
     f78:	08 be       	out	0x38, r0	; 56
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_62>:

ISR(USARTE1_DRE_vect)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	08 b6       	in	r0, 0x38	; 56
     f90:	0f 92       	push	r0
     f92:	18 be       	out	0x38, r1	; 56
     f94:	09 b6       	in	r0, 0x39	; 57
     f96:	0f 92       	push	r0
     f98:	19 be       	out	0x39, r1	; 57
     f9a:	0b b6       	in	r0, 0x3b	; 59
     f9c:	0f 92       	push	r0
     f9e:	1b be       	out	0x3b, r1	; 59
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31
	cli();
     fb8:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
     fba:	20 91 32 21 	lds	r18, 0x2132
     fbe:	30 91 33 21 	lds	r19, 0x2133
     fc2:	80 91 34 21 	lds	r24, 0x2134
     fc6:	90 91 35 21 	lds	r25, 0x2135
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	19 f4       	brne	.+6      	; 0xfd6 <__vector_62+0x52>
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <__vector_62+0x5e>
	if(dataInBuf(&bufTxE1))
	{
		USARTE1.DATA = bufferRead(&bufTxE1);		//this is used to send packets of data in quick bursts
	}
	else USARTE1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
     fd2:	78 94       	sei
     fd4:	0c c0       	rjmp	.+24     	; 0xfee <__vector_62+0x6a>
ISR(USARTE1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxE1))
	{
		USARTE1.DATA = bufferRead(&bufTxE1);		//this is used to send packets of data in quick bursts
     fd6:	8e e2       	ldi	r24, 0x2E	; 46
     fd8:	91 e2       	ldi	r25, 0x21	; 33
     fda:	06 dd       	rcall	.-1524   	; 0x9e8 <bufferRead>
     fdc:	80 93 b0 0a 	sts	0x0AB0, r24
     fe0:	f8 cf       	rjmp	.-16     	; 0xfd2 <__vector_62+0x4e>
	}
	else USARTE1.CTRLA &= ~USART_DREINTLVL_gm;
     fe2:	80 91 b3 0a 	lds	r24, 0x0AB3
     fe6:	8c 7f       	andi	r24, 0xFC	; 252
     fe8:	80 93 b3 0a 	sts	0x0AB3, r24
     fec:	f2 cf       	rjmp	.-28     	; 0xfd2 <__vector_62+0x4e>
	sei();
}
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	bf 91       	pop	r27
     ff4:	af 91       	pop	r26
     ff6:	9f 91       	pop	r25
     ff8:	8f 91       	pop	r24
     ffa:	7f 91       	pop	r23
     ffc:	6f 91       	pop	r22
     ffe:	5f 91       	pop	r21
    1000:	4f 91       	pop	r20
    1002:	3f 91       	pop	r19
    1004:	2f 91       	pop	r18
    1006:	0f 90       	pop	r0
    1008:	0b be       	out	0x3b, r0	; 59
    100a:	0f 90       	pop	r0
    100c:	09 be       	out	0x39, r0	; 57
    100e:	0f 90       	pop	r0
    1010:	08 be       	out	0x38, r0	; 56
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <__vector_120>:

ISR(USARTF0_DRE_vect)
{
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	08 b6       	in	r0, 0x38	; 56
    1028:	0f 92       	push	r0
    102a:	18 be       	out	0x38, r1	; 56
    102c:	09 b6       	in	r0, 0x39	; 57
    102e:	0f 92       	push	r0
    1030:	19 be       	out	0x39, r1	; 57
    1032:	0b b6       	in	r0, 0x3b	; 59
    1034:	0f 92       	push	r0
    1036:	1b be       	out	0x3b, r1	; 59
    1038:	2f 93       	push	r18
    103a:	3f 93       	push	r19
    103c:	4f 93       	push	r20
    103e:	5f 93       	push	r21
    1040:	6f 93       	push	r22
    1042:	7f 93       	push	r23
    1044:	8f 93       	push	r24
    1046:	9f 93       	push	r25
    1048:	af 93       	push	r26
    104a:	bf 93       	push	r27
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
	cli();
    1050:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    1052:	20 91 a2 20 	lds	r18, 0x20A2
    1056:	30 91 a3 20 	lds	r19, 0x20A3
    105a:	80 91 a4 20 	lds	r24, 0x20A4
    105e:	90 91 a5 20 	lds	r25, 0x20A5
    1062:	28 17       	cp	r18, r24
    1064:	39 07       	cpc	r19, r25
    1066:	19 f4       	brne	.+6      	; 0x106e <__vector_120+0x52>
    1068:	08 c0       	rjmp	.+16     	; 0x107a <__vector_120+0x5e>
	if(dataInBuf(&bufTxF0))
	{
		USARTF0.DATA = bufferRead(&bufTxF0);		//this is used to send packets of data in quick bursts
	}
	else USARTF0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    106a:	78 94       	sei
    106c:	0c c0       	rjmp	.+24     	; 0x1086 <__vector_120+0x6a>
ISR(USARTF0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxF0))
	{
		USARTF0.DATA = bufferRead(&bufTxF0);		//this is used to send packets of data in quick bursts
    106e:	8e e9       	ldi	r24, 0x9E	; 158
    1070:	90 e2       	ldi	r25, 0x20	; 32
    1072:	ba dc       	rcall	.-1676   	; 0x9e8 <bufferRead>
    1074:	80 93 a0 0b 	sts	0x0BA0, r24
    1078:	f8 cf       	rjmp	.-16     	; 0x106a <__vector_120+0x4e>
	}
	else USARTF0.CTRLA &= ~USART_DREINTLVL_gm;
    107a:	80 91 a3 0b 	lds	r24, 0x0BA3
    107e:	8c 7f       	andi	r24, 0xFC	; 252
    1080:	80 93 a3 0b 	sts	0x0BA3, r24
    1084:	f2 cf       	rjmp	.-28     	; 0x106a <__vector_120+0x4e>
	sei();
}
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	0f 90       	pop	r0
    10a0:	0b be       	out	0x3b, r0	; 59
    10a2:	0f 90       	pop	r0
    10a4:	09 be       	out	0x39, r0	; 57
    10a6:	0f 90       	pop	r0
    10a8:	08 be       	out	0x38, r0	; 56
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <__vector_123>:

ISR(USARTF1_DRE_vect)
{
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	08 b6       	in	r0, 0x38	; 56
    10c0:	0f 92       	push	r0
    10c2:	18 be       	out	0x38, r1	; 56
    10c4:	09 b6       	in	r0, 0x39	; 57
    10c6:	0f 92       	push	r0
    10c8:	19 be       	out	0x39, r1	; 57
    10ca:	0b b6       	in	r0, 0x3b	; 59
    10cc:	0f 92       	push	r0
    10ce:	1b be       	out	0x3b, r1	; 59
    10d0:	2f 93       	push	r18
    10d2:	3f 93       	push	r19
    10d4:	4f 93       	push	r20
    10d6:	5f 93       	push	r21
    10d8:	6f 93       	push	r22
    10da:	7f 93       	push	r23
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    10e0:	af 93       	push	r26
    10e2:	bf 93       	push	r27
    10e4:	ef 93       	push	r30
    10e6:	ff 93       	push	r31
	cli();
    10e8:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    10ea:	20 91 12 20 	lds	r18, 0x2012
    10ee:	30 91 13 20 	lds	r19, 0x2013
    10f2:	80 91 14 20 	lds	r24, 0x2014
    10f6:	90 91 15 20 	lds	r25, 0x2015
    10fa:	28 17       	cp	r18, r24
    10fc:	39 07       	cpc	r19, r25
    10fe:	19 f4       	brne	.+6      	; 0x1106 <__vector_123+0x52>
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <__vector_123+0x5e>
	if(dataInBuf(&bufTxF1))
	{
		USARTF1.DATA = bufferRead(&bufTxF1);		//this is used to send packets of data in quick bursts
	}
	else USARTF1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    1102:	78 94       	sei
    1104:	0c c0       	rjmp	.+24     	; 0x111e <__vector_123+0x6a>
ISR(USARTF1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxF1))
	{
		USARTF1.DATA = bufferRead(&bufTxF1);		//this is used to send packets of data in quick bursts
    1106:	8e e0       	ldi	r24, 0x0E	; 14
    1108:	90 e2       	ldi	r25, 0x20	; 32
    110a:	6e dc       	rcall	.-1828   	; 0x9e8 <bufferRead>
    110c:	80 93 b0 0b 	sts	0x0BB0, r24
    1110:	f8 cf       	rjmp	.-16     	; 0x1102 <__vector_123+0x4e>
	}
	else USARTF1.CTRLA &= ~USART_DREINTLVL_gm;
    1112:	80 91 b3 0b 	lds	r24, 0x0BB3
    1116:	8c 7f       	andi	r24, 0xFC	; 252
    1118:	80 93 b3 0b 	sts	0x0BB3, r24
    111c:	f2 cf       	rjmp	.-28     	; 0x1102 <__vector_123+0x4e>
	sei();
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0b be       	out	0x3b, r0	; 59
    113a:	0f 90       	pop	r0
    113c:	09 be       	out	0x39, r0	; 57
    113e:	0f 90       	pop	r0
    1140:	08 be       	out	0x38, r0	; 56
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <vfprintf>:
    114c:	2f 92       	push	r2
    114e:	3f 92       	push	r3
    1150:	4f 92       	push	r4
    1152:	5f 92       	push	r5
    1154:	6f 92       	push	r6
    1156:	7f 92       	push	r7
    1158:	8f 92       	push	r8
    115a:	9f 92       	push	r9
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	62 97       	sbiw	r28, 0x12	; 18
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	7c 01       	movw	r14, r24
    117c:	1b 01       	movw	r2, r22
    117e:	6a 01       	movw	r12, r20
    1180:	fc 01       	movw	r30, r24
    1182:	16 82       	std	Z+6, r1	; 0x06
    1184:	17 82       	std	Z+7, r1	; 0x07
    1186:	83 81       	ldd	r24, Z+3	; 0x03
    1188:	81 fd       	sbrc	r24, 1
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <vfprintf+0x46>
    118c:	4e c3       	rjmp	.+1692   	; 0x182a <vfprintf+0x6de>
    118e:	65 01       	movw	r12, r10
    1190:	05 c0       	rjmp	.+10     	; 0x119c <vfprintf+0x50>
    1192:	88 24       	eor	r8, r8
    1194:	83 94       	inc	r8
    1196:	91 2c       	mov	r9, r1
    1198:	8c 0e       	add	r8, r28
    119a:	9d 1e       	adc	r9, r29
    119c:	f7 01       	movw	r30, r14
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	f1 01       	movw	r30, r2
    11a2:	93 fd       	sbrc	r25, 3
    11a4:	85 91       	lpm	r24, Z+
    11a6:	93 ff       	sbrs	r25, 3
    11a8:	81 91       	ld	r24, Z+
    11aa:	1f 01       	movw	r2, r30
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <vfprintf+0x66>
    11b0:	38 c3       	rjmp	.+1648   	; 0x1822 <vfprintf+0x6d6>
    11b2:	85 32       	cpi	r24, 0x25	; 37
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <vfprintf+0x78>
    11b6:	93 fd       	sbrc	r25, 3
    11b8:	85 91       	lpm	r24, Z+
    11ba:	93 ff       	sbrs	r25, 3
    11bc:	81 91       	ld	r24, Z+
    11be:	1f 01       	movw	r2, r30
    11c0:	85 32       	cpi	r24, 0x25	; 37
    11c2:	29 f4       	brne	.+10     	; 0x11ce <vfprintf+0x82>
    11c4:	b7 01       	movw	r22, r14
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	46 d4       	rcall	.+2188   	; 0x1a56 <fputc>
    11ca:	56 01       	movw	r10, r12
    11cc:	e0 cf       	rjmp	.-64     	; 0x118e <vfprintf+0x42>
    11ce:	71 2c       	mov	r7, r1
    11d0:	61 2c       	mov	r6, r1
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	20 32       	cpi	r18, 0x20	; 32
    11d6:	a8 f4       	brcc	.+42     	; 0x1202 <vfprintf+0xb6>
    11d8:	8b 32       	cpi	r24, 0x2B	; 43
    11da:	61 f0       	breq	.+24     	; 0x11f4 <vfprintf+0xa8>
    11dc:	28 f4       	brcc	.+10     	; 0x11e8 <vfprintf+0x9c>
    11de:	80 32       	cpi	r24, 0x20	; 32
    11e0:	51 f0       	breq	.+20     	; 0x11f6 <vfprintf+0xaa>
    11e2:	83 32       	cpi	r24, 0x23	; 35
    11e4:	71 f4       	brne	.+28     	; 0x1202 <vfprintf+0xb6>
    11e6:	0b c0       	rjmp	.+22     	; 0x11fe <vfprintf+0xb2>
    11e8:	8d 32       	cpi	r24, 0x2D	; 45
    11ea:	39 f0       	breq	.+14     	; 0x11fa <vfprintf+0xae>
    11ec:	80 33       	cpi	r24, 0x30	; 48
    11ee:	49 f4       	brne	.+18     	; 0x1202 <vfprintf+0xb6>
    11f0:	21 60       	ori	r18, 0x01	; 1
    11f2:	28 c0       	rjmp	.+80     	; 0x1244 <vfprintf+0xf8>
    11f4:	22 60       	ori	r18, 0x02	; 2
    11f6:	24 60       	ori	r18, 0x04	; 4
    11f8:	25 c0       	rjmp	.+74     	; 0x1244 <vfprintf+0xf8>
    11fa:	28 60       	ori	r18, 0x08	; 8
    11fc:	23 c0       	rjmp	.+70     	; 0x1244 <vfprintf+0xf8>
    11fe:	20 61       	ori	r18, 0x10	; 16
    1200:	21 c0       	rjmp	.+66     	; 0x1244 <vfprintf+0xf8>
    1202:	27 fd       	sbrc	r18, 7
    1204:	27 c0       	rjmp	.+78     	; 0x1254 <vfprintf+0x108>
    1206:	38 2f       	mov	r19, r24
    1208:	30 53       	subi	r19, 0x30	; 48
    120a:	3a 30       	cpi	r19, 0x0A	; 10
    120c:	78 f4       	brcc	.+30     	; 0x122c <vfprintf+0xe0>
    120e:	26 ff       	sbrs	r18, 6
    1210:	06 c0       	rjmp	.+12     	; 0x121e <vfprintf+0xd2>
    1212:	fa e0       	ldi	r31, 0x0A	; 10
    1214:	7f 9e       	mul	r7, r31
    1216:	30 0d       	add	r19, r0
    1218:	11 24       	eor	r1, r1
    121a:	73 2e       	mov	r7, r19
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <vfprintf+0xf8>
    121e:	4a e0       	ldi	r20, 0x0A	; 10
    1220:	64 9e       	mul	r6, r20
    1222:	30 0d       	add	r19, r0
    1224:	11 24       	eor	r1, r1
    1226:	63 2e       	mov	r6, r19
    1228:	20 62       	ori	r18, 0x20	; 32
    122a:	0c c0       	rjmp	.+24     	; 0x1244 <vfprintf+0xf8>
    122c:	8e 32       	cpi	r24, 0x2E	; 46
    122e:	21 f4       	brne	.+8      	; 0x1238 <vfprintf+0xec>
    1230:	26 fd       	sbrc	r18, 6
    1232:	f7 c2       	rjmp	.+1518   	; 0x1822 <vfprintf+0x6d6>
    1234:	20 64       	ori	r18, 0x40	; 64
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <vfprintf+0xf8>
    1238:	8c 36       	cpi	r24, 0x6C	; 108
    123a:	11 f4       	brne	.+4      	; 0x1240 <vfprintf+0xf4>
    123c:	20 68       	ori	r18, 0x80	; 128
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <vfprintf+0xf8>
    1240:	88 36       	cpi	r24, 0x68	; 104
    1242:	41 f4       	brne	.+16     	; 0x1254 <vfprintf+0x108>
    1244:	f1 01       	movw	r30, r2
    1246:	93 fd       	sbrc	r25, 3
    1248:	85 91       	lpm	r24, Z+
    124a:	93 ff       	sbrs	r25, 3
    124c:	81 91       	ld	r24, Z+
    124e:	1f 01       	movw	r2, r30
    1250:	81 11       	cpse	r24, r1
    1252:	c0 cf       	rjmp	.-128    	; 0x11d4 <vfprintf+0x88>
    1254:	98 2f       	mov	r25, r24
    1256:	95 54       	subi	r25, 0x45	; 69
    1258:	93 30       	cpi	r25, 0x03	; 3
    125a:	18 f4       	brcc	.+6      	; 0x1262 <vfprintf+0x116>
    125c:	20 61       	ori	r18, 0x10	; 16
    125e:	80 5e       	subi	r24, 0xE0	; 224
    1260:	06 c0       	rjmp	.+12     	; 0x126e <vfprintf+0x122>
    1262:	98 2f       	mov	r25, r24
    1264:	95 56       	subi	r25, 0x65	; 101
    1266:	93 30       	cpi	r25, 0x03	; 3
    1268:	08 f0       	brcs	.+2      	; 0x126c <vfprintf+0x120>
    126a:	94 c1       	rjmp	.+808    	; 0x1594 <vfprintf+0x448>
    126c:	2f 7e       	andi	r18, 0xEF	; 239
    126e:	26 fd       	sbrc	r18, 6
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <vfprintf+0x12a>
    1272:	16 e0       	ldi	r17, 0x06	; 6
    1274:	71 2e       	mov	r7, r17
    1276:	bf e3       	ldi	r27, 0x3F	; 63
    1278:	5b 2e       	mov	r5, r27
    127a:	52 22       	and	r5, r18
    127c:	85 36       	cpi	r24, 0x65	; 101
    127e:	19 f4       	brne	.+6      	; 0x1286 <vfprintf+0x13a>
    1280:	f0 e4       	ldi	r31, 0x40	; 64
    1282:	5f 2a       	or	r5, r31
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <vfprintf+0x148>
    1286:	86 36       	cpi	r24, 0x66	; 102
    1288:	19 f4       	brne	.+6      	; 0x1290 <vfprintf+0x144>
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	54 2a       	or	r5, r20
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <vfprintf+0x148>
    1290:	71 10       	cpse	r7, r1
    1292:	7a 94       	dec	r7
    1294:	57 fe       	sbrs	r5, 7
    1296:	07 c0       	rjmp	.+14     	; 0x12a6 <vfprintf+0x15a>
    1298:	5b e3       	ldi	r21, 0x3B	; 59
    129a:	57 15       	cp	r21, r7
    129c:	48 f0       	brcs	.+18     	; 0x12b0 <vfprintf+0x164>
    129e:	47 2c       	mov	r4, r7
    12a0:	43 94       	inc	r4
    12a2:	27 e0       	ldi	r18, 0x07	; 7
    12a4:	0d c0       	rjmp	.+26     	; 0x12c0 <vfprintf+0x174>
    12a6:	87 e0       	ldi	r24, 0x07	; 7
    12a8:	87 15       	cp	r24, r7
    12aa:	30 f0       	brcs	.+12     	; 0x12b8 <vfprintf+0x16c>
    12ac:	27 2d       	mov	r18, r7
    12ae:	07 c0       	rjmp	.+14     	; 0x12be <vfprintf+0x172>
    12b0:	27 e0       	ldi	r18, 0x07	; 7
    12b2:	ac e3       	ldi	r26, 0x3C	; 60
    12b4:	4a 2e       	mov	r4, r26
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <vfprintf+0x174>
    12b8:	27 e0       	ldi	r18, 0x07	; 7
    12ba:	f7 e0       	ldi	r31, 0x07	; 7
    12bc:	7f 2e       	mov	r7, r31
    12be:	41 2c       	mov	r4, r1
    12c0:	56 01       	movw	r10, r12
    12c2:	94 e0       	ldi	r25, 0x04	; 4
    12c4:	a9 0e       	add	r10, r25
    12c6:	b1 1c       	adc	r11, r1
    12c8:	f6 01       	movw	r30, r12
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	04 2d       	mov	r16, r4
    12d4:	a4 01       	movw	r20, r8
    12d6:	c2 d2       	rcall	.+1412   	; 0x185c <__ftoa_engine>
    12d8:	8c 01       	movw	r16, r24
    12da:	49 81       	ldd	r20, Y+1	; 0x01
    12dc:	4c 87       	std	Y+12, r20	; 0x0c
    12de:	40 ff       	sbrs	r20, 0
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <vfprintf+0x19a>
    12e2:	43 ff       	sbrs	r20, 3
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <vfprintf+0x1a8>
    12e6:	51 fc       	sbrc	r5, 1
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <vfprintf+0x1ae>
    12ea:	52 fe       	sbrs	r5, 2
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <vfprintf+0x1b4>
    12ee:	e0 e2       	ldi	r30, 0x20	; 32
    12f0:	de 2e       	mov	r13, r30
    12f2:	07 c0       	rjmp	.+14     	; 0x1302 <vfprintf+0x1b6>
    12f4:	7d e2       	ldi	r23, 0x2D	; 45
    12f6:	d7 2e       	mov	r13, r23
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <vfprintf+0x1b6>
    12fa:	6b e2       	ldi	r22, 0x2B	; 43
    12fc:	d6 2e       	mov	r13, r22
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <vfprintf+0x1b6>
    1300:	d1 2c       	mov	r13, r1
    1302:	8c 85       	ldd	r24, Y+12	; 0x0c
    1304:	8c 70       	andi	r24, 0x0C	; 12
    1306:	89 f1       	breq	.+98     	; 0x136a <vfprintf+0x21e>
    1308:	dd 20       	and	r13, r13
    130a:	11 f0       	breq	.+4      	; 0x1310 <vfprintf+0x1c4>
    130c:	84 e0       	ldi	r24, 0x04	; 4
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <vfprintf+0x1c6>
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	86 15       	cp	r24, r6
    1314:	10 f0       	brcs	.+4      	; 0x131a <vfprintf+0x1ce>
    1316:	61 2c       	mov	r6, r1
    1318:	0a c0       	rjmp	.+20     	; 0x132e <vfprintf+0x1e2>
    131a:	68 1a       	sub	r6, r24
    131c:	53 fc       	sbrc	r5, 3
    131e:	07 c0       	rjmp	.+14     	; 0x132e <vfprintf+0x1e2>
    1320:	b7 01       	movw	r22, r14
    1322:	80 e2       	ldi	r24, 0x20	; 32
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	97 d3       	rcall	.+1838   	; 0x1a56 <fputc>
    1328:	6a 94       	dec	r6
    132a:	d1 f7       	brne	.-12     	; 0x1320 <vfprintf+0x1d4>
    132c:	f4 cf       	rjmp	.-24     	; 0x1316 <vfprintf+0x1ca>
    132e:	dd 20       	and	r13, r13
    1330:	21 f0       	breq	.+8      	; 0x133a <vfprintf+0x1ee>
    1332:	b7 01       	movw	r22, r14
    1334:	8d 2d       	mov	r24, r13
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	8e d3       	rcall	.+1820   	; 0x1a56 <fputc>
    133a:	5c 85       	ldd	r21, Y+12	; 0x0c
    133c:	53 fd       	sbrc	r21, 3
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <vfprintf+0x1fa>
    1340:	00 e0       	ldi	r16, 0x00	; 0
    1342:	12 e0       	ldi	r17, 0x02	; 2
    1344:	0b c0       	rjmp	.+22     	; 0x135c <vfprintf+0x210>
    1346:	0c ef       	ldi	r16, 0xFC	; 252
    1348:	11 e0       	ldi	r17, 0x01	; 1
    134a:	08 c0       	rjmp	.+16     	; 0x135c <vfprintf+0x210>
    134c:	51 10       	cpse	r5, r1
    134e:	80 52       	subi	r24, 0x20	; 32
    1350:	b7 01       	movw	r22, r14
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	80 d3       	rcall	.+1792   	; 0x1a56 <fputc>
    1356:	0f 5f       	subi	r16, 0xFF	; 255
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <vfprintf+0x214>
    135c:	80 e1       	ldi	r24, 0x10	; 16
    135e:	58 22       	and	r5, r24
    1360:	f8 01       	movw	r30, r16
    1362:	84 91       	lpm	r24, Z
    1364:	81 11       	cpse	r24, r1
    1366:	f2 cf       	rjmp	.-28     	; 0x134c <vfprintf+0x200>
    1368:	59 c2       	rjmp	.+1202   	; 0x181c <vfprintf+0x6d0>
    136a:	57 fe       	sbrs	r5, 7
    136c:	0e c0       	rjmp	.+28     	; 0x138a <vfprintf+0x23e>
    136e:	40 0e       	add	r4, r16
    1370:	4c 85       	ldd	r20, Y+12	; 0x0c
    1372:	44 ff       	sbrs	r20, 4
    1374:	04 c0       	rjmp	.+8      	; 0x137e <vfprintf+0x232>
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	81 33       	cpi	r24, 0x31	; 49
    137a:	09 f4       	brne	.+2      	; 0x137e <vfprintf+0x232>
    137c:	4a 94       	dec	r4
    137e:	14 14       	cp	r1, r4
    1380:	4c f5       	brge	.+82     	; 0x13d4 <vfprintf+0x288>
    1382:	58 e0       	ldi	r21, 0x08	; 8
    1384:	54 15       	cp	r21, r4
    1386:	48 f1       	brcs	.+82     	; 0x13da <vfprintf+0x28e>
    1388:	2c c0       	rjmp	.+88     	; 0x13e2 <vfprintf+0x296>
    138a:	56 fc       	sbrc	r5, 6
    138c:	2a c0       	rjmp	.+84     	; 0x13e2 <vfprintf+0x296>
    138e:	87 2d       	mov	r24, r7
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	80 17       	cp	r24, r16
    1394:	91 07       	cpc	r25, r17
    1396:	44 f0       	brlt	.+16     	; 0x13a8 <vfprintf+0x25c>
    1398:	0c 3f       	cpi	r16, 0xFC	; 252
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	18 07       	cpc	r17, r24
    139e:	24 f0       	brlt	.+8      	; 0x13a8 <vfprintf+0x25c>
    13a0:	90 e8       	ldi	r25, 0x80	; 128
    13a2:	59 2a       	or	r5, r25
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <vfprintf+0x25c>
    13a6:	7a 94       	dec	r7
    13a8:	77 20       	and	r7, r7
    13aa:	49 f0       	breq	.+18     	; 0x13be <vfprintf+0x272>
    13ac:	e2 e0       	ldi	r30, 0x02	; 2
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	ec 0f       	add	r30, r28
    13b2:	fd 1f       	adc	r31, r29
    13b4:	e7 0d       	add	r30, r7
    13b6:	f1 1d       	adc	r31, r1
    13b8:	80 81       	ld	r24, Z
    13ba:	80 33       	cpi	r24, 0x30	; 48
    13bc:	a1 f3       	breq	.-24     	; 0x13a6 <vfprintf+0x25a>
    13be:	57 fe       	sbrs	r5, 7
    13c0:	10 c0       	rjmp	.+32     	; 0x13e2 <vfprintf+0x296>
    13c2:	47 2c       	mov	r4, r7
    13c4:	43 94       	inc	r4
    13c6:	87 2d       	mov	r24, r7
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	08 17       	cp	r16, r24
    13cc:	19 07       	cpc	r17, r25
    13ce:	44 f4       	brge	.+16     	; 0x13e0 <vfprintf+0x294>
    13d0:	70 1a       	sub	r7, r16
    13d2:	07 c0       	rjmp	.+14     	; 0x13e2 <vfprintf+0x296>
    13d4:	44 24       	eor	r4, r4
    13d6:	43 94       	inc	r4
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <vfprintf+0x296>
    13da:	58 e0       	ldi	r21, 0x08	; 8
    13dc:	45 2e       	mov	r4, r21
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <vfprintf+0x296>
    13e0:	71 2c       	mov	r7, r1
    13e2:	57 fe       	sbrs	r5, 7
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <vfprintf+0x2a8>
    13e6:	10 16       	cp	r1, r16
    13e8:	11 06       	cpc	r1, r17
    13ea:	3c f4       	brge	.+14     	; 0x13fa <vfprintf+0x2ae>
    13ec:	98 01       	movw	r18, r16
    13ee:	2f 5f       	subi	r18, 0xFF	; 255
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <vfprintf+0x2b2>
    13f4:	25 e0       	ldi	r18, 0x05	; 5
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <vfprintf+0x2b2>
    13fa:	21 e0       	ldi	r18, 0x01	; 1
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	dd 20       	and	r13, r13
    1400:	11 f0       	breq	.+4      	; 0x1406 <vfprintf+0x2ba>
    1402:	2f 5f       	subi	r18, 0xFF	; 255
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	77 20       	and	r7, r7
    1408:	31 f0       	breq	.+12     	; 0x1416 <vfprintf+0x2ca>
    140a:	47 2d       	mov	r20, r7
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	4f 5f       	subi	r20, 0xFF	; 255
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	24 0f       	add	r18, r20
    1414:	35 1f       	adc	r19, r21
    1416:	46 2d       	mov	r20, r6
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	24 17       	cp	r18, r20
    141c:	35 07       	cpc	r19, r21
    141e:	14 f4       	brge	.+4      	; 0x1424 <vfprintf+0x2d8>
    1420:	62 1a       	sub	r6, r18
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <vfprintf+0x2da>
    1424:	61 2c       	mov	r6, r1
    1426:	85 2d       	mov	r24, r5
    1428:	89 70       	andi	r24, 0x09	; 9
    142a:	41 f4       	brne	.+16     	; 0x143c <vfprintf+0x2f0>
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <vfprintf+0x2ec>
    142e:	b7 01       	movw	r22, r14
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	10 d3       	rcall	.+1568   	; 0x1a56 <fputc>
    1436:	6a 94       	dec	r6
    1438:	61 10       	cpse	r6, r1
    143a:	f9 cf       	rjmp	.-14     	; 0x142e <vfprintf+0x2e2>
    143c:	dd 20       	and	r13, r13
    143e:	21 f0       	breq	.+8      	; 0x1448 <vfprintf+0x2fc>
    1440:	b7 01       	movw	r22, r14
    1442:	8d 2d       	mov	r24, r13
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	07 d3       	rcall	.+1550   	; 0x1a56 <fputc>
    1448:	53 fc       	sbrc	r5, 3
    144a:	08 c0       	rjmp	.+16     	; 0x145c <vfprintf+0x310>
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <vfprintf+0x30c>
    144e:	b7 01       	movw	r22, r14
    1450:	80 e3       	ldi	r24, 0x30	; 48
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	00 d3       	rcall	.+1536   	; 0x1a56 <fputc>
    1456:	6a 94       	dec	r6
    1458:	61 10       	cpse	r6, r1
    145a:	f9 cf       	rjmp	.-14     	; 0x144e <vfprintf+0x302>
    145c:	57 fe       	sbrs	r5, 7
    145e:	54 c0       	rjmp	.+168    	; 0x1508 <vfprintf+0x3bc>
    1460:	68 01       	movw	r12, r16
    1462:	17 ff       	sbrs	r17, 7
    1464:	02 c0       	rjmp	.+4      	; 0x146a <vfprintf+0x31e>
    1466:	c1 2c       	mov	r12, r1
    1468:	d1 2c       	mov	r13, r1
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	a8 01       	movw	r20, r16
    1470:	44 19       	sub	r20, r4
    1472:	51 09       	sbc	r21, r1
    1474:	4d 87       	std	Y+13, r20	; 0x0d
    1476:	5e 87       	std	Y+14, r21	; 0x0e
    1478:	28 01       	movw	r4, r16
    147a:	4c 18       	sub	r4, r12
    147c:	5d 08       	sbc	r5, r13
    147e:	48 0c       	add	r4, r8
    1480:	59 1c       	adc	r5, r9
    1482:	87 2d       	mov	r24, r7
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	44 27       	eor	r20, r20
    1488:	55 27       	eor	r21, r21
    148a:	48 1b       	sub	r20, r24
    148c:	59 0b       	sbc	r21, r25
    148e:	4f 87       	std	Y+15, r20	; 0x0f
    1490:	58 8b       	std	Y+16, r21	; 0x10
    1492:	5f ef       	ldi	r21, 0xFF	; 255
    1494:	c5 16       	cp	r12, r21
    1496:	d5 06       	cpc	r13, r21
    1498:	41 f4       	brne	.+16     	; 0x14aa <vfprintf+0x35e>
    149a:	b7 01       	movw	r22, r14
    149c:	8e e2       	ldi	r24, 0x2E	; 46
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	2a 8b       	std	Y+18, r18	; 0x12
    14a2:	39 8b       	std	Y+17, r19	; 0x11
    14a4:	d8 d2       	rcall	.+1456   	; 0x1a56 <fputc>
    14a6:	39 89       	ldd	r19, Y+17	; 0x11
    14a8:	2a 89       	ldd	r18, Y+18	; 0x12
    14aa:	0c 15       	cp	r16, r12
    14ac:	1d 05       	cpc	r17, r13
    14ae:	54 f0       	brlt	.+20     	; 0x14c4 <vfprintf+0x378>
    14b0:	4d 85       	ldd	r20, Y+13	; 0x0d
    14b2:	5e 85       	ldd	r21, Y+14	; 0x0e
    14b4:	4c 15       	cp	r20, r12
    14b6:	5d 05       	cpc	r21, r13
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <vfprintf+0x378>
    14ba:	f2 01       	movw	r30, r4
    14bc:	e2 0f       	add	r30, r18
    14be:	f3 1f       	adc	r31, r19
    14c0:	81 81       	ldd	r24, Z+1	; 0x01
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <vfprintf+0x37a>
    14c4:	80 e3       	ldi	r24, 0x30	; 48
    14c6:	51 e0       	ldi	r21, 0x01	; 1
    14c8:	c5 1a       	sub	r12, r21
    14ca:	d1 08       	sbc	r13, r1
    14cc:	2f 5f       	subi	r18, 0xFF	; 255
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	4f 85       	ldd	r20, Y+15	; 0x0f
    14d2:	58 89       	ldd	r21, Y+16	; 0x10
    14d4:	c4 16       	cp	r12, r20
    14d6:	d5 06       	cpc	r13, r21
    14d8:	44 f0       	brlt	.+16     	; 0x14ea <vfprintf+0x39e>
    14da:	b7 01       	movw	r22, r14
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	2a 8b       	std	Y+18, r18	; 0x12
    14e0:	39 8b       	std	Y+17, r19	; 0x11
    14e2:	b9 d2       	rcall	.+1394   	; 0x1a56 <fputc>
    14e4:	2a 89       	ldd	r18, Y+18	; 0x12
    14e6:	39 89       	ldd	r19, Y+17	; 0x11
    14e8:	d4 cf       	rjmp	.-88     	; 0x1492 <vfprintf+0x346>
    14ea:	c0 16       	cp	r12, r16
    14ec:	d1 06       	cpc	r13, r17
    14ee:	49 f4       	brne	.+18     	; 0x1502 <vfprintf+0x3b6>
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	96 33       	cpi	r25, 0x36	; 54
    14f4:	28 f4       	brcc	.+10     	; 0x1500 <vfprintf+0x3b4>
    14f6:	95 33       	cpi	r25, 0x35	; 53
    14f8:	21 f4       	brne	.+8      	; 0x1502 <vfprintf+0x3b6>
    14fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    14fc:	54 fd       	sbrc	r21, 4
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <vfprintf+0x3b6>
    1500:	81 e3       	ldi	r24, 0x31	; 49
    1502:	b7 01       	movw	r22, r14
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	44 c0       	rjmp	.+136    	; 0x1590 <vfprintf+0x444>
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	81 33       	cpi	r24, 0x31	; 49
    150c:	19 f0       	breq	.+6      	; 0x1514 <vfprintf+0x3c8>
    150e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1510:	4f 7e       	andi	r20, 0xEF	; 239
    1512:	4c 87       	std	Y+12, r20	; 0x0c
    1514:	b7 01       	movw	r22, r14
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9e d2       	rcall	.+1340   	; 0x1a56 <fputc>
    151a:	71 10       	cpse	r7, r1
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <vfprintf+0x3dc>
    151e:	54 fe       	sbrs	r5, 4
    1520:	14 c0       	rjmp	.+40     	; 0x154a <vfprintf+0x3fe>
    1522:	85 e4       	ldi	r24, 0x45	; 69
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	13 c0       	rjmp	.+38     	; 0x154e <vfprintf+0x402>
    1528:	b7 01       	movw	r22, r14
    152a:	8e e2       	ldi	r24, 0x2E	; 46
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	93 d2       	rcall	.+1318   	; 0x1a56 <fputc>
    1530:	42 e0       	ldi	r20, 0x02	; 2
    1532:	d4 2e       	mov	r13, r20
    1534:	f4 01       	movw	r30, r8
    1536:	ed 0d       	add	r30, r13
    1538:	f1 1d       	adc	r31, r1
    153a:	d3 94       	inc	r13
    153c:	b7 01       	movw	r22, r14
    153e:	80 81       	ld	r24, Z
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	89 d2       	rcall	.+1298   	; 0x1a56 <fputc>
    1544:	7a 94       	dec	r7
    1546:	b1 f7       	brne	.-20     	; 0x1534 <vfprintf+0x3e8>
    1548:	ea cf       	rjmp	.-44     	; 0x151e <vfprintf+0x3d2>
    154a:	85 e6       	ldi	r24, 0x65	; 101
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	b7 01       	movw	r22, r14
    1550:	82 d2       	rcall	.+1284   	; 0x1a56 <fputc>
    1552:	17 fd       	sbrc	r17, 7
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <vfprintf+0x416>
    1556:	01 15       	cp	r16, r1
    1558:	11 05       	cpc	r17, r1
    155a:	41 f4       	brne	.+16     	; 0x156c <vfprintf+0x420>
    155c:	5c 85       	ldd	r21, Y+12	; 0x0c
    155e:	54 ff       	sbrs	r21, 4
    1560:	05 c0       	rjmp	.+10     	; 0x156c <vfprintf+0x420>
    1562:	11 95       	neg	r17
    1564:	01 95       	neg	r16
    1566:	11 09       	sbc	r17, r1
    1568:	8d e2       	ldi	r24, 0x2D	; 45
    156a:	01 c0       	rjmp	.+2      	; 0x156e <vfprintf+0x422>
    156c:	8b e2       	ldi	r24, 0x2B	; 43
    156e:	b7 01       	movw	r22, r14
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	71 d2       	rcall	.+1250   	; 0x1a56 <fputc>
    1574:	80 e3       	ldi	r24, 0x30	; 48
    1576:	03 c0       	rjmp	.+6      	; 0x157e <vfprintf+0x432>
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	0a 50       	subi	r16, 0x0A	; 10
    157c:	11 09       	sbc	r17, r1
    157e:	0a 30       	cpi	r16, 0x0A	; 10
    1580:	11 05       	cpc	r17, r1
    1582:	d4 f7       	brge	.-12     	; 0x1578 <vfprintf+0x42c>
    1584:	b7 01       	movw	r22, r14
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	66 d2       	rcall	.+1228   	; 0x1a56 <fputc>
    158a:	b7 01       	movw	r22, r14
    158c:	c8 01       	movw	r24, r16
    158e:	c0 96       	adiw	r24, 0x30	; 48
    1590:	62 d2       	rcall	.+1220   	; 0x1a56 <fputc>
    1592:	44 c1       	rjmp	.+648    	; 0x181c <vfprintf+0x6d0>
    1594:	83 36       	cpi	r24, 0x63	; 99
    1596:	31 f0       	breq	.+12     	; 0x15a4 <vfprintf+0x458>
    1598:	83 37       	cpi	r24, 0x73	; 115
    159a:	81 f0       	breq	.+32     	; 0x15bc <vfprintf+0x470>
    159c:	83 35       	cpi	r24, 0x53	; 83
    159e:	09 f0       	breq	.+2      	; 0x15a2 <vfprintf+0x456>
    15a0:	5a c0       	rjmp	.+180    	; 0x1656 <vfprintf+0x50a>
    15a2:	23 c0       	rjmp	.+70     	; 0x15ea <vfprintf+0x49e>
    15a4:	56 01       	movw	r10, r12
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	a8 0e       	add	r10, r24
    15aa:	b1 1c       	adc	r11, r1
    15ac:	f6 01       	movw	r30, r12
    15ae:	80 81       	ld	r24, Z
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	cc 24       	eor	r12, r12
    15b4:	c3 94       	inc	r12
    15b6:	d1 2c       	mov	r13, r1
    15b8:	84 01       	movw	r16, r8
    15ba:	13 c0       	rjmp	.+38     	; 0x15e2 <vfprintf+0x496>
    15bc:	56 01       	movw	r10, r12
    15be:	f2 e0       	ldi	r31, 0x02	; 2
    15c0:	af 0e       	add	r10, r31
    15c2:	b1 1c       	adc	r11, r1
    15c4:	f6 01       	movw	r30, r12
    15c6:	00 81       	ld	r16, Z
    15c8:	11 81       	ldd	r17, Z+1	; 0x01
    15ca:	26 ff       	sbrs	r18, 6
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <vfprintf+0x488>
    15ce:	67 2d       	mov	r22, r7
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <vfprintf+0x48c>
    15d4:	6f ef       	ldi	r22, 0xFF	; 255
    15d6:	7f ef       	ldi	r23, 0xFF	; 255
    15d8:	c8 01       	movw	r24, r16
    15da:	2a 8b       	std	Y+18, r18	; 0x12
    15dc:	22 d2       	rcall	.+1092   	; 0x1a22 <strnlen>
    15de:	6c 01       	movw	r12, r24
    15e0:	2a 89       	ldd	r18, Y+18	; 0x12
    15e2:	9f e7       	ldi	r25, 0x7F	; 127
    15e4:	59 2e       	mov	r5, r25
    15e6:	52 22       	and	r5, r18
    15e8:	16 c0       	rjmp	.+44     	; 0x1616 <vfprintf+0x4ca>
    15ea:	56 01       	movw	r10, r12
    15ec:	f2 e0       	ldi	r31, 0x02	; 2
    15ee:	af 0e       	add	r10, r31
    15f0:	b1 1c       	adc	r11, r1
    15f2:	f6 01       	movw	r30, r12
    15f4:	00 81       	ld	r16, Z
    15f6:	11 81       	ldd	r17, Z+1	; 0x01
    15f8:	26 ff       	sbrs	r18, 6
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <vfprintf+0x4b6>
    15fc:	67 2d       	mov	r22, r7
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <vfprintf+0x4ba>
    1602:	6f ef       	ldi	r22, 0xFF	; 255
    1604:	7f ef       	ldi	r23, 0xFF	; 255
    1606:	c8 01       	movw	r24, r16
    1608:	2a 8b       	std	Y+18, r18	; 0x12
    160a:	00 d2       	rcall	.+1024   	; 0x1a0c <strnlen_P>
    160c:	6c 01       	movw	r12, r24
    160e:	2a 89       	ldd	r18, Y+18	; 0x12
    1610:	80 e8       	ldi	r24, 0x80	; 128
    1612:	58 2e       	mov	r5, r24
    1614:	52 2a       	or	r5, r18
    1616:	53 fc       	sbrc	r5, 3
    1618:	1a c0       	rjmp	.+52     	; 0x164e <vfprintf+0x502>
    161a:	05 c0       	rjmp	.+10     	; 0x1626 <vfprintf+0x4da>
    161c:	b7 01       	movw	r22, r14
    161e:	80 e2       	ldi	r24, 0x20	; 32
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	19 d2       	rcall	.+1074   	; 0x1a56 <fputc>
    1624:	6a 94       	dec	r6
    1626:	86 2d       	mov	r24, r6
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	c8 16       	cp	r12, r24
    162c:	d9 06       	cpc	r13, r25
    162e:	b0 f3       	brcs	.-20     	; 0x161c <vfprintf+0x4d0>
    1630:	0e c0       	rjmp	.+28     	; 0x164e <vfprintf+0x502>
    1632:	f8 01       	movw	r30, r16
    1634:	57 fc       	sbrc	r5, 7
    1636:	85 91       	lpm	r24, Z+
    1638:	57 fe       	sbrs	r5, 7
    163a:	81 91       	ld	r24, Z+
    163c:	8f 01       	movw	r16, r30
    163e:	b7 01       	movw	r22, r14
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	09 d2       	rcall	.+1042   	; 0x1a56 <fputc>
    1644:	61 10       	cpse	r6, r1
    1646:	6a 94       	dec	r6
    1648:	f1 e0       	ldi	r31, 0x01	; 1
    164a:	cf 1a       	sub	r12, r31
    164c:	d1 08       	sbc	r13, r1
    164e:	c1 14       	cp	r12, r1
    1650:	d1 04       	cpc	r13, r1
    1652:	79 f7       	brne	.-34     	; 0x1632 <vfprintf+0x4e6>
    1654:	e3 c0       	rjmp	.+454    	; 0x181c <vfprintf+0x6d0>
    1656:	84 36       	cpi	r24, 0x64	; 100
    1658:	11 f0       	breq	.+4      	; 0x165e <vfprintf+0x512>
    165a:	89 36       	cpi	r24, 0x69	; 105
    165c:	49 f5       	brne	.+82     	; 0x16b0 <vfprintf+0x564>
    165e:	56 01       	movw	r10, r12
    1660:	27 ff       	sbrs	r18, 7
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <vfprintf+0x52a>
    1664:	44 e0       	ldi	r20, 0x04	; 4
    1666:	a4 0e       	add	r10, r20
    1668:	b1 1c       	adc	r11, r1
    166a:	f6 01       	movw	r30, r12
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	0a c0       	rjmp	.+20     	; 0x168a <vfprintf+0x53e>
    1676:	f2 e0       	ldi	r31, 0x02	; 2
    1678:	af 0e       	add	r10, r31
    167a:	b1 1c       	adc	r11, r1
    167c:	f6 01       	movw	r30, r12
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	88 27       	eor	r24, r24
    1684:	77 fd       	sbrc	r23, 7
    1686:	80 95       	com	r24
    1688:	98 2f       	mov	r25, r24
    168a:	12 2f       	mov	r17, r18
    168c:	1f 76       	andi	r17, 0x6F	; 111
    168e:	97 ff       	sbrs	r25, 7
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <vfprintf+0x556>
    1692:	90 95       	com	r25
    1694:	80 95       	com	r24
    1696:	70 95       	com	r23
    1698:	61 95       	neg	r22
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	8f 4f       	sbci	r24, 0xFF	; 255
    169e:	9f 4f       	sbci	r25, 0xFF	; 255
    16a0:	10 68       	ori	r17, 0x80	; 128
    16a2:	2a e0       	ldi	r18, 0x0A	; 10
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	a4 01       	movw	r20, r8
    16a8:	02 d2       	rcall	.+1028   	; 0x1aae <__ultoa_invert>
    16aa:	d8 2e       	mov	r13, r24
    16ac:	d8 18       	sub	r13, r8
    16ae:	3f c0       	rjmp	.+126    	; 0x172e <vfprintf+0x5e2>
    16b0:	12 2f       	mov	r17, r18
    16b2:	85 37       	cpi	r24, 0x75	; 117
    16b4:	21 f4       	brne	.+8      	; 0x16be <vfprintf+0x572>
    16b6:	1f 7e       	andi	r17, 0xEF	; 239
    16b8:	2a e0       	ldi	r18, 0x0A	; 10
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	1f c0       	rjmp	.+62     	; 0x16fc <vfprintf+0x5b0>
    16be:	19 7f       	andi	r17, 0xF9	; 249
    16c0:	8f 36       	cpi	r24, 0x6F	; 111
    16c2:	a1 f0       	breq	.+40     	; 0x16ec <vfprintf+0x5a0>
    16c4:	20 f4       	brcc	.+8      	; 0x16ce <vfprintf+0x582>
    16c6:	88 35       	cpi	r24, 0x58	; 88
    16c8:	09 f0       	breq	.+2      	; 0x16cc <vfprintf+0x580>
    16ca:	ab c0       	rjmp	.+342    	; 0x1822 <vfprintf+0x6d6>
    16cc:	0b c0       	rjmp	.+22     	; 0x16e4 <vfprintf+0x598>
    16ce:	80 37       	cpi	r24, 0x70	; 112
    16d0:	21 f0       	breq	.+8      	; 0x16da <vfprintf+0x58e>
    16d2:	88 37       	cpi	r24, 0x78	; 120
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <vfprintf+0x58c>
    16d6:	a5 c0       	rjmp	.+330    	; 0x1822 <vfprintf+0x6d6>
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <vfprintf+0x590>
    16da:	10 61       	ori	r17, 0x10	; 16
    16dc:	14 ff       	sbrs	r17, 4
    16de:	09 c0       	rjmp	.+18     	; 0x16f2 <vfprintf+0x5a6>
    16e0:	14 60       	ori	r17, 0x04	; 4
    16e2:	07 c0       	rjmp	.+14     	; 0x16f2 <vfprintf+0x5a6>
    16e4:	24 ff       	sbrs	r18, 4
    16e6:	08 c0       	rjmp	.+16     	; 0x16f8 <vfprintf+0x5ac>
    16e8:	16 60       	ori	r17, 0x06	; 6
    16ea:	06 c0       	rjmp	.+12     	; 0x16f8 <vfprintf+0x5ac>
    16ec:	28 e0       	ldi	r18, 0x08	; 8
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	05 c0       	rjmp	.+10     	; 0x16fc <vfprintf+0x5b0>
    16f2:	20 e1       	ldi	r18, 0x10	; 16
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0x5b0>
    16f8:	20 e1       	ldi	r18, 0x10	; 16
    16fa:	32 e0       	ldi	r19, 0x02	; 2
    16fc:	56 01       	movw	r10, r12
    16fe:	17 ff       	sbrs	r17, 7
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x5c8>
    1702:	f4 e0       	ldi	r31, 0x04	; 4
    1704:	af 0e       	add	r10, r31
    1706:	b1 1c       	adc	r11, r1
    1708:	f6 01       	movw	r30, r12
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <vfprintf+0x5d8>
    1714:	f2 e0       	ldi	r31, 0x02	; 2
    1716:	af 0e       	add	r10, r31
    1718:	b1 1c       	adc	r11, r1
    171a:	f6 01       	movw	r30, r12
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a4 01       	movw	r20, r8
    1726:	c3 d1       	rcall	.+902    	; 0x1aae <__ultoa_invert>
    1728:	d8 2e       	mov	r13, r24
    172a:	d8 18       	sub	r13, r8
    172c:	1f 77       	andi	r17, 0x7F	; 127
    172e:	16 ff       	sbrs	r17, 6
    1730:	0b c0       	rjmp	.+22     	; 0x1748 <vfprintf+0x5fc>
    1732:	21 2f       	mov	r18, r17
    1734:	2e 7f       	andi	r18, 0xFE	; 254
    1736:	d7 14       	cp	r13, r7
    1738:	50 f4       	brcc	.+20     	; 0x174e <vfprintf+0x602>
    173a:	14 ff       	sbrs	r17, 4
    173c:	0a c0       	rjmp	.+20     	; 0x1752 <vfprintf+0x606>
    173e:	12 fd       	sbrc	r17, 2
    1740:	08 c0       	rjmp	.+16     	; 0x1752 <vfprintf+0x606>
    1742:	21 2f       	mov	r18, r17
    1744:	2e 7e       	andi	r18, 0xEE	; 238
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <vfprintf+0x606>
    1748:	0d 2d       	mov	r16, r13
    174a:	21 2f       	mov	r18, r17
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <vfprintf+0x608>
    174e:	0d 2d       	mov	r16, r13
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <vfprintf+0x608>
    1752:	07 2d       	mov	r16, r7
    1754:	24 ff       	sbrs	r18, 4
    1756:	0c c0       	rjmp	.+24     	; 0x1770 <vfprintf+0x624>
    1758:	fe 01       	movw	r30, r28
    175a:	ed 0d       	add	r30, r13
    175c:	f1 1d       	adc	r31, r1
    175e:	80 81       	ld	r24, Z
    1760:	80 33       	cpi	r24, 0x30	; 48
    1762:	11 f4       	brne	.+4      	; 0x1768 <vfprintf+0x61c>
    1764:	29 7e       	andi	r18, 0xE9	; 233
    1766:	08 c0       	rjmp	.+16     	; 0x1778 <vfprintf+0x62c>
    1768:	22 ff       	sbrs	r18, 2
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <vfprintf+0x62a>
    176c:	0e 5f       	subi	r16, 0xFE	; 254
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <vfprintf+0x62c>
    1770:	82 2f       	mov	r24, r18
    1772:	86 78       	andi	r24, 0x86	; 134
    1774:	09 f0       	breq	.+2      	; 0x1778 <vfprintf+0x62c>
    1776:	0f 5f       	subi	r16, 0xFF	; 255
    1778:	23 fd       	sbrc	r18, 3
    177a:	13 c0       	rjmp	.+38     	; 0x17a2 <vfprintf+0x656>
    177c:	20 ff       	sbrs	r18, 0
    177e:	0e c0       	rjmp	.+28     	; 0x179c <vfprintf+0x650>
    1780:	7d 2c       	mov	r7, r13
    1782:	06 15       	cp	r16, r6
    1784:	58 f4       	brcc	.+22     	; 0x179c <vfprintf+0x650>
    1786:	76 0c       	add	r7, r6
    1788:	70 1a       	sub	r7, r16
    178a:	06 2d       	mov	r16, r6
    178c:	07 c0       	rjmp	.+14     	; 0x179c <vfprintf+0x650>
    178e:	b7 01       	movw	r22, r14
    1790:	80 e2       	ldi	r24, 0x20	; 32
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	2a 8b       	std	Y+18, r18	; 0x12
    1796:	5f d1       	rcall	.+702    	; 0x1a56 <fputc>
    1798:	0f 5f       	subi	r16, 0xFF	; 255
    179a:	2a 89       	ldd	r18, Y+18	; 0x12
    179c:	06 15       	cp	r16, r6
    179e:	b8 f3       	brcs	.-18     	; 0x178e <vfprintf+0x642>
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <vfprintf+0x65e>
    17a2:	06 15       	cp	r16, r6
    17a4:	10 f4       	brcc	.+4      	; 0x17aa <vfprintf+0x65e>
    17a6:	60 1a       	sub	r6, r16
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <vfprintf+0x660>
    17aa:	61 2c       	mov	r6, r1
    17ac:	24 ff       	sbrs	r18, 4
    17ae:	11 c0       	rjmp	.+34     	; 0x17d2 <vfprintf+0x686>
    17b0:	b7 01       	movw	r22, r14
    17b2:	80 e3       	ldi	r24, 0x30	; 48
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	2a 8b       	std	Y+18, r18	; 0x12
    17b8:	4e d1       	rcall	.+668    	; 0x1a56 <fputc>
    17ba:	2a 89       	ldd	r18, Y+18	; 0x12
    17bc:	22 ff       	sbrs	r18, 2
    17be:	1c c0       	rjmp	.+56     	; 0x17f8 <vfprintf+0x6ac>
    17c0:	21 ff       	sbrs	r18, 1
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <vfprintf+0x67e>
    17c4:	88 e5       	ldi	r24, 0x58	; 88
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <vfprintf+0x682>
    17ca:	88 e7       	ldi	r24, 0x78	; 120
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	b7 01       	movw	r22, r14
    17d0:	0c c0       	rjmp	.+24     	; 0x17ea <vfprintf+0x69e>
    17d2:	82 2f       	mov	r24, r18
    17d4:	86 78       	andi	r24, 0x86	; 134
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <vfprintf+0x6ac>
    17d8:	21 fd       	sbrc	r18, 1
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfprintf+0x694>
    17dc:	80 e2       	ldi	r24, 0x20	; 32
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <vfprintf+0x696>
    17e0:	8b e2       	ldi	r24, 0x2B	; 43
    17e2:	27 fd       	sbrc	r18, 7
    17e4:	8d e2       	ldi	r24, 0x2D	; 45
    17e6:	b7 01       	movw	r22, r14
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	35 d1       	rcall	.+618    	; 0x1a56 <fputc>
    17ec:	05 c0       	rjmp	.+10     	; 0x17f8 <vfprintf+0x6ac>
    17ee:	b7 01       	movw	r22, r14
    17f0:	80 e3       	ldi	r24, 0x30	; 48
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	30 d1       	rcall	.+608    	; 0x1a56 <fputc>
    17f6:	7a 94       	dec	r7
    17f8:	d7 14       	cp	r13, r7
    17fa:	c8 f3       	brcs	.-14     	; 0x17ee <vfprintf+0x6a2>
    17fc:	da 94       	dec	r13
    17fe:	f4 01       	movw	r30, r8
    1800:	ed 0d       	add	r30, r13
    1802:	f1 1d       	adc	r31, r1
    1804:	b7 01       	movw	r22, r14
    1806:	80 81       	ld	r24, Z
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	25 d1       	rcall	.+586    	; 0x1a56 <fputc>
    180c:	d1 10       	cpse	r13, r1
    180e:	f6 cf       	rjmp	.-20     	; 0x17fc <vfprintf+0x6b0>
    1810:	05 c0       	rjmp	.+10     	; 0x181c <vfprintf+0x6d0>
    1812:	b7 01       	movw	r22, r14
    1814:	80 e2       	ldi	r24, 0x20	; 32
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	1e d1       	rcall	.+572    	; 0x1a56 <fputc>
    181a:	6a 94       	dec	r6
    181c:	61 10       	cpse	r6, r1
    181e:	f9 cf       	rjmp	.-14     	; 0x1812 <vfprintf+0x6c6>
    1820:	b6 cc       	rjmp	.-1684   	; 0x118e <vfprintf+0x42>
    1822:	f7 01       	movw	r30, r14
    1824:	26 81       	ldd	r18, Z+6	; 0x06
    1826:	37 81       	ldd	r19, Z+7	; 0x07
    1828:	02 c0       	rjmp	.+4      	; 0x182e <vfprintf+0x6e2>
    182a:	2f ef       	ldi	r18, 0xFF	; 255
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	c9 01       	movw	r24, r18
    1830:	62 96       	adiw	r28, 0x12	; 18
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	af 90       	pop	r10
    184a:	9f 90       	pop	r9
    184c:	8f 90       	pop	r8
    184e:	7f 90       	pop	r7
    1850:	6f 90       	pop	r6
    1852:	5f 90       	pop	r5
    1854:	4f 90       	pop	r4
    1856:	3f 90       	pop	r3
    1858:	2f 90       	pop	r2
    185a:	08 95       	ret

0000185c <__ftoa_engine>:
    185c:	28 30       	cpi	r18, 0x08	; 8
    185e:	08 f0       	brcs	.+2      	; 0x1862 <__ftoa_engine+0x6>
    1860:	27 e0       	ldi	r18, 0x07	; 7
    1862:	33 27       	eor	r19, r19
    1864:	da 01       	movw	r26, r20
    1866:	99 0f       	add	r25, r25
    1868:	31 1d       	adc	r19, r1
    186a:	87 fd       	sbrc	r24, 7
    186c:	91 60       	ori	r25, 0x01	; 1
    186e:	00 96       	adiw	r24, 0x00	; 0
    1870:	61 05       	cpc	r22, r1
    1872:	71 05       	cpc	r23, r1
    1874:	39 f4       	brne	.+14     	; 0x1884 <__ftoa_engine+0x28>
    1876:	32 60       	ori	r19, 0x02	; 2
    1878:	2e 5f       	subi	r18, 0xFE	; 254
    187a:	3d 93       	st	X+, r19
    187c:	30 e3       	ldi	r19, 0x30	; 48
    187e:	2a 95       	dec	r18
    1880:	e1 f7       	brne	.-8      	; 0x187a <__ftoa_engine+0x1e>
    1882:	08 95       	ret
    1884:	9f 3f       	cpi	r25, 0xFF	; 255
    1886:	30 f0       	brcs	.+12     	; 0x1894 <__ftoa_engine+0x38>
    1888:	80 38       	cpi	r24, 0x80	; 128
    188a:	71 05       	cpc	r23, r1
    188c:	61 05       	cpc	r22, r1
    188e:	09 f0       	breq	.+2      	; 0x1892 <__ftoa_engine+0x36>
    1890:	3c 5f       	subi	r19, 0xFC	; 252
    1892:	3c 5f       	subi	r19, 0xFC	; 252
    1894:	3d 93       	st	X+, r19
    1896:	91 30       	cpi	r25, 0x01	; 1
    1898:	08 f0       	brcs	.+2      	; 0x189c <__ftoa_engine+0x40>
    189a:	80 68       	ori	r24, 0x80	; 128
    189c:	91 1d       	adc	r25, r1
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	1f 93       	push	r17
    18a4:	0f 93       	push	r16
    18a6:	ff 92       	push	r15
    18a8:	ef 92       	push	r14
    18aa:	19 2f       	mov	r17, r25
    18ac:	98 7f       	andi	r25, 0xF8	; 248
    18ae:	96 95       	lsr	r25
    18b0:	e9 2f       	mov	r30, r25
    18b2:	96 95       	lsr	r25
    18b4:	96 95       	lsr	r25
    18b6:	e9 0f       	add	r30, r25
    18b8:	ff 27       	eor	r31, r31
    18ba:	e2 5a       	subi	r30, 0xA2	; 162
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
    18be:	99 27       	eor	r25, r25
    18c0:	33 27       	eor	r19, r19
    18c2:	ee 24       	eor	r14, r14
    18c4:	ff 24       	eor	r15, r15
    18c6:	a7 01       	movw	r20, r14
    18c8:	e7 01       	movw	r28, r14
    18ca:	05 90       	lpm	r0, Z+
    18cc:	08 94       	sec
    18ce:	07 94       	ror	r0
    18d0:	28 f4       	brcc	.+10     	; 0x18dc <__ftoa_engine+0x80>
    18d2:	36 0f       	add	r19, r22
    18d4:	e7 1e       	adc	r14, r23
    18d6:	f8 1e       	adc	r15, r24
    18d8:	49 1f       	adc	r20, r25
    18da:	51 1d       	adc	r21, r1
    18dc:	66 0f       	add	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	88 1f       	adc	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	06 94       	lsr	r0
    18e6:	a1 f7       	brne	.-24     	; 0x18d0 <__ftoa_engine+0x74>
    18e8:	05 90       	lpm	r0, Z+
    18ea:	07 94       	ror	r0
    18ec:	28 f4       	brcc	.+10     	; 0x18f8 <__ftoa_engine+0x9c>
    18ee:	e7 0e       	add	r14, r23
    18f0:	f8 1e       	adc	r15, r24
    18f2:	49 1f       	adc	r20, r25
    18f4:	56 1f       	adc	r21, r22
    18f6:	c1 1d       	adc	r28, r1
    18f8:	77 0f       	add	r23, r23
    18fa:	88 1f       	adc	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	66 1f       	adc	r22, r22
    1900:	06 94       	lsr	r0
    1902:	a1 f7       	brne	.-24     	; 0x18ec <__ftoa_engine+0x90>
    1904:	05 90       	lpm	r0, Z+
    1906:	07 94       	ror	r0
    1908:	28 f4       	brcc	.+10     	; 0x1914 <__ftoa_engine+0xb8>
    190a:	f8 0e       	add	r15, r24
    190c:	49 1f       	adc	r20, r25
    190e:	56 1f       	adc	r21, r22
    1910:	c7 1f       	adc	r28, r23
    1912:	d1 1d       	adc	r29, r1
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	66 1f       	adc	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	06 94       	lsr	r0
    191e:	a1 f7       	brne	.-24     	; 0x1908 <__ftoa_engine+0xac>
    1920:	05 90       	lpm	r0, Z+
    1922:	07 94       	ror	r0
    1924:	20 f4       	brcc	.+8      	; 0x192e <__ftoa_engine+0xd2>
    1926:	49 0f       	add	r20, r25
    1928:	56 1f       	adc	r21, r22
    192a:	c7 1f       	adc	r28, r23
    192c:	d8 1f       	adc	r29, r24
    192e:	99 0f       	add	r25, r25
    1930:	66 1f       	adc	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	06 94       	lsr	r0
    1938:	a9 f7       	brne	.-22     	; 0x1924 <__ftoa_engine+0xc8>
    193a:	84 91       	lpm	r24, Z
    193c:	10 95       	com	r17
    193e:	17 70       	andi	r17, 0x07	; 7
    1940:	41 f0       	breq	.+16     	; 0x1952 <__ftoa_engine+0xf6>
    1942:	d6 95       	lsr	r29
    1944:	c7 95       	ror	r28
    1946:	57 95       	ror	r21
    1948:	47 95       	ror	r20
    194a:	f7 94       	ror	r15
    194c:	e7 94       	ror	r14
    194e:	1a 95       	dec	r17
    1950:	c1 f7       	brne	.-16     	; 0x1942 <__ftoa_engine+0xe6>
    1952:	e4 e0       	ldi	r30, 0x04	; 4
    1954:	f2 e0       	ldi	r31, 0x02	; 2
    1956:	68 94       	set
    1958:	15 90       	lpm	r1, Z+
    195a:	15 91       	lpm	r17, Z+
    195c:	35 91       	lpm	r19, Z+
    195e:	65 91       	lpm	r22, Z+
    1960:	95 91       	lpm	r25, Z+
    1962:	05 90       	lpm	r0, Z+
    1964:	7f e2       	ldi	r23, 0x2F	; 47
    1966:	73 95       	inc	r23
    1968:	e1 18       	sub	r14, r1
    196a:	f1 0a       	sbc	r15, r17
    196c:	43 0b       	sbc	r20, r19
    196e:	56 0b       	sbc	r21, r22
    1970:	c9 0b       	sbc	r28, r25
    1972:	d0 09       	sbc	r29, r0
    1974:	c0 f7       	brcc	.-16     	; 0x1966 <__ftoa_engine+0x10a>
    1976:	e1 0c       	add	r14, r1
    1978:	f1 1e       	adc	r15, r17
    197a:	43 1f       	adc	r20, r19
    197c:	56 1f       	adc	r21, r22
    197e:	c9 1f       	adc	r28, r25
    1980:	d0 1d       	adc	r29, r0
    1982:	7e f4       	brtc	.+30     	; 0x19a2 <__ftoa_engine+0x146>
    1984:	70 33       	cpi	r23, 0x30	; 48
    1986:	11 f4       	brne	.+4      	; 0x198c <__ftoa_engine+0x130>
    1988:	8a 95       	dec	r24
    198a:	e6 cf       	rjmp	.-52     	; 0x1958 <__ftoa_engine+0xfc>
    198c:	e8 94       	clt
    198e:	01 50       	subi	r16, 0x01	; 1
    1990:	30 f0       	brcs	.+12     	; 0x199e <__ftoa_engine+0x142>
    1992:	08 0f       	add	r16, r24
    1994:	0a f4       	brpl	.+2      	; 0x1998 <__ftoa_engine+0x13c>
    1996:	00 27       	eor	r16, r16
    1998:	02 17       	cp	r16, r18
    199a:	08 f4       	brcc	.+2      	; 0x199e <__ftoa_engine+0x142>
    199c:	20 2f       	mov	r18, r16
    199e:	23 95       	inc	r18
    19a0:	02 2f       	mov	r16, r18
    19a2:	7a 33       	cpi	r23, 0x3A	; 58
    19a4:	28 f0       	brcs	.+10     	; 0x19b0 <__ftoa_engine+0x154>
    19a6:	79 e3       	ldi	r23, 0x39	; 57
    19a8:	7d 93       	st	X+, r23
    19aa:	2a 95       	dec	r18
    19ac:	e9 f7       	brne	.-6      	; 0x19a8 <__ftoa_engine+0x14c>
    19ae:	10 c0       	rjmp	.+32     	; 0x19d0 <__ftoa_engine+0x174>
    19b0:	7d 93       	st	X+, r23
    19b2:	2a 95       	dec	r18
    19b4:	89 f6       	brne	.-94     	; 0x1958 <__ftoa_engine+0xfc>
    19b6:	06 94       	lsr	r0
    19b8:	97 95       	ror	r25
    19ba:	67 95       	ror	r22
    19bc:	37 95       	ror	r19
    19be:	17 95       	ror	r17
    19c0:	17 94       	ror	r1
    19c2:	e1 18       	sub	r14, r1
    19c4:	f1 0a       	sbc	r15, r17
    19c6:	43 0b       	sbc	r20, r19
    19c8:	56 0b       	sbc	r21, r22
    19ca:	c9 0b       	sbc	r28, r25
    19cc:	d0 09       	sbc	r29, r0
    19ce:	98 f0       	brcs	.+38     	; 0x19f6 <__ftoa_engine+0x19a>
    19d0:	23 95       	inc	r18
    19d2:	7e 91       	ld	r23, -X
    19d4:	73 95       	inc	r23
    19d6:	7a 33       	cpi	r23, 0x3A	; 58
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <__ftoa_engine+0x180>
    19da:	70 e3       	ldi	r23, 0x30	; 48
    19dc:	7c 93       	st	X, r23
    19de:	20 13       	cpse	r18, r16
    19e0:	b8 f7       	brcc	.-18     	; 0x19d0 <__ftoa_engine+0x174>
    19e2:	7e 91       	ld	r23, -X
    19e4:	70 61       	ori	r23, 0x10	; 16
    19e6:	7d 93       	st	X+, r23
    19e8:	30 f0       	brcs	.+12     	; 0x19f6 <__ftoa_engine+0x19a>
    19ea:	83 95       	inc	r24
    19ec:	71 e3       	ldi	r23, 0x31	; 49
    19ee:	7d 93       	st	X+, r23
    19f0:	70 e3       	ldi	r23, 0x30	; 48
    19f2:	2a 95       	dec	r18
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <__ftoa_engine+0x192>
    19f6:	11 24       	eor	r1, r1
    19f8:	ef 90       	pop	r14
    19fa:	ff 90       	pop	r15
    19fc:	0f 91       	pop	r16
    19fe:	1f 91       	pop	r17
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	99 27       	eor	r25, r25
    1a06:	87 fd       	sbrc	r24, 7
    1a08:	90 95       	com	r25
    1a0a:	08 95       	ret

00001a0c <strnlen_P>:
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	05 90       	lpm	r0, Z+
    1a10:	61 50       	subi	r22, 0x01	; 1
    1a12:	70 40       	sbci	r23, 0x00	; 0
    1a14:	01 10       	cpse	r0, r1
    1a16:	d8 f7       	brcc	.-10     	; 0x1a0e <strnlen_P+0x2>
    1a18:	80 95       	com	r24
    1a1a:	90 95       	com	r25
    1a1c:	8e 0f       	add	r24, r30
    1a1e:	9f 1f       	adc	r25, r31
    1a20:	08 95       	ret

00001a22 <strnlen>:
    1a22:	fc 01       	movw	r30, r24
    1a24:	61 50       	subi	r22, 0x01	; 1
    1a26:	70 40       	sbci	r23, 0x00	; 0
    1a28:	01 90       	ld	r0, Z+
    1a2a:	01 10       	cpse	r0, r1
    1a2c:	d8 f7       	brcc	.-10     	; 0x1a24 <strnlen+0x2>
    1a2e:	80 95       	com	r24
    1a30:	90 95       	com	r25
    1a32:	8e 0f       	add	r24, r30
    1a34:	9f 1f       	adc	r25, r31
    1a36:	08 95       	ret

00001a38 <fprintf>:
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	ce 01       	movw	r24, r28
    1a42:	0a 96       	adiw	r24, 0x0a	; 10
    1a44:	ac 01       	movw	r20, r24
    1a46:	68 85       	ldd	r22, Y+8	; 0x08
    1a48:	79 85       	ldd	r23, Y+9	; 0x09
    1a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4e:	7e db       	rcall	.-2308   	; 0x114c <vfprintf>
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

00001a56 <fputc>:
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	8c 01       	movw	r16, r24
    1a60:	eb 01       	movw	r28, r22
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	81 fd       	sbrc	r24, 1
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <fputc+0x18>
    1a68:	0f ef       	ldi	r16, 0xFF	; 255
    1a6a:	1f ef       	ldi	r17, 0xFF	; 255
    1a6c:	1a c0       	rjmp	.+52     	; 0x1aa2 <fputc+0x4c>
    1a6e:	82 ff       	sbrs	r24, 2
    1a70:	0d c0       	rjmp	.+26     	; 0x1a8c <fputc+0x36>
    1a72:	2e 81       	ldd	r18, Y+6	; 0x06
    1a74:	3f 81       	ldd	r19, Y+7	; 0x07
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	28 17       	cp	r18, r24
    1a7c:	39 07       	cpc	r19, r25
    1a7e:	64 f4       	brge	.+24     	; 0x1a98 <fputc+0x42>
    1a80:	e8 81       	ld	r30, Y
    1a82:	f9 81       	ldd	r31, Y+1	; 0x01
    1a84:	01 93       	st	Z+, r16
    1a86:	e8 83       	st	Y, r30
    1a88:	f9 83       	std	Y+1, r31	; 0x01
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <fputc+0x42>
    1a8c:	e8 85       	ldd	r30, Y+8	; 0x08
    1a8e:	f9 85       	ldd	r31, Y+9	; 0x09
    1a90:	80 2f       	mov	r24, r16
    1a92:	19 95       	eicall
    1a94:	89 2b       	or	r24, r25
    1a96:	41 f7       	brne	.-48     	; 0x1a68 <fputc+0x12>
    1a98:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	8e 83       	std	Y+6, r24	; 0x06
    1aa0:	9f 83       	std	Y+7, r25	; 0x07
    1aa2:	c8 01       	movw	r24, r16
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	08 95       	ret

00001aae <__ultoa_invert>:
    1aae:	fa 01       	movw	r30, r20
    1ab0:	aa 27       	eor	r26, r26
    1ab2:	28 30       	cpi	r18, 0x08	; 8
    1ab4:	51 f1       	breq	.+84     	; 0x1b0a <__ultoa_invert+0x5c>
    1ab6:	20 31       	cpi	r18, 0x10	; 16
    1ab8:	81 f1       	breq	.+96     	; 0x1b1a <__ultoa_invert+0x6c>
    1aba:	e8 94       	clt
    1abc:	6f 93       	push	r22
    1abe:	6e 7f       	andi	r22, 0xFE	; 254
    1ac0:	6e 5f       	subi	r22, 0xFE	; 254
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	af 4f       	sbci	r26, 0xFF	; 255
    1aca:	b1 e0       	ldi	r27, 0x01	; 1
    1acc:	3e d0       	rcall	.+124    	; 0x1b4a <__ultoa_invert+0x9c>
    1ace:	b4 e0       	ldi	r27, 0x04	; 4
    1ad0:	3c d0       	rcall	.+120    	; 0x1b4a <__ultoa_invert+0x9c>
    1ad2:	67 0f       	add	r22, r23
    1ad4:	78 1f       	adc	r23, r24
    1ad6:	89 1f       	adc	r24, r25
    1ad8:	9a 1f       	adc	r25, r26
    1ada:	a1 1d       	adc	r26, r1
    1adc:	68 0f       	add	r22, r24
    1ade:	79 1f       	adc	r23, r25
    1ae0:	8a 1f       	adc	r24, r26
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	6a 0f       	add	r22, r26
    1ae8:	71 1d       	adc	r23, r1
    1aea:	81 1d       	adc	r24, r1
    1aec:	91 1d       	adc	r25, r1
    1aee:	a1 1d       	adc	r26, r1
    1af0:	20 d0       	rcall	.+64     	; 0x1b32 <__ultoa_invert+0x84>
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <__ultoa_invert+0x48>
    1af4:	68 94       	set
    1af6:	3f 91       	pop	r19
    1af8:	2a e0       	ldi	r18, 0x0A	; 10
    1afa:	26 9f       	mul	r18, r22
    1afc:	11 24       	eor	r1, r1
    1afe:	30 19       	sub	r19, r0
    1b00:	30 5d       	subi	r19, 0xD0	; 208
    1b02:	31 93       	st	Z+, r19
    1b04:	de f6       	brtc	.-74     	; 0x1abc <__ultoa_invert+0xe>
    1b06:	cf 01       	movw	r24, r30
    1b08:	08 95       	ret
    1b0a:	46 2f       	mov	r20, r22
    1b0c:	47 70       	andi	r20, 0x07	; 7
    1b0e:	40 5d       	subi	r20, 0xD0	; 208
    1b10:	41 93       	st	Z+, r20
    1b12:	b3 e0       	ldi	r27, 0x03	; 3
    1b14:	0f d0       	rcall	.+30     	; 0x1b34 <__ultoa_invert+0x86>
    1b16:	c9 f7       	brne	.-14     	; 0x1b0a <__ultoa_invert+0x5c>
    1b18:	f6 cf       	rjmp	.-20     	; 0x1b06 <__ultoa_invert+0x58>
    1b1a:	46 2f       	mov	r20, r22
    1b1c:	4f 70       	andi	r20, 0x0F	; 15
    1b1e:	40 5d       	subi	r20, 0xD0	; 208
    1b20:	4a 33       	cpi	r20, 0x3A	; 58
    1b22:	18 f0       	brcs	.+6      	; 0x1b2a <__ultoa_invert+0x7c>
    1b24:	49 5d       	subi	r20, 0xD9	; 217
    1b26:	31 fd       	sbrc	r19, 1
    1b28:	40 52       	subi	r20, 0x20	; 32
    1b2a:	41 93       	st	Z+, r20
    1b2c:	02 d0       	rcall	.+4      	; 0x1b32 <__ultoa_invert+0x84>
    1b2e:	a9 f7       	brne	.-22     	; 0x1b1a <__ultoa_invert+0x6c>
    1b30:	ea cf       	rjmp	.-44     	; 0x1b06 <__ultoa_invert+0x58>
    1b32:	b4 e0       	ldi	r27, 0x04	; 4
    1b34:	a6 95       	lsr	r26
    1b36:	97 95       	ror	r25
    1b38:	87 95       	ror	r24
    1b3a:	77 95       	ror	r23
    1b3c:	67 95       	ror	r22
    1b3e:	ba 95       	dec	r27
    1b40:	c9 f7       	brne	.-14     	; 0x1b34 <__ultoa_invert+0x86>
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	61 05       	cpc	r22, r1
    1b46:	71 05       	cpc	r23, r1
    1b48:	08 95       	ret
    1b4a:	9b 01       	movw	r18, r22
    1b4c:	ac 01       	movw	r20, r24
    1b4e:	0a 2e       	mov	r0, r26
    1b50:	06 94       	lsr	r0
    1b52:	57 95       	ror	r21
    1b54:	47 95       	ror	r20
    1b56:	37 95       	ror	r19
    1b58:	27 95       	ror	r18
    1b5a:	ba 95       	dec	r27
    1b5c:	c9 f7       	brne	.-14     	; 0x1b50 <__ultoa_invert+0xa2>
    1b5e:	62 0f       	add	r22, r18
    1b60:	73 1f       	adc	r23, r19
    1b62:	84 1f       	adc	r24, r20
    1b64:	95 1f       	adc	r25, r21
    1b66:	a0 1d       	adc	r26, r0
    1b68:	08 95       	ret

00001b6a <_exit>:
    1b6a:	f8 94       	cli

00001b6c <__stop_program>:
    1b6c:	ff cf       	rjmp	.-2      	; 0x1b6c <__stop_program>
