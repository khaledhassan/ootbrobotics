
Epiphany_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000225c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003f0  00802000  0000225c  000022f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000239  008023f0  008023f0  000026e0  2**0
                  ALLOC
  3 .stab         000029a0  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008d0  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005950  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  0000597f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005da7  00000000  00000000  00005d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014a7  00000000  00000000  0000bac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000025c5  00000000  00000000  0000cf6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d9c  00000000  00000000  0000f534  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002305  00000000  00000000  000102d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a4c  00000000  00000000  000125d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f8  00000000  00000000  00015021  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a1 c1       	rjmp	.+834    	; 0x348 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c1       	rjmp	.+830    	; 0x348 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c1       	rjmp	.+826    	; 0x348 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c1       	rjmp	.+822    	; 0x348 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c1       	rjmp	.+818    	; 0x348 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c1       	rjmp	.+814    	; 0x348 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c1       	rjmp	.+810    	; 0x348 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c1       	rjmp	.+806    	; 0x348 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c1       	rjmp	.+802    	; 0x348 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c1       	rjmp	.+798    	; 0x348 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c1       	rjmp	.+794    	; 0x348 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c1       	rjmp	.+790    	; 0x348 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c1       	rjmp	.+786    	; 0x348 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c1       	rjmp	.+782    	; 0x348 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c1       	rjmp	.+778    	; 0x348 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c1       	rjmp	.+774    	; 0x348 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c1       	rjmp	.+770    	; 0x348 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c1       	rjmp	.+766    	; 0x348 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c1       	rjmp	.+762    	; 0x348 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c1       	rjmp	.+758    	; 0x348 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c1       	rjmp	.+754    	; 0x348 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c1       	rjmp	.+750    	; 0x348 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c1       	rjmp	.+746    	; 0x348 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c1       	rjmp	.+742    	; 0x348 <__bad_interrupt>
      62:	00 00       	nop
      64:	48 c6       	rjmp	.+3216   	; 0xcf6 <__vector_25>
      66:	00 00       	nop
      68:	c0 c7       	rjmp	.+3968   	; 0xfea <__vector_26>
      6a:	00 00       	nop
      6c:	6d c1       	rjmp	.+730    	; 0x348 <__bad_interrupt>
      6e:	00 00       	nop
      70:	78 c6       	rjmp	.+3312   	; 0xd62 <__vector_28>
      72:	00 00       	nop
      74:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_29>
      78:	67 c1       	rjmp	.+718    	; 0x348 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c1       	rjmp	.+714    	; 0x348 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c1       	rjmp	.+710    	; 0x348 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c1       	rjmp	.+706    	; 0x348 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c1       	rjmp	.+702    	; 0x348 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c1       	rjmp	.+698    	; 0x348 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5b c1       	rjmp	.+694    	; 0x348 <__bad_interrupt>
      92:	00 00       	nop
      94:	59 c1       	rjmp	.+690    	; 0x348 <__bad_interrupt>
      96:	00 00       	nop
      98:	57 c1       	rjmp	.+686    	; 0x348 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c9 c2       	rjmp	.+1426   	; 0x630 <__vector_39>
      9e:	00 00       	nop
      a0:	0d c3       	rjmp	.+1562   	; 0x6bc <__vector_40>
      a2:	00 00       	nop
      a4:	51 c3       	rjmp	.+1698   	; 0x748 <__vector_41>
      a6:	00 00       	nop
      a8:	95 c3       	rjmp	.+1834   	; 0x7d4 <__vector_42>
      aa:	00 00       	nop
      ac:	85 c4       	rjmp	.+2314   	; 0x9b8 <__vector_43>
      ae:	00 00       	nop
      b0:	4b c1       	rjmp	.+662    	; 0x348 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c1       	rjmp	.+658    	; 0x348 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c1       	rjmp	.+654    	; 0x348 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c1       	rjmp	.+650    	; 0x348 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c1       	rjmp	.+646    	; 0x348 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c1       	rjmp	.+642    	; 0x348 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c1       	rjmp	.+638    	; 0x348 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3d c1       	rjmp	.+634    	; 0x348 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3b c1       	rjmp	.+630    	; 0x348 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c4       	rjmp	.+2388   	; 0xa2a <__vector_53>
      d6:	00 00       	nop
      d8:	37 c1       	rjmp	.+622    	; 0x348 <__bad_interrupt>
      da:	00 00       	nop
      dc:	35 c1       	rjmp	.+618    	; 0x348 <__bad_interrupt>
      de:	00 00       	nop
      e0:	33 c1       	rjmp	.+614    	; 0x348 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	31 c1       	rjmp	.+610    	; 0x348 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2f c1       	rjmp	.+606    	; 0x348 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2d c1       	rjmp	.+602    	; 0x348 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2b c1       	rjmp	.+598    	; 0x348 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d8 c6       	rjmp	.+3504   	; 0xea6 <__vector_61>
      f6:	00 00       	nop
      f8:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_62>
      fc:	25 c1       	rjmp	.+586    	; 0x348 <__bad_interrupt>
      fe:	00 00       	nop
     100:	23 c1       	rjmp	.+582    	; 0x348 <__bad_interrupt>
     102:	00 00       	nop
     104:	21 c1       	rjmp	.+578    	; 0x348 <__bad_interrupt>
     106:	00 00       	nop
     108:	1f c1       	rjmp	.+574    	; 0x348 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1d c1       	rjmp	.+570    	; 0x348 <__bad_interrupt>
     10e:	00 00       	nop
     110:	1b c1       	rjmp	.+566    	; 0x348 <__bad_interrupt>
     112:	00 00       	nop
     114:	19 c1       	rjmp	.+562    	; 0x348 <__bad_interrupt>
     116:	00 00       	nop
     118:	17 c1       	rjmp	.+558    	; 0x348 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	71 c1       	rjmp	.+738    	; 0x400 <__vector_71>
     11e:	00 00       	nop
     120:	b5 c1       	rjmp	.+874    	; 0x48c <__vector_72>
     122:	00 00       	nop
     124:	f9 c1       	rjmp	.+1010   	; 0x518 <__vector_73>
     126:	00 00       	nop
     128:	3d c2       	rjmp	.+1146   	; 0x5a4 <__vector_74>
     12a:	00 00       	nop
     12c:	0d c1       	rjmp	.+538    	; 0x348 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0b c1       	rjmp	.+534    	; 0x348 <__bad_interrupt>
     132:	00 00       	nop
     134:	09 c1       	rjmp	.+530    	; 0x348 <__bad_interrupt>
     136:	00 00       	nop
     138:	07 c1       	rjmp	.+526    	; 0x348 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	05 c1       	rjmp	.+522    	; 0x348 <__bad_interrupt>
     13e:	00 00       	nop
     140:	03 c1       	rjmp	.+518    	; 0x348 <__bad_interrupt>
     142:	00 00       	nop
     144:	01 c1       	rjmp	.+514    	; 0x348 <__bad_interrupt>
     146:	00 00       	nop
     148:	ff c0       	rjmp	.+510    	; 0x348 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	fd c0       	rjmp	.+506    	; 0x348 <__bad_interrupt>
     14e:	00 00       	nop
     150:	fb c0       	rjmp	.+502    	; 0x348 <__bad_interrupt>
     152:	00 00       	nop
     154:	f9 c0       	rjmp	.+498    	; 0x348 <__bad_interrupt>
     156:	00 00       	nop
     158:	f7 c0       	rjmp	.+494    	; 0x348 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f5 c0       	rjmp	.+490    	; 0x348 <__bad_interrupt>
     15e:	00 00       	nop
     160:	36 c6       	rjmp	.+3180   	; 0xdce <__vector_88>
     162:	00 00       	nop
     164:	da c7       	rjmp	.+4020   	; 0x111a <__vector_89>
     166:	00 00       	nop
     168:	ef c0       	rjmp	.+478    	; 0x348 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	66 c6       	rjmp	.+3276   	; 0xe3a <__vector_91>
     16e:	00 00       	nop
     170:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_92>
     174:	e9 c0       	rjmp	.+466    	; 0x348 <__bad_interrupt>
     176:	00 00       	nop
     178:	e7 c0       	rjmp	.+462    	; 0x348 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e5 c0       	rjmp	.+458    	; 0x348 <__bad_interrupt>
     17e:	00 00       	nop
     180:	e3 c0       	rjmp	.+454    	; 0x348 <__bad_interrupt>
     182:	00 00       	nop
     184:	e1 c0       	rjmp	.+450    	; 0x348 <__bad_interrupt>
     186:	00 00       	nop
     188:	df c0       	rjmp	.+446    	; 0x348 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	dd c0       	rjmp	.+442    	; 0x348 <__bad_interrupt>
     18e:	00 00       	nop
     190:	db c0       	rjmp	.+438    	; 0x348 <__bad_interrupt>
     192:	00 00       	nop
     194:	d9 c0       	rjmp	.+434    	; 0x348 <__bad_interrupt>
     196:	00 00       	nop
     198:	d7 c0       	rjmp	.+430    	; 0x348 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d5 c0       	rjmp	.+426    	; 0x348 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d3 c0       	rjmp	.+422    	; 0x348 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d1 c0       	rjmp	.+418    	; 0x348 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cf c0       	rjmp	.+414    	; 0x348 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	cd c0       	rjmp	.+410    	; 0x348 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	cb c0       	rjmp	.+406    	; 0x348 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c9 c0       	rjmp	.+402    	; 0x348 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c7 c0       	rjmp	.+398    	; 0x348 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c5 c0       	rjmp	.+394    	; 0x348 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c3 c0       	rjmp	.+390    	; 0x348 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c1 c0       	rjmp	.+386    	; 0x348 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bf c0       	rjmp	.+382    	; 0x348 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	bd c0       	rjmp	.+378    	; 0x348 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	bb c0       	rjmp	.+374    	; 0x348 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b9 c0       	rjmp	.+370    	; 0x348 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b7 c0       	rjmp	.+366    	; 0x348 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	9a c6       	rjmp	.+3380   	; 0xf12 <__vector_119>
     1de:	00 00       	nop
     1e0:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_120>
     1e4:	b1 c0       	rjmp	.+354    	; 0x348 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ca c6       	rjmp	.+3476   	; 0xf7e <__vector_122>
     1ea:	00 00       	nop
     1ec:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__vector_123>
     1f0:	ab c0       	rjmp	.+342    	; 0x348 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a9 c0       	rjmp	.+338    	; 0x348 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a7 c0       	rjmp	.+334    	; 0x348 <__bad_interrupt>
	...

000001fc <__c.2006>:
     1fc:	6e 61 6e 00                                         nan.

00000200 <__c.2004>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	df e3       	ldi	r29, 0x3F	; 63
     306:	de bf       	out	0x3e, r29	; 62
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	13 e2       	ldi	r17, 0x23	; 35
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	ec e5       	ldi	r30, 0x5C	; 92
     31e:	f2 e2       	ldi	r31, 0x22	; 34
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a0 3f       	cpi	r26, 0xF0	; 240
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	26 e2       	ldi	r18, 0x26	; 38
     334:	a0 ef       	ldi	r26, 0xF0	; 240
     336:	b3 e2       	ldi	r27, 0x23	; 35
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a9 32       	cpi	r26, 0x29	; 41
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	48 d4       	rcall	.+2192   	; 0xbd4 <main>
     344:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <_exit>

00000348 <__bad_interrupt>:
     348:	5b ce       	rjmp	.-842    	; 0x0 <__vectors>

0000034a <adcInit>:

uint16_t analogRead(uint8_t pinNum)
{
	if (pinNum > 7) return 0;
	else			return filterData(&adc_data[pinNum][0]);
}
     34a:	cf 92       	push	r12
     34c:	df 92       	push	r13
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	80 e2       	ldi	r24, 0x20	; 32
     35c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <ReadCalibrationByte>
     360:	c0 e0       	ldi	r28, 0x00	; 0
     362:	d2 e0       	ldi	r29, 0x02	; 2
     364:	8c 87       	std	Y+12, r24	; 0x0c
     366:	81 e2       	ldi	r24, 0x21	; 33
     368:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <ReadCalibrationByte>
     36c:	8d 87       	std	Y+13, r24	; 0x0d
     36e:	88 e1       	ldi	r24, 0x18	; 24
     370:	f8 2e       	mov	r15, r24
     372:	f9 82       	std	Y+1, r15	; 0x01
     374:	00 e1       	ldi	r16, 0x10	; 16
     376:	0a 83       	std	Y+2, r16	; 0x02
     378:	97 e0       	ldi	r25, 0x07	; 7
     37a:	c9 2e       	mov	r12, r25
     37c:	cc 82       	std	Y+4, r12	; 0x04
     37e:	11 e0       	ldi	r17, 0x01	; 1
     380:	18 a3       	std	Y+32, r17	; 0x20
     382:	18 a7       	std	Y+40, r17	; 0x28
     384:	18 ab       	std	Y+48, r17	; 0x30
     386:	18 af       	std	Y+56, r17	; 0x38
     388:	19 a2       	std	Y+33, r1	; 0x21
     38a:	88 e0       	ldi	r24, 0x08	; 8
     38c:	89 a7       	std	Y+41, r24	; 0x29
     38e:	09 ab       	std	Y+49, r16	; 0x31
     390:	f9 ae       	std	Y+57, r15	; 0x39
     392:	1a a3       	std	Y+34, r17	; 0x22
     394:	1a a7       	std	Y+42, r17	; 0x2a
     396:	1a ab       	std	Y+50, r17	; 0x32
     398:	1a af       	std	Y+58, r17	; 0x3a
     39a:	20 ec       	ldi	r18, 0xC0	; 192
     39c:	d2 2e       	mov	r13, r18
     39e:	db 82       	std	Y+3, r13	; 0x03
     3a0:	3d e3       	ldi	r19, 0x3D	; 61
     3a2:	e3 2e       	mov	r14, r19
     3a4:	e8 82       	st	Y, r14
     3a6:	84 e2       	ldi	r24, 0x24	; 36
     3a8:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <ReadCalibrationByte>
     3ac:	c0 e4       	ldi	r28, 0x40	; 64
     3ae:	d2 e0       	ldi	r29, 0x02	; 2
     3b0:	8c 87       	std	Y+12, r24	; 0x0c
     3b2:	85 e2       	ldi	r24, 0x25	; 37
     3b4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <ReadCalibrationByte>
     3b8:	8d 87       	std	Y+13, r24	; 0x0d
     3ba:	f9 82       	std	Y+1, r15	; 0x01
     3bc:	0a 83       	std	Y+2, r16	; 0x02
     3be:	cc 82       	std	Y+4, r12	; 0x04
     3c0:	18 a3       	std	Y+32, r17	; 0x20
     3c2:	18 a7       	std	Y+40, r17	; 0x28
     3c4:	18 ab       	std	Y+48, r17	; 0x30
     3c6:	18 af       	std	Y+56, r17	; 0x38
     3c8:	80 e6       	ldi	r24, 0x60	; 96
     3ca:	89 a3       	std	Y+33, r24	; 0x21
     3cc:	88 e6       	ldi	r24, 0x68	; 104
     3ce:	89 a7       	std	Y+41, r24	; 0x29
     3d0:	80 e7       	ldi	r24, 0x70	; 112
     3d2:	89 ab       	std	Y+49, r24	; 0x31
     3d4:	88 e7       	ldi	r24, 0x78	; 120
     3d6:	89 af       	std	Y+57, r24	; 0x39
     3d8:	1a a3       	std	Y+34, r17	; 0x22
     3da:	1a a7       	std	Y+42, r17	; 0x2a
     3dc:	1a ab       	std	Y+50, r17	; 0x32
     3de:	1a af       	std	Y+58, r17	; 0x3a
     3e0:	db 82       	std	Y+3, r13	; 0x03
     3e2:	e8 82       	st	Y, r14
     3e4:	e0 ea       	ldi	r30, 0xA0	; 160
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	81 68       	ori	r24, 0x81	; 129
     3ec:	82 83       	std	Z+2, r24	; 0x02
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	df 90       	pop	r13
     3fc:	cf 90       	pop	r12
     3fe:	08 95       	ret

00000400 <__vector_71>:


ISR(ADCA_CH0_vect)
{
     400:	1f 92       	push	r1
     402:	0f 92       	push	r0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	0f 92       	push	r0
     408:	11 24       	eor	r1, r1
     40a:	08 b6       	in	r0, 0x38	; 56
     40c:	0f 92       	push	r0
     40e:	18 be       	out	0x38, r1	; 56
     410:	09 b6       	in	r0, 0x39	; 57
     412:	0f 92       	push	r0
     414:	19 be       	out	0x39, r1	; 57
     416:	0a b6       	in	r0, 0x3a	; 58
     418:	0f 92       	push	r0
     41a:	1a be       	out	0x3a, r1	; 58
     41c:	0b b6       	in	r0, 0x3b	; 59
     41e:	0f 92       	push	r0
     420:	1b be       	out	0x3b, r1	; 59
     422:	2f 93       	push	r18
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	af 93       	push	r26
     42a:	bf 93       	push	r27
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ef 93       	push	r30
     432:	ff 93       	push	r31
	adc_data[0][adcCnt[0].CNT++] = ADCA.CH0.RES;
     434:	a0 ef       	ldi	r26, 0xF0	; 240
     436:	b3 e2       	ldi	r27, 0x23	; 35
     438:	2c 91       	ld	r18, X
     43a:	2f 70       	andi	r18, 0x0F	; 15
     43c:	e2 2f       	mov	r30, r18
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	d2 e0       	ldi	r29, 0x02	; 2
     444:	8c a1       	ldd	r24, Y+36	; 0x24
     446:	9d a1       	ldd	r25, Y+37	; 0x25
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	e8 50       	subi	r30, 0x08	; 8
     44e:	fc 4d       	sbci	r31, 0xDC	; 220
     450:	80 83       	st	Z, r24
     452:	91 83       	std	Z+1, r25	; 0x01
     454:	2f 5f       	subi	r18, 0xFF	; 255
     456:	2f 70       	andi	r18, 0x0F	; 15
     458:	8c 91       	ld	r24, X
     45a:	80 7f       	andi	r24, 0xF0	; 240
     45c:	82 2b       	or	r24, r18
     45e:	8c 93       	st	X, r24
}
     460:	ff 91       	pop	r31
     462:	ef 91       	pop	r30
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	bf 91       	pop	r27
     46a:	af 91       	pop	r26
     46c:	9f 91       	pop	r25
     46e:	8f 91       	pop	r24
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0b be       	out	0x3b, r0	; 59
     476:	0f 90       	pop	r0
     478:	0a be       	out	0x3a, r0	; 58
     47a:	0f 90       	pop	r0
     47c:	09 be       	out	0x39, r0	; 57
     47e:	0f 90       	pop	r0
     480:	08 be       	out	0x38, r0	; 56
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <__vector_72>:
ISR(ADCA_CH1_vect)
{
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	08 b6       	in	r0, 0x38	; 56
     498:	0f 92       	push	r0
     49a:	18 be       	out	0x38, r1	; 56
     49c:	09 b6       	in	r0, 0x39	; 57
     49e:	0f 92       	push	r0
     4a0:	19 be       	out	0x39, r1	; 57
     4a2:	0a b6       	in	r0, 0x3a	; 58
     4a4:	0f 92       	push	r0
     4a6:	1a be       	out	0x3a, r1	; 58
     4a8:	0b b6       	in	r0, 0x3b	; 59
     4aa:	0f 92       	push	r0
     4ac:	1b be       	out	0x3b, r1	; 59
     4ae:	2f 93       	push	r18
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ef 93       	push	r30
     4be:	ff 93       	push	r31
	adc_data[1][adcCnt[1].CNT++] = ADCA.CH1.RES;
     4c0:	a1 ef       	ldi	r26, 0xF1	; 241
     4c2:	b3 e2       	ldi	r27, 0x23	; 35
     4c4:	2c 91       	ld	r18, X
     4c6:	2f 70       	andi	r18, 0x0F	; 15
     4c8:	e2 2f       	mov	r30, r18
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	c0 e0       	ldi	r28, 0x00	; 0
     4ce:	d2 e0       	ldi	r29, 0x02	; 2
     4d0:	8c a5       	ldd	r24, Y+44	; 0x2c
     4d2:	9d a5       	ldd	r25, Y+45	; 0x2d
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	e8 5e       	subi	r30, 0xE8	; 232
     4da:	fb 4d       	sbci	r31, 0xDB	; 219
     4dc:	80 83       	st	Z, r24
     4de:	91 83       	std	Z+1, r25	; 0x01
     4e0:	2f 5f       	subi	r18, 0xFF	; 255
     4e2:	2f 70       	andi	r18, 0x0F	; 15
     4e4:	8c 91       	ld	r24, X
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	82 2b       	or	r24, r18
     4ea:	8c 93       	st	X, r24
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	bf 91       	pop	r27
     4f6:	af 91       	pop	r26
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	2f 91       	pop	r18
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	0a be       	out	0x3a, r0	; 58
     506:	0f 90       	pop	r0
     508:	09 be       	out	0x39, r0	; 57
     50a:	0f 90       	pop	r0
     50c:	08 be       	out	0x38, r0	; 56
     50e:	0f 90       	pop	r0
     510:	0f be       	out	0x3f, r0	; 63
     512:	0f 90       	pop	r0
     514:	1f 90       	pop	r1
     516:	18 95       	reti

00000518 <__vector_73>:
ISR(ADCA_CH2_vect)
{
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	08 b6       	in	r0, 0x38	; 56
     524:	0f 92       	push	r0
     526:	18 be       	out	0x38, r1	; 56
     528:	09 b6       	in	r0, 0x39	; 57
     52a:	0f 92       	push	r0
     52c:	19 be       	out	0x39, r1	; 57
     52e:	0a b6       	in	r0, 0x3a	; 58
     530:	0f 92       	push	r0
     532:	1a be       	out	0x3a, r1	; 58
     534:	0b b6       	in	r0, 0x3b	; 59
     536:	0f 92       	push	r0
     538:	1b be       	out	0x3b, r1	; 59
     53a:	2f 93       	push	r18
     53c:	8f 93       	push	r24
     53e:	9f 93       	push	r25
     540:	af 93       	push	r26
     542:	bf 93       	push	r27
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ef 93       	push	r30
     54a:	ff 93       	push	r31
	adc_data[2][adcCnt[2].CNT++] = ADCA.CH2.RES;
     54c:	a2 ef       	ldi	r26, 0xF2	; 242
     54e:	b3 e2       	ldi	r27, 0x23	; 35
     550:	2c 91       	ld	r18, X
     552:	2f 70       	andi	r18, 0x0F	; 15
     554:	e2 2f       	mov	r30, r18
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	c0 e0       	ldi	r28, 0x00	; 0
     55a:	d2 e0       	ldi	r29, 0x02	; 2
     55c:	8c a9       	ldd	r24, Y+52	; 0x34
     55e:	9d a9       	ldd	r25, Y+53	; 0x35
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	e8 5c       	subi	r30, 0xC8	; 200
     566:	fb 4d       	sbci	r31, 0xDB	; 219
     568:	80 83       	st	Z, r24
     56a:	91 83       	std	Z+1, r25	; 0x01
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	2f 70       	andi	r18, 0x0F	; 15
     570:	8c 91       	ld	r24, X
     572:	80 7f       	andi	r24, 0xF0	; 240
     574:	82 2b       	or	r24, r18
     576:	8c 93       	st	X, r24
}
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	bf 91       	pop	r27
     582:	af 91       	pop	r26
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	2f 91       	pop	r18
     58a:	0f 90       	pop	r0
     58c:	0b be       	out	0x3b, r0	; 59
     58e:	0f 90       	pop	r0
     590:	0a be       	out	0x3a, r0	; 58
     592:	0f 90       	pop	r0
     594:	09 be       	out	0x39, r0	; 57
     596:	0f 90       	pop	r0
     598:	08 be       	out	0x38, r0	; 56
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <__vector_74>:
ISR(ADCA_CH3_vect)
{
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	08 b6       	in	r0, 0x38	; 56
     5b0:	0f 92       	push	r0
     5b2:	18 be       	out	0x38, r1	; 56
     5b4:	09 b6       	in	r0, 0x39	; 57
     5b6:	0f 92       	push	r0
     5b8:	19 be       	out	0x39, r1	; 57
     5ba:	0a b6       	in	r0, 0x3a	; 58
     5bc:	0f 92       	push	r0
     5be:	1a be       	out	0x3a, r1	; 58
     5c0:	0b b6       	in	r0, 0x3b	; 59
     5c2:	0f 92       	push	r0
     5c4:	1b be       	out	0x3b, r1	; 59
     5c6:	2f 93       	push	r18
     5c8:	8f 93       	push	r24
     5ca:	9f 93       	push	r25
     5cc:	af 93       	push	r26
     5ce:	bf 93       	push	r27
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ef 93       	push	r30
     5d6:	ff 93       	push	r31
	adc_data[3][adcCnt[3].CNT++] = ADCA.CH3.RES;
     5d8:	a3 ef       	ldi	r26, 0xF3	; 243
     5da:	b3 e2       	ldi	r27, 0x23	; 35
     5dc:	2c 91       	ld	r18, X
     5de:	2f 70       	andi	r18, 0x0F	; 15
     5e0:	e2 2f       	mov	r30, r18
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	c0 e0       	ldi	r28, 0x00	; 0
     5e6:	d2 e0       	ldi	r29, 0x02	; 2
     5e8:	8c ad       	ldd	r24, Y+60	; 0x3c
     5ea:	9d ad       	ldd	r25, Y+61	; 0x3d
     5ec:	ee 0f       	add	r30, r30
     5ee:	ff 1f       	adc	r31, r31
     5f0:	e8 5a       	subi	r30, 0xA8	; 168
     5f2:	fb 4d       	sbci	r31, 0xDB	; 219
     5f4:	80 83       	st	Z, r24
     5f6:	91 83       	std	Z+1, r25	; 0x01
     5f8:	2f 5f       	subi	r18, 0xFF	; 255
     5fa:	2f 70       	andi	r18, 0x0F	; 15
     5fc:	8c 91       	ld	r24, X
     5fe:	80 7f       	andi	r24, 0xF0	; 240
     600:	82 2b       	or	r24, r18
     602:	8c 93       	st	X, r24
}
     604:	ff 91       	pop	r31
     606:	ef 91       	pop	r30
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	bf 91       	pop	r27
     60e:	af 91       	pop	r26
     610:	9f 91       	pop	r25
     612:	8f 91       	pop	r24
     614:	2f 91       	pop	r18
     616:	0f 90       	pop	r0
     618:	0b be       	out	0x3b, r0	; 59
     61a:	0f 90       	pop	r0
     61c:	0a be       	out	0x3a, r0	; 58
     61e:	0f 90       	pop	r0
     620:	09 be       	out	0x39, r0	; 57
     622:	0f 90       	pop	r0
     624:	08 be       	out	0x38, r0	; 56
     626:	0f 90       	pop	r0
     628:	0f be       	out	0x3f, r0	; 63
     62a:	0f 90       	pop	r0
     62c:	1f 90       	pop	r1
     62e:	18 95       	reti

00000630 <__vector_39>:



ISR(ADCB_CH0_vect)
{
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	08 b6       	in	r0, 0x38	; 56
     63c:	0f 92       	push	r0
     63e:	18 be       	out	0x38, r1	; 56
     640:	09 b6       	in	r0, 0x39	; 57
     642:	0f 92       	push	r0
     644:	19 be       	out	0x39, r1	; 57
     646:	0a b6       	in	r0, 0x3a	; 58
     648:	0f 92       	push	r0
     64a:	1a be       	out	0x3a, r1	; 58
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	1b be       	out	0x3b, r1	; 59
     652:	2f 93       	push	r18
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ef 93       	push	r30
     662:	ff 93       	push	r31
	adc_data[4][adcCnt[4].CNT++] = ADCB.CH0.RES;
     664:	a4 ef       	ldi	r26, 0xF4	; 244
     666:	b3 e2       	ldi	r27, 0x23	; 35
     668:	2c 91       	ld	r18, X
     66a:	2f 70       	andi	r18, 0x0F	; 15
     66c:	e2 2f       	mov	r30, r18
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	c0 e4       	ldi	r28, 0x40	; 64
     672:	d2 e0       	ldi	r29, 0x02	; 2
     674:	8c a1       	ldd	r24, Y+36	; 0x24
     676:	9d a1       	ldd	r25, Y+37	; 0x25
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	e8 58       	subi	r30, 0x88	; 136
     67e:	fb 4d       	sbci	r31, 0xDB	; 219
     680:	80 83       	st	Z, r24
     682:	91 83       	std	Z+1, r25	; 0x01
     684:	2f 5f       	subi	r18, 0xFF	; 255
     686:	2f 70       	andi	r18, 0x0F	; 15
     688:	8c 91       	ld	r24, X
     68a:	80 7f       	andi	r24, 0xF0	; 240
     68c:	82 2b       	or	r24, r18
     68e:	8c 93       	st	X, r24
}
     690:	ff 91       	pop	r31
     692:	ef 91       	pop	r30
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	bf 91       	pop	r27
     69a:	af 91       	pop	r26
     69c:	9f 91       	pop	r25
     69e:	8f 91       	pop	r24
     6a0:	2f 91       	pop	r18
     6a2:	0f 90       	pop	r0
     6a4:	0b be       	out	0x3b, r0	; 59
     6a6:	0f 90       	pop	r0
     6a8:	0a be       	out	0x3a, r0	; 58
     6aa:	0f 90       	pop	r0
     6ac:	09 be       	out	0x39, r0	; 57
     6ae:	0f 90       	pop	r0
     6b0:	08 be       	out	0x38, r0	; 56
     6b2:	0f 90       	pop	r0
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	0f 90       	pop	r0
     6b8:	1f 90       	pop	r1
     6ba:	18 95       	reti

000006bc <__vector_40>:
ISR(ADCB_CH1_vect)
{
     6bc:	1f 92       	push	r1
     6be:	0f 92       	push	r0
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	0f 92       	push	r0
     6c4:	11 24       	eor	r1, r1
     6c6:	08 b6       	in	r0, 0x38	; 56
     6c8:	0f 92       	push	r0
     6ca:	18 be       	out	0x38, r1	; 56
     6cc:	09 b6       	in	r0, 0x39	; 57
     6ce:	0f 92       	push	r0
     6d0:	19 be       	out	0x39, r1	; 57
     6d2:	0a b6       	in	r0, 0x3a	; 58
     6d4:	0f 92       	push	r0
     6d6:	1a be       	out	0x3a, r1	; 58
     6d8:	0b b6       	in	r0, 0x3b	; 59
     6da:	0f 92       	push	r0
     6dc:	1b be       	out	0x3b, r1	; 59
     6de:	2f 93       	push	r18
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ef 93       	push	r30
     6ee:	ff 93       	push	r31
	adc_data[5][adcCnt[5].CNT++] = ADCB.CH1.RES;
     6f0:	a5 ef       	ldi	r26, 0xF5	; 245
     6f2:	b3 e2       	ldi	r27, 0x23	; 35
     6f4:	2c 91       	ld	r18, X
     6f6:	2f 70       	andi	r18, 0x0F	; 15
     6f8:	e2 2f       	mov	r30, r18
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	c0 e4       	ldi	r28, 0x40	; 64
     6fe:	d2 e0       	ldi	r29, 0x02	; 2
     700:	8c a5       	ldd	r24, Y+44	; 0x2c
     702:	9d a5       	ldd	r25, Y+45	; 0x2d
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	e8 56       	subi	r30, 0x68	; 104
     70a:	fb 4d       	sbci	r31, 0xDB	; 219
     70c:	80 83       	st	Z, r24
     70e:	91 83       	std	Z+1, r25	; 0x01
     710:	2f 5f       	subi	r18, 0xFF	; 255
     712:	2f 70       	andi	r18, 0x0F	; 15
     714:	8c 91       	ld	r24, X
     716:	80 7f       	andi	r24, 0xF0	; 240
     718:	82 2b       	or	r24, r18
     71a:	8c 93       	st	X, r24
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	2f 91       	pop	r18
     72e:	0f 90       	pop	r0
     730:	0b be       	out	0x3b, r0	; 59
     732:	0f 90       	pop	r0
     734:	0a be       	out	0x3a, r0	; 58
     736:	0f 90       	pop	r0
     738:	09 be       	out	0x39, r0	; 57
     73a:	0f 90       	pop	r0
     73c:	08 be       	out	0x38, r0	; 56
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	1f 90       	pop	r1
     746:	18 95       	reti

00000748 <__vector_41>:
ISR(ADCB_CH2_vect)
{
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	08 b6       	in	r0, 0x38	; 56
     754:	0f 92       	push	r0
     756:	18 be       	out	0x38, r1	; 56
     758:	09 b6       	in	r0, 0x39	; 57
     75a:	0f 92       	push	r0
     75c:	19 be       	out	0x39, r1	; 57
     75e:	0a b6       	in	r0, 0x3a	; 58
     760:	0f 92       	push	r0
     762:	1a be       	out	0x3a, r1	; 58
     764:	0b b6       	in	r0, 0x3b	; 59
     766:	0f 92       	push	r0
     768:	1b be       	out	0x3b, r1	; 59
     76a:	2f 93       	push	r18
     76c:	8f 93       	push	r24
     76e:	9f 93       	push	r25
     770:	af 93       	push	r26
     772:	bf 93       	push	r27
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
	adc_data[6][adcCnt[6].CNT++] = ADCB.CH2.RES;
     77c:	a6 ef       	ldi	r26, 0xF6	; 246
     77e:	b3 e2       	ldi	r27, 0x23	; 35
     780:	2c 91       	ld	r18, X
     782:	2f 70       	andi	r18, 0x0F	; 15
     784:	e2 2f       	mov	r30, r18
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	c0 e4       	ldi	r28, 0x40	; 64
     78a:	d2 e0       	ldi	r29, 0x02	; 2
     78c:	8c a9       	ldd	r24, Y+52	; 0x34
     78e:	9d a9       	ldd	r25, Y+53	; 0x35
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	e8 54       	subi	r30, 0x48	; 72
     796:	fb 4d       	sbci	r31, 0xDB	; 219
     798:	80 83       	st	Z, r24
     79a:	91 83       	std	Z+1, r25	; 0x01
     79c:	2f 5f       	subi	r18, 0xFF	; 255
     79e:	2f 70       	andi	r18, 0x0F	; 15
     7a0:	8c 91       	ld	r24, X
     7a2:	80 7f       	andi	r24, 0xF0	; 240
     7a4:	82 2b       	or	r24, r18
     7a6:	8c 93       	st	X, r24
}
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	bf 91       	pop	r27
     7b2:	af 91       	pop	r26
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	2f 91       	pop	r18
     7ba:	0f 90       	pop	r0
     7bc:	0b be       	out	0x3b, r0	; 59
     7be:	0f 90       	pop	r0
     7c0:	0a be       	out	0x3a, r0	; 58
     7c2:	0f 90       	pop	r0
     7c4:	09 be       	out	0x39, r0	; 57
     7c6:	0f 90       	pop	r0
     7c8:	08 be       	out	0x38, r0	; 56
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <__vector_42>:
ISR(ADCB_CH3_vect)
{
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
     7de:	08 b6       	in	r0, 0x38	; 56
     7e0:	0f 92       	push	r0
     7e2:	18 be       	out	0x38, r1	; 56
     7e4:	09 b6       	in	r0, 0x39	; 57
     7e6:	0f 92       	push	r0
     7e8:	19 be       	out	0x39, r1	; 57
     7ea:	0a b6       	in	r0, 0x3a	; 58
     7ec:	0f 92       	push	r0
     7ee:	1a be       	out	0x3a, r1	; 58
     7f0:	0b b6       	in	r0, 0x3b	; 59
     7f2:	0f 92       	push	r0
     7f4:	1b be       	out	0x3b, r1	; 59
     7f6:	2f 93       	push	r18
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31
	adc_data[7][adcCnt[7].CNT++] = ADCB.CH3.RES;
     808:	a7 ef       	ldi	r26, 0xF7	; 247
     80a:	b3 e2       	ldi	r27, 0x23	; 35
     80c:	2c 91       	ld	r18, X
     80e:	2f 70       	andi	r18, 0x0F	; 15
     810:	e2 2f       	mov	r30, r18
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	c0 e4       	ldi	r28, 0x40	; 64
     816:	d2 e0       	ldi	r29, 0x02	; 2
     818:	8c ad       	ldd	r24, Y+60	; 0x3c
     81a:	9d ad       	ldd	r25, Y+61	; 0x3d
     81c:	ee 0f       	add	r30, r30
     81e:	ff 1f       	adc	r31, r31
     820:	e8 52       	subi	r30, 0x28	; 40
     822:	fb 4d       	sbci	r31, 0xDB	; 219
     824:	80 83       	st	Z, r24
     826:	91 83       	std	Z+1, r25	; 0x01
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	2f 70       	andi	r18, 0x0F	; 15
     82c:	8c 91       	ld	r24, X
     82e:	80 7f       	andi	r24, 0xF0	; 240
     830:	82 2b       	or	r24, r18
     832:	8c 93       	st	X, r24
}
     834:	ff 91       	pop	r31
     836:	ef 91       	pop	r30
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	0b be       	out	0x3b, r0	; 59
     84a:	0f 90       	pop	r0
     84c:	0a be       	out	0x3a, r0	; 58
     84e:	0f 90       	pop	r0
     850:	09 be       	out	0x39, r0	; 57
     852:	0f 90       	pop	r0
     854:	08 be       	out	0x38, r0	; 56
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <ATtinyServoInit>:
}

void disableServo(uint8_t servoNumber){
	servo[--servoNumber].configReg.params.enabled = false;	//the board uses numbers 1 to 24 while the code is written for 0 to 23
	servo[servoNumber].servoTime = 0;						//this is how the ATtiny knows the servo is deactivated
	servo[servoNumber].configReg.params.upToDate = false;	//this is used similar to that of enabled servos
     860:	88 e0       	ldi	r24, 0x08	; 8
     862:	80 93 81 06 	sts	0x0681, r24
     866:	44 e0       	ldi	r20, 0x04	; 4
     868:	40 93 82 06 	sts	0x0682, r20
     86c:	80 ee       	ldi	r24, 0xE0	; 224
     86e:	95 e2       	ldi	r25, 0x25	; 37
     870:	80 93 fa 24 	sts	0x24FA, r24
     874:	90 93 fb 24 	sts	0x24FB, r25
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	95 e2       	ldi	r25, 0x25	; 37
     87c:	80 93 f8 24 	sts	0x24F8, r24
     880:	90 93 f9 24 	sts	0x24F9, r25
     884:	80 93 fc 24 	sts	0x24FC, r24
     888:	90 93 fd 24 	sts	0x24FD, r25
     88c:	80 93 fe 24 	sts	0x24FE, r24
     890:	90 93 ff 24 	sts	0x24FF, r25
     894:	8c e0       	ldi	r24, 0x0C	; 12
     896:	80 93 a4 0a 	sts	0x0AA4, r24
     89a:	33 e0       	ldi	r19, 0x03	; 3
     89c:	30 93 a5 0a 	sts	0x0AA5, r19
     8a0:	80 ec       	ldi	r24, 0xC0	; 192
     8a2:	80 93 a6 0a 	sts	0x0AA6, r24
     8a6:	87 ea       	ldi	r24, 0xA7	; 167
     8a8:	80 93 a7 0a 	sts	0x0AA7, r24
     8ac:	80 e1       	ldi	r24, 0x10	; 16
     8ae:	80 93 92 06 	sts	0x0692, r24
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	20 93 89 06 	sts	0x0689, r18
     8b8:	40 93 8a 06 	sts	0x068A, r20
     8bc:	80 e1       	ldi	r24, 0x10	; 16
     8be:	97 e2       	ldi	r25, 0x27	; 39
     8c0:	80 93 66 0a 	sts	0x0A66, r24
     8c4:	90 93 67 0a 	sts	0x0A67, r25
     8c8:	85 e0       	ldi	r24, 0x05	; 5
     8ca:	80 93 40 0a 	sts	0x0A40, r24
     8ce:	30 93 41 0a 	sts	0x0A41, r19
     8d2:	20 93 46 0a 	sts	0x0A46, r18
     8d6:	80 91 a2 00 	lds	r24, 0x00A2
     8da:	81 60       	ori	r24, 0x01	; 1
     8dc:	80 93 a2 00 	sts	0x00A2, r24
     8e0:	a1 ee       	ldi	r26, 0xE1	; 225
     8e2:	b5 e2       	ldi	r27, 0x25	; 37
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	e8 0f       	add	r30, r24
     8f0:	f9 1f       	adc	r31, r25
     8f2:	ed 51       	subi	r30, 0x1D	; 29
     8f4:	fa 4d       	sbci	r31, 0xDA	; 218
     8f6:	20 81       	ld	r18, Z
     8f8:	2f 77       	andi	r18, 0x7F	; 127
     8fa:	20 83       	st	Z, r18
     8fc:	1d 92       	st	X+, r1
     8fe:	1c 92       	st	X, r1
     900:	11 97       	sbiw	r26, 0x01	; 1
     902:	20 81       	ld	r18, Z
     904:	20 64       	ori	r18, 0x40	; 64
     906:	20 83       	st	Z, r18
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	13 96       	adiw	r26, 0x03	; 3
     90c:	88 31       	cpi	r24, 0x18	; 24
     90e:	91 05       	cpc	r25, r1
     910:	59 f7       	brne	.-42     	; 0x8e8 <ATtinyServoInit+0x88>
     912:	08 95       	ret

00000914 <servo_getchar>:
     914:	e0 91 fe 24 	lds	r30, 0x24FE
     918:	f0 91 ff 24 	lds	r31, 0x24FF
     91c:	80 91 fa 24 	lds	r24, 0x24FA
     920:	90 91 fb 24 	lds	r25, 0x24FB
     924:	e8 17       	cp	r30, r24
     926:	f9 07       	cpc	r31, r25
     928:	89 f4       	brne	.+34     	; 0x94c <servo_getchar+0x38>
     92a:	20 81       	ld	r18, Z
     92c:	10 82       	st	Z, r1
     92e:	80 91 f8 24 	lds	r24, 0x24F8
     932:	90 91 f9 24 	lds	r25, 0x24F9
     936:	80 93 fe 24 	sts	0x24FE, r24
     93a:	90 93 ff 24 	sts	0x24FF, r25
     93e:	80 91 a1 0a 	lds	r24, 0x0AA1
     942:	85 ff       	sbrs	r24, 5
     944:	fc cf       	rjmp	.-8      	; 0x93e <servo_getchar+0x2a>
     946:	20 93 a0 0a 	sts	0x0AA0, r18
     94a:	08 95       	ret
     94c:	80 91 a1 0a 	lds	r24, 0x0AA1
     950:	85 ff       	sbrs	r24, 5
     952:	fc cf       	rjmp	.-8      	; 0x94c <servo_getchar+0x38>
     954:	80 81       	ld	r24, Z
     956:	80 93 a0 0a 	sts	0x0AA0, r24
     95a:	11 92       	st	Z+, r1
     95c:	e0 93 fe 24 	sts	0x24FE, r30
     960:	f0 93 ff 24 	sts	0x24FF, r31
     964:	08 95       	ret

00000966 <storeServo>:
     966:	e0 91 fc 24 	lds	r30, 0x24FC
     96a:	f0 91 fd 24 	lds	r31, 0x24FD
     96e:	20 91 fa 24 	lds	r18, 0x24FA
     972:	30 91 fb 24 	lds	r19, 0x24FB
     976:	e2 17       	cp	r30, r18
     978:	f3 07       	cpc	r31, r19
     97a:	51 f4       	brne	.+20     	; 0x990 <storeServo+0x2a>
     97c:	80 83       	st	Z, r24
     97e:	80 91 f8 24 	lds	r24, 0x24F8
     982:	90 91 f9 24 	lds	r25, 0x24F9
     986:	80 93 fc 24 	sts	0x24FC, r24
     98a:	90 93 fd 24 	sts	0x24FD, r25
     98e:	08 95       	ret
     990:	81 93       	st	Z+, r24
     992:	e0 93 fc 24 	sts	0x24FC, r30
     996:	f0 93 fd 24 	sts	0x24FD, r31
     99a:	08 95       	ret

0000099c <dataInServoBuffer>:
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	40 91 fc 24 	lds	r20, 0x24FC
     9a2:	50 91 fd 24 	lds	r21, 0x24FD
     9a6:	20 91 fe 24 	lds	r18, 0x24FE
     9aa:	30 91 ff 24 	lds	r19, 0x24FF
     9ae:	42 17       	cp	r20, r18
     9b0:	53 07       	cpc	r21, r19
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <dataInServoBuffer+0x1a>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	08 95       	ret

000009b8 <__vector_43>:
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	08 b6       	in	r0, 0x38	; 56
     9c4:	0f 92       	push	r0
     9c6:	18 be       	out	0x38, r1	; 56
     9c8:	09 b6       	in	r0, 0x39	; 57
     9ca:	0f 92       	push	r0
     9cc:	19 be       	out	0x39, r1	; 57
     9ce:	0b b6       	in	r0, 0x3b	; 59
     9d0:	0f 92       	push	r0
     9d2:	1b be       	out	0x3b, r1	; 59
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
     9ec:	f8 94       	cli
     9ee:	d6 df       	rcall	.-84     	; 0x99c <dataInServoBuffer>
     9f0:	88 23       	and	r24, r24
     9f2:	19 f0       	breq	.+6      	; 0x9fa <__vector_43+0x42>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	8d df       	rcall	.-230    	; 0x914 <servo_getchar>
     9fa:	78 94       	sei
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0b be       	out	0x3b, r0	; 59
     a18:	0f 90       	pop	r0
     a1a:	09 be       	out	0x39, r0	; 57
     a1c:	0f 90       	pop	r0
     a1e:	08 be       	out	0x38, r0	; 56
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <__vector_53>:
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	08 b6       	in	r0, 0x38	; 56
     a36:	0f 92       	push	r0
     a38:	18 be       	out	0x38, r1	; 56
     a3a:	09 b6       	in	r0, 0x39	; 57
     a3c:	0f 92       	push	r0
     a3e:	19 be       	out	0x39, r1	; 57
     a40:	0a b6       	in	r0, 0x3a	; 58
     a42:	0f 92       	push	r0
     a44:	1a be       	out	0x3a, r1	; 58
     a46:	0b b6       	in	r0, 0x3b	; 59
     a48:	0f 92       	push	r0
     a4a:	1b be       	out	0x3b, r1	; 59
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	2f 93       	push	r18
     a58:	3f 93       	push	r19
     a5a:	4f 93       	push	r20
     a5c:	5f 93       	push	r21
     a5e:	6f 93       	push	r22
     a60:	7f 93       	push	r23
     a62:	8f 93       	push	r24
     a64:	9f 93       	push	r25
     a66:	af 93       	push	r26
     a68:	bf 93       	push	r27
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
     a72:	f8 94       	cli
     a74:	41 ee       	ldi	r20, 0xE1	; 225
     a76:	e4 2e       	mov	r14, r20
     a78:	45 e2       	ldi	r20, 0x25	; 37
     a7a:	f4 2e       	mov	r15, r20
     a7c:	03 ee       	ldi	r16, 0xE3	; 227
     a7e:	15 e2       	ldi	r17, 0x25	; 37
     a80:	c0 e0       	ldi	r28, 0x00	; 0
     a82:	d0 e0       	ldi	r29, 0x00	; 0
     a84:	fe 01       	movw	r30, r28
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	ec 0f       	add	r30, r28
     a8c:	fd 1f       	adc	r31, r29
     a8e:	ed 51       	subi	r30, 0x1D	; 29
     a90:	fa 4d       	sbci	r31, 0xDA	; 218
     a92:	80 81       	ld	r24, Z
     a94:	86 ff       	sbrs	r24, 6
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <__vector_53+0x80>
     a98:	d8 01       	movw	r26, r16
     a9a:	8c 91       	ld	r24, X
     a9c:	8f 5f       	subi	r24, 0xFF	; 255
     a9e:	8c 93       	st	X, r24
     aa0:	80 ff       	sbrs	r24, 0
     aa2:	12 c0       	rjmp	.+36     	; 0xac8 <__vector_53+0x9e>
     aa4:	80 81       	ld	r24, Z
     aa6:	8f 7b       	andi	r24, 0xBF	; 191
     aa8:	0e c0       	rjmp	.+28     	; 0xac6 <__vector_53+0x9c>
     aaa:	8c 2f       	mov	r24, r28
     aac:	5c df       	rcall	.-328    	; 0x966 <storeServo>
     aae:	f7 01       	movw	r30, r14
     ab0:	81 81       	ldd	r24, Z+1	; 0x01
     ab2:	59 df       	rcall	.-334    	; 0x966 <storeServo>
     ab4:	d7 01       	movw	r26, r14
     ab6:	8c 91       	ld	r24, X
     ab8:	56 df       	rcall	.-340    	; 0x966 <storeServo>
     aba:	8c 2f       	mov	r24, r28
     abc:	80 68       	ori	r24, 0x80	; 128
     abe:	53 df       	rcall	.-346    	; 0x966 <storeServo>
     ac0:	8c 2f       	mov	r24, r28
     ac2:	80 54       	subi	r24, 0x40	; 64
     ac4:	f8 01       	movw	r30, r16
     ac6:	80 83       	st	Z, r24
     ac8:	21 96       	adiw	r28, 0x01	; 1
     aca:	f3 e0       	ldi	r31, 0x03	; 3
     acc:	ef 0e       	add	r14, r31
     ace:	f1 1c       	adc	r15, r1
     ad0:	0d 5f       	subi	r16, 0xFD	; 253
     ad2:	1f 4f       	sbci	r17, 0xFF	; 255
     ad4:	c8 31       	cpi	r28, 0x18	; 24
     ad6:	d1 05       	cpc	r29, r1
     ad8:	a9 f6       	brne	.-86     	; 0xa84 <__vector_53+0x5a>
     ada:	78 94       	sei
     adc:	ff 91       	pop	r31
     ade:	ef 91       	pop	r30
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	bf 91       	pop	r27
     ae6:	af 91       	pop	r26
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	7f 91       	pop	r23
     aee:	6f 91       	pop	r22
     af0:	5f 91       	pop	r21
     af2:	4f 91       	pop	r20
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	0f 90       	pop	r0
     b04:	0b be       	out	0x3b, r0	; 59
     b06:	0f 90       	pop	r0
     b08:	0a be       	out	0x3a, r0	; 58
     b0a:	0f 90       	pop	r0
     b0c:	09 be       	out	0x39, r0	; 57
     b0e:	0f 90       	pop	r0
     b10:	08 be       	out	0x38, r0	; 56
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <setServoAngle>:
}

void setServoAngle(uint8_t servoNumber,uint8_t angle){
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	96 2f       	mov	r25, r22
     b26:	65 3b       	cpi	r22, 0xB5	; 181
     b28:	08 f0       	brcs	.+2      	; 0xb2c <setServoAngle+0x10>
     b2a:	94 eb       	ldi	r25, 0xB4	; 180
	//also minimumAngleTime should be configurable in later revisions

//this is a default implementation
	
	//--servonumber compensates for the mismatch between code numbering and the pcb labeling 0-23 vs 1-24
	servo[--servoNumber].servoTime = defaultMinimumAngleTime + angle*timerTicksPerDegree; //600us (0 degrees) + angle displacement time  
     b2c:	81 50       	subi	r24, 0x01	; 1
     b2e:	68 2f       	mov	r22, r24
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	eb 01       	movw	r28, r22
     b34:	cc 0f       	add	r28, r28
     b36:	dd 1f       	adc	r29, r29
     b38:	c6 0f       	add	r28, r22
     b3a:	d7 1f       	adc	r29, r23
     b3c:	8e 01       	movw	r16, r28
     b3e:	0f 51       	subi	r16, 0x1F	; 31
     b40:	1a 4d       	sbci	r17, 0xDA	; 218
     b42:	8f e0       	ldi	r24, 0x0F	; 15
     b44:	98 9f       	mul	r25, r24
     b46:	b0 01       	movw	r22, r0
     b48:	11 24       	eor	r1, r1
     b4a:	88 27       	eor	r24, r24
     b4c:	77 fd       	sbrc	r23, 7
     b4e:	80 95       	com	r24
     b50:	98 2f       	mov	r25, r24
     b52:	e2 d5       	rcall	.+3012   	; 0x1718 <__floatsisf>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	41 e6       	ldi	r20, 0x61	; 97
     b5a:	54 e4       	ldi	r21, 0x44	; 68
     b5c:	4b d5       	rcall	.+2710   	; 0x15f4 <__addsf3>
     b5e:	ae d5       	rcall	.+2908   	; 0x16bc <__fixunssfsi>
     b60:	f8 01       	movw	r30, r16
     b62:	60 83       	st	Z, r22
     b64:	71 83       	std	Z+1, r23	; 0x01
	servo[servoNumber].configReg.params.enabled = true;		//if the servo wasn't enabled it is now
     b66:	cd 51       	subi	r28, 0x1D	; 29
     b68:	da 4d       	sbci	r29, 0xDA	; 218
     b6a:	88 81       	ld	r24, Y
	servo[servoNumber].configReg.params.upToDate = false;	//this says that the servo should be updated immediately.
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	8f 7b       	andi	r24, 0xBF	; 191
     b70:	88 83       	st	Y, r24
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <clockInit>:
#include "clock.h"


void clockInit()
{	
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;
     b7c:	80 91 50 00 	lds	r24, 0x0050
     b80:	86 60       	ori	r24, 0x06	; 6
     b82:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm) || !(OSC.STATUS & OSC_RC32KRDY_bm));
     b86:	80 91 51 00 	lds	r24, 0x0051
     b8a:	81 ff       	sbrs	r24, 1
     b8c:	fc cf       	rjmp	.-8      	; 0xb86 <clockInit+0xa>
     b8e:	80 91 51 00 	lds	r24, 0x0051
     b92:	82 ff       	sbrs	r24, 2
     b94:	f8 cf       	rjmp	.-16     	; 0xb86 <clockInit+0xa>


	CCP = CCP_IOREG_gc;
     b96:	88 ed       	ldi	r24, 0xD8	; 216
     b98:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	80 93 40 00 	sts	0x0040, r24

	OSC.RC32KCAL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, RCOSC32K) );
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	1e d5       	rcall	.+2620   	; 0x15e0 <ReadCalibrationByte>
     ba4:	80 93 54 00 	sts	0x0054, r24

	DFLLRC32M.CALB = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, RCOSC32M) );
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	1a d5       	rcall	.+2612   	; 0x15e0 <ReadCalibrationByte>
     bac:	80 93 63 00 	sts	0x0063, r24
	DFLLRC32M.CALA = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, RCOSC32MA) );
     bb0:	84 e0       	ldi	r24, 0x04	; 4
     bb2:	16 d5       	rcall	.+2604   	; 0x15e0 <ReadCalibrationByte>
     bb4:	80 93 62 00 	sts	0x0062, r24
	
	OSC.DFLLCTRL = OSC_RC32MCREF_RC32K_gc;
     bb8:	10 92 56 00 	sts	0x0056, r1

	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     bbc:	80 91 60 00 	lds	r24, 0x0060
     bc0:	81 60       	ori	r24, 0x01	; 1
     bc2:	80 93 60 00 	sts	0x0060, r24
	DFLLRC32M.COMP0 = 0x12;
     bc6:	82 e1       	ldi	r24, 0x12	; 18
     bc8:	80 93 64 00 	sts	0x0064, r24
	DFLLRC32M.COMP1 = 0x7A;
     bcc:	8a e7       	ldi	r24, 0x7A	; 122
     bce:	80 93 65 00 	sts	0x0065, r24
     bd2:	08 95       	ret

00000bd4 <main>:
#include "Epiphany.h"

int main(void)
{
	
	setup();
     bd4:	02 d0       	rcall	.+4      	; 0xbda <setup>
	
	while(1)
    {	
		loop();
     bd6:	0e d0       	rcall	.+28     	; 0xbf4 <loop>
     bd8:	fe cf       	rjmp	.-4      	; 0xbd6 <main+0x2>

00000bda <setup>:
	/* 
	* This function is only run once
	* place all your initializations 
	* and setup routines here
	*/
	clockInit();
     bda:	d0 df       	rcall	.-96     	; 0xb7c <clockInit>
	ATtinyServoInit();
     bdc:	41 de       	rcall	.-894    	; 0x860 <ATtinyServoInit>
		bufRxF1,bufTxF1;
		

void usartInit(USART_t *uart, long baud);//inilization routine for uart modules.  uart = &USARTxn where x is C-F n is 0-1

static inline void usbInit(long baud){ usartInit(&USARTC0,baud);}
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	52 ec       	ldi	r21, 0xC2	; 194
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 ea       	ldi	r24, 0xA0	; 160
     be8:	98 e0       	ldi	r25, 0x08	; 8
     bea:	13 d4       	rcall	.+2086   	; 0x1412 <usartInit>
	usbInit(115200);
	adcInit();
     bec:	ae db       	rcall	.-2212   	; 0x34a <adcInit>
	RTC_DelayInit();
     bee:	4c d0       	rcall	.+152    	; 0xc88 <RTC_DelayInit>
	sei();
     bf0:	78 94       	sei
     bf2:	08 95       	ret

00000bf4 <loop>:
}
	
void loop()
{
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
     bfa:	12 c0       	rjmp	.+36     	; 0xc20 <loop+0x2c>
	
	for(j=0;j<180;j++)
	{
		for(i=1;i<25;i++)
		{
			setServoAngle(i,j);
     bfc:	6d 2f       	mov	r22, r29
     bfe:	8c 2f       	mov	r24, r28
     c00:	8d df       	rcall	.-230    	; 0xb1c <setServoAngle>
     c02:	cf 5f       	subi	r28, 0xFF	; 255
{
	int j,i;
	
	for(j=0;j<180;j++)
	{
		for(i=1;i<25;i++)
     c04:	c9 31       	cpi	r28, 0x19	; 25
     c06:	d1 f7       	brne	.-12     	; 0xbfc <loop+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	83 ef       	ldi	r24, 0xF3	; 243
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	21 50       	subi	r18, 0x01	; 1
     c10:	80 40       	sbci	r24, 0x00	; 0
     c12:	90 40       	sbci	r25, 0x00	; 0
     c14:	e1 f7       	brne	.-8      	; 0xc0e <loop+0x1a>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <loop+0x24>
     c18:	00 00       	nop
     c1a:	df 5f       	subi	r29, 0xFF	; 255
	
void loop()
{
	int j,i;
	
	for(j=0;j<180;j++)
     c1c:	d4 3b       	cpi	r29, 0xB4	; 180
     c1e:	a1 f0       	breq	.+40     	; 0xc48 <loop+0x54>
	RTC_DelayInit();
	sei();
}
	
void loop()
{
     c20:	c1 e0       	ldi	r28, 0x01	; 1
     c22:	ec cf       	rjmp	.-40     	; 0xbfc <loop+0x8>
	
	for(j=180;j>0;j--)
	{
		for(i=1;i<25;i++)
		{
			setServoAngle(i,j);
     c24:	6d 2f       	mov	r22, r29
     c26:	8c 2f       	mov	r24, r28
     c28:	79 df       	rcall	.-270    	; 0xb1c <setServoAngle>
     c2a:	cf 5f       	subi	r28, 0xFF	; 255
		_delay_ms(20);
	}
	
	for(j=180;j>0;j--)
	{
		for(i=1;i<25;i++)
     c2c:	c9 31       	cpi	r28, 0x19	; 25
     c2e:	d1 f7       	brne	.-12     	; 0xc24 <loop+0x30>
     c30:	2f ef       	ldi	r18, 0xFF	; 255
     c32:	83 ef       	ldi	r24, 0xF3	; 243
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	21 50       	subi	r18, 0x01	; 1
     c38:	80 40       	sbci	r24, 0x00	; 0
     c3a:	90 40       	sbci	r25, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <loop+0x42>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <loop+0x4c>
     c40:	00 00       	nop
     c42:	d1 50       	subi	r29, 0x01	; 1
			setServoAngle(i,j);
		}
		_delay_ms(20);
	}
	
	for(j=180;j>0;j--)
     c44:	11 f4       	brne	.+4      	; 0xc4a <loop+0x56>
     c46:	03 c0       	rjmp	.+6      	; 0xc4e <loop+0x5a>
	
void loop()
{
	int j,i;
	
	for(j=0;j<180;j++)
     c48:	d4 eb       	ldi	r29, 0xB4	; 180
	RTC_DelayInit();
	sei();
}
	
void loop()
{
     c4a:	c1 e0       	ldi	r28, 0x01	; 1
     c4c:	eb cf       	rjmp	.-42     	; 0xc24 <loop+0x30>
		{
			setServoAngle(i,j);
		}
		_delay_ms(20);
	}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <RTC_Delay_ms>:
	RTC.CNT = 0;
	//hack to make delayOver true from the get go
	RTC_Delay_ms(1);
}

void RTC_Delay_ms(uint16_t delayTime){
     c54:	9c 01       	movw	r18, r24
	while(RTC.STATUS & RTC_SYNCBUSY_bm);
     c56:	80 91 01 04 	lds	r24, 0x0401
     c5a:	80 fd       	sbrc	r24, 0
     c5c:	fc cf       	rjmp	.-8      	; 0xc56 <RTC_Delay_ms+0x2>
	RTC.INTFLAGS |= RTC_OVFIF_bm;
     c5e:	80 91 03 04 	lds	r24, 0x0403
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	80 93 03 04 	sts	0x0403, r24
	delayTime+=delayTime/20;
     c68:	c9 01       	movw	r24, r18
     c6a:	64 e1       	ldi	r22, 0x14	; 20
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__udivmodhi4>
     c72:	62 0f       	add	r22, r18
     c74:	73 1f       	adc	r23, r19
	RTC.PER = delayTime;
     c76:	60 93 0a 04 	sts	0x040A, r22
     c7a:	70 93 0b 04 	sts	0x040B, r23
	RTC.CNT = 0;
     c7e:	10 92 08 04 	sts	0x0408, r1
     c82:	10 92 09 04 	sts	0x0409, r1
     c86:	08 95       	ret

00000c88 <RTC_DelayInit>:
 */ 
#include "RTC.h"

void RTC_DelayInit()
{
	while(RTC.STATUS & RTC_SYNCBUSY_bm);
     c88:	80 91 01 04 	lds	r24, 0x0401
     c8c:	80 fd       	sbrc	r24, 0
     c8e:	fc cf       	rjmp	.-8      	; 0xc88 <RTC_DelayInit>
	CLK.RTCCTRL |= CLK_RTCEN_bm | CLK_RTCSRC_RCOSC32_gc;
     c90:	80 91 43 00 	lds	r24, 0x0043
     c94:	8d 60       	ori	r24, 0x0D	; 13
     c96:	80 93 43 00 	sts	0x0043, r24

	RTC.CTRL = RTC_PRESCALER_DIV64_gc;
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	80 93 00 04 	sts	0x0400, r24
	RTC.CNT = 0;
     ca0:	10 92 08 04 	sts	0x0408, r1
     ca4:	10 92 09 04 	sts	0x0409, r1
	//hack to make delayOver true from the get go
	RTC_Delay_ms(1);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	d3 cf       	rjmp	.-90     	; 0xc54 <RTC_Delay_ms>

00000cae <bufferRead>:
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
	else return 1;	
}
     cae:	fc 01       	movw	r30, r24
     cb0:	a6 81       	ldd	r26, Z+6	; 0x06
     cb2:	b7 81       	ldd	r27, Z+7	; 0x07
     cb4:	22 81       	ldd	r18, Z+2	; 0x02
     cb6:	33 81       	ldd	r19, Z+3	; 0x03
     cb8:	8c 91       	ld	r24, X
     cba:	a2 17       	cp	r26, r18
     cbc:	b3 07       	cpc	r27, r19
     cbe:	29 f4       	brne	.+10     	; 0xcca <bufferRead+0x1c>
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	26 83       	std	Z+6, r18	; 0x06
     cc6:	37 83       	std	Z+7, r19	; 0x07
     cc8:	08 95       	ret
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	a6 83       	std	Z+6, r26	; 0x06
     cce:	b7 83       	std	Z+7, r27	; 0x07
     cd0:	08 95       	ret

00000cd2 <bufferWrite>:
     cd2:	fc 01       	movw	r30, r24
     cd4:	a4 81       	ldd	r26, Z+4	; 0x04
     cd6:	b5 81       	ldd	r27, Z+5	; 0x05
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	a8 17       	cp	r26, r24
     cde:	b9 07       	cpc	r27, r25
     ce0:	31 f4       	brne	.+12     	; 0xcee <bufferWrite+0x1c>
     ce2:	6c 93       	st	X, r22
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	84 83       	std	Z+4, r24	; 0x04
     cea:	95 83       	std	Z+5, r25	; 0x05
     cec:	08 95       	ret
     cee:	6d 93       	st	X+, r22
     cf0:	a4 83       	std	Z+4, r26	; 0x04
     cf2:	b5 83       	std	Z+5, r27	; 0x05
     cf4:	08 95       	ret

00000cf6 <__vector_25>:

ISR(USARTC0_RXC_vect){
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	08 b6       	in	r0, 0x38	; 56
     d02:	0f 92       	push	r0
     d04:	18 be       	out	0x38, r1	; 56
     d06:	09 b6       	in	r0, 0x39	; 57
     d08:	0f 92       	push	r0
     d0a:	19 be       	out	0x39, r1	; 57
     d0c:	0b b6       	in	r0, 0x3b	; 59
     d0e:	0f 92       	push	r0
     d10:	1b be       	out	0x3b, r1	; 59
     d12:	2f 93       	push	r18
     d14:	3f 93       	push	r19
     d16:	4f 93       	push	r20
     d18:	5f 93       	push	r21
     d1a:	6f 93       	push	r22
     d1c:	7f 93       	push	r23
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	af 93       	push	r26
     d24:	bf 93       	push	r27
     d26:	ef 93       	push	r30
     d28:	ff 93       	push	r31
	bufferWrite(&bufRxC0,USARTC0.DATA);
     d2a:	60 91 a0 08 	lds	r22, 0x08A0
     d2e:	88 ea       	ldi	r24, 0xA8	; 168
     d30:	93 e2       	ldi	r25, 0x23	; 35
     d32:	cf df       	rcall	.-98     	; 0xcd2 <bufferWrite>
}
     d34:	ff 91       	pop	r31
     d36:	ef 91       	pop	r30
     d38:	bf 91       	pop	r27
     d3a:	af 91       	pop	r26
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	7f 91       	pop	r23
     d42:	6f 91       	pop	r22
     d44:	5f 91       	pop	r21
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0b be       	out	0x3b, r0	; 59
     d50:	0f 90       	pop	r0
     d52:	09 be       	out	0x39, r0	; 57
     d54:	0f 90       	pop	r0
     d56:	08 be       	out	0x38, r0	; 56
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	0f 90       	pop	r0
     d5e:	1f 90       	pop	r1
     d60:	18 95       	reti

00000d62 <__vector_28>:
ISR(USARTC1_RXC_vect){
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	11 24       	eor	r1, r1
     d6c:	08 b6       	in	r0, 0x38	; 56
     d6e:	0f 92       	push	r0
     d70:	18 be       	out	0x38, r1	; 56
     d72:	09 b6       	in	r0, 0x39	; 57
     d74:	0f 92       	push	r0
     d76:	19 be       	out	0x39, r1	; 57
     d78:	0b b6       	in	r0, 0x3b	; 59
     d7a:	0f 92       	push	r0
     d7c:	1b be       	out	0x3b, r1	; 59
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
	bufferWrite(&bufRxC1,USARTC1.DATA);
     d96:	60 91 b0 08 	lds	r22, 0x08B0
     d9a:	88 e1       	ldi	r24, 0x18	; 24
     d9c:	93 e2       	ldi	r25, 0x23	; 35
     d9e:	99 df       	rcall	.-206    	; 0xcd2 <bufferWrite>
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	09 be       	out	0x39, r0	; 57
     dc0:	0f 90       	pop	r0
     dc2:	08 be       	out	0x38, r0	; 56
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_88>:
ISR(USARTD0_RXC_vect){
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	08 b6       	in	r0, 0x38	; 56
     dda:	0f 92       	push	r0
     ddc:	18 be       	out	0x38, r1	; 56
     dde:	09 b6       	in	r0, 0x39	; 57
     de0:	0f 92       	push	r0
     de2:	19 be       	out	0x39, r1	; 57
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	1b be       	out	0x3b, r1	; 59
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	bufferWrite(&bufRxD0,USARTD0.DATA);
     e02:	60 91 a0 09 	lds	r22, 0x09A0
     e06:	88 e8       	ldi	r24, 0x88	; 136
     e08:	92 e2       	ldi	r25, 0x22	; 34
     e0a:	63 df       	rcall	.-314    	; 0xcd2 <bufferWrite>
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0b be       	out	0x3b, r0	; 59
     e28:	0f 90       	pop	r0
     e2a:	09 be       	out	0x39, r0	; 57
     e2c:	0f 90       	pop	r0
     e2e:	08 be       	out	0x38, r0	; 56
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <__vector_91>:
ISR(USARTD1_RXC_vect){
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	08 b6       	in	r0, 0x38	; 56
     e46:	0f 92       	push	r0
     e48:	18 be       	out	0x38, r1	; 56
     e4a:	09 b6       	in	r0, 0x39	; 57
     e4c:	0f 92       	push	r0
     e4e:	19 be       	out	0x39, r1	; 57
     e50:	0b b6       	in	r0, 0x3b	; 59
     e52:	0f 92       	push	r0
     e54:	1b be       	out	0x3b, r1	; 59
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
	bufferWrite(&bufRxD1,USARTD1.DATA);
     e6e:	60 91 b0 09 	lds	r22, 0x09B0
     e72:	88 ef       	ldi	r24, 0xF8	; 248
     e74:	91 e2       	ldi	r25, 0x21	; 33
     e76:	2d df       	rcall	.-422    	; 0xcd2 <bufferWrite>
}
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0b be       	out	0x3b, r0	; 59
     e94:	0f 90       	pop	r0
     e96:	09 be       	out	0x39, r0	; 57
     e98:	0f 90       	pop	r0
     e9a:	08 be       	out	0x38, r0	; 56
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <__vector_61>:
ISR(USARTE1_RXC_vect){
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	08 b6       	in	r0, 0x38	; 56
     eb2:	0f 92       	push	r0
     eb4:	18 be       	out	0x38, r1	; 56
     eb6:	09 b6       	in	r0, 0x39	; 57
     eb8:	0f 92       	push	r0
     eba:	19 be       	out	0x39, r1	; 57
     ebc:	0b b6       	in	r0, 0x3b	; 59
     ebe:	0f 92       	push	r0
     ec0:	1b be       	out	0x3b, r1	; 59
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
	bufferWrite(&bufRxE1,USARTE1.DATA);
     eda:	60 91 b0 0a 	lds	r22, 0x0AB0
     ede:	88 e6       	ldi	r24, 0x68	; 104
     ee0:	91 e2       	ldi	r25, 0x21	; 33
     ee2:	f7 de       	rcall	.-530    	; 0xcd2 <bufferWrite>
}
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0b be       	out	0x3b, r0	; 59
     f00:	0f 90       	pop	r0
     f02:	09 be       	out	0x39, r0	; 57
     f04:	0f 90       	pop	r0
     f06:	08 be       	out	0x38, r0	; 56
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <__vector_119>:
ISR(USARTF0_RXC_vect){
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	08 b6       	in	r0, 0x38	; 56
     f1e:	0f 92       	push	r0
     f20:	18 be       	out	0x38, r1	; 56
     f22:	09 b6       	in	r0, 0x39	; 57
     f24:	0f 92       	push	r0
     f26:	19 be       	out	0x39, r1	; 57
     f28:	0b b6       	in	r0, 0x3b	; 59
     f2a:	0f 92       	push	r0
     f2c:	1b be       	out	0x3b, r1	; 59
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
	bufferWrite(&bufRxF0,USARTF0.DATA);
     f46:	60 91 a0 0b 	lds	r22, 0x0BA0
     f4a:	88 ed       	ldi	r24, 0xD8	; 216
     f4c:	90 e2       	ldi	r25, 0x20	; 32
     f4e:	c1 de       	rcall	.-638    	; 0xcd2 <bufferWrite>
}
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0b be       	out	0x3b, r0	; 59
     f6c:	0f 90       	pop	r0
     f6e:	09 be       	out	0x39, r0	; 57
     f70:	0f 90       	pop	r0
     f72:	08 be       	out	0x38, r0	; 56
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__vector_122>:
ISR(USARTF1_RXC_vect){
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	08 b6       	in	r0, 0x38	; 56
     f8a:	0f 92       	push	r0
     f8c:	18 be       	out	0x38, r1	; 56
     f8e:	09 b6       	in	r0, 0x39	; 57
     f90:	0f 92       	push	r0
     f92:	19 be       	out	0x39, r1	; 57
     f94:	0b b6       	in	r0, 0x3b	; 59
     f96:	0f 92       	push	r0
     f98:	1b be       	out	0x3b, r1	; 59
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
	bufferWrite(&bufRxF1,USARTF1.DATA);
     fb2:	60 91 b0 0b 	lds	r22, 0x0BB0
     fb6:	88 e4       	ldi	r24, 0x48	; 72
     fb8:	90 e2       	ldi	r25, 0x20	; 32
     fba:	8b de       	rcall	.-746    	; 0xcd2 <bufferWrite>
}
     fbc:	ff 91       	pop	r31
     fbe:	ef 91       	pop	r30
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	7f 91       	pop	r23
     fca:	6f 91       	pop	r22
     fcc:	5f 91       	pop	r21
     fce:	4f 91       	pop	r20
     fd0:	3f 91       	pop	r19
     fd2:	2f 91       	pop	r18
     fd4:	0f 90       	pop	r0
     fd6:	0b be       	out	0x3b, r0	; 59
     fd8:	0f 90       	pop	r0
     fda:	09 be       	out	0x39, r0	; 57
     fdc:	0f 90       	pop	r0
     fde:	08 be       	out	0x38, r0	; 56
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_26>:

ISR(USARTC0_DRE_vect)
{
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	08 b6       	in	r0, 0x38	; 56
     ff6:	0f 92       	push	r0
     ff8:	18 be       	out	0x38, r1	; 56
     ffa:	09 b6       	in	r0, 0x39	; 57
     ffc:	0f 92       	push	r0
     ffe:	19 be       	out	0x39, r1	; 57
    1000:	0b b6       	in	r0, 0x3b	; 59
    1002:	0f 92       	push	r0
    1004:	1b be       	out	0x3b, r1	; 59
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
	cli();
    101e:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    1020:	20 91 64 23 	lds	r18, 0x2364
    1024:	30 91 65 23 	lds	r19, 0x2365
    1028:	80 91 66 23 	lds	r24, 0x2366
    102c:	90 91 67 23 	lds	r25, 0x2367
    1030:	28 17       	cp	r18, r24
    1032:	39 07       	cpc	r19, r25
    1034:	19 f4       	brne	.+6      	; 0x103c <__vector_26+0x52>
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <__vector_26+0x5e>
	if(dataInBuf(&bufTxC0))
	{
		USARTC0.DATA = bufferRead(&bufTxC0);		//this is used to send packets of data in quick bursts
	}
	else USARTC0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    1038:	78 94       	sei
    103a:	0c c0       	rjmp	.+24     	; 0x1054 <__vector_26+0x6a>
ISR(USARTC0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxC0))
	{
		USARTC0.DATA = bufferRead(&bufTxC0);		//this is used to send packets of data in quick bursts
    103c:	80 e6       	ldi	r24, 0x60	; 96
    103e:	93 e2       	ldi	r25, 0x23	; 35
    1040:	36 de       	rcall	.-916    	; 0xcae <bufferRead>
    1042:	80 93 a0 08 	sts	0x08A0, r24
    1046:	f8 cf       	rjmp	.-16     	; 0x1038 <__vector_26+0x4e>
	}
	else USARTC0.CTRLA &= ~USART_DREINTLVL_gm;
    1048:	80 91 a3 08 	lds	r24, 0x08A3
    104c:	8c 7f       	andi	r24, 0xFC	; 252
    104e:	80 93 a3 08 	sts	0x08A3, r24
    1052:	f2 cf       	rjmp	.-28     	; 0x1038 <__vector_26+0x4e>
	sei();
}
    1054:	ff 91       	pop	r31
    1056:	ef 91       	pop	r30
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0b be       	out	0x3b, r0	; 59
    1070:	0f 90       	pop	r0
    1072:	09 be       	out	0x39, r0	; 57
    1074:	0f 90       	pop	r0
    1076:	08 be       	out	0x38, r0	; 56
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <__vector_29>:

ISR(USARTC1_DRE_vect)
{
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	08 b6       	in	r0, 0x38	; 56
    108e:	0f 92       	push	r0
    1090:	18 be       	out	0x38, r1	; 56
    1092:	09 b6       	in	r0, 0x39	; 57
    1094:	0f 92       	push	r0
    1096:	19 be       	out	0x39, r1	; 57
    1098:	0b b6       	in	r0, 0x3b	; 59
    109a:	0f 92       	push	r0
    109c:	1b be       	out	0x3b, r1	; 59
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
	cli();
    10b6:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    10b8:	20 91 d4 22 	lds	r18, 0x22D4
    10bc:	30 91 d5 22 	lds	r19, 0x22D5
    10c0:	80 91 d6 22 	lds	r24, 0x22D6
    10c4:	90 91 d7 22 	lds	r25, 0x22D7
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	19 f4       	brne	.+6      	; 0x10d4 <__vector_29+0x52>
    10ce:	08 c0       	rjmp	.+16     	; 0x10e0 <__vector_29+0x5e>
	if(dataInBuf(&bufTxC1))
	{
		USARTC1.DATA = bufferRead(&bufTxC1);		//this is used to send packets of data in quick bursts
	}
	else USARTC1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    10d0:	78 94       	sei
    10d2:	0c c0       	rjmp	.+24     	; 0x10ec <__vector_29+0x6a>
ISR(USARTC1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxC1))
	{
		USARTC1.DATA = bufferRead(&bufTxC1);		//this is used to send packets of data in quick bursts
    10d4:	80 ed       	ldi	r24, 0xD0	; 208
    10d6:	92 e2       	ldi	r25, 0x22	; 34
    10d8:	ea dd       	rcall	.-1068   	; 0xcae <bufferRead>
    10da:	80 93 b0 08 	sts	0x08B0, r24
    10de:	f8 cf       	rjmp	.-16     	; 0x10d0 <__vector_29+0x4e>
	}
	else USARTC1.CTRLA &= ~USART_DREINTLVL_gm;
    10e0:	80 91 b3 08 	lds	r24, 0x08B3
    10e4:	8c 7f       	andi	r24, 0xFC	; 252
    10e6:	80 93 b3 08 	sts	0x08B3, r24
    10ea:	f2 cf       	rjmp	.-28     	; 0x10d0 <__vector_29+0x4e>
	sei();
}
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0b be       	out	0x3b, r0	; 59
    1108:	0f 90       	pop	r0
    110a:	09 be       	out	0x39, r0	; 57
    110c:	0f 90       	pop	r0
    110e:	08 be       	out	0x38, r0	; 56
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_89>:

ISR(USARTD0_DRE_vect)
{
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	08 b6       	in	r0, 0x38	; 56
    1126:	0f 92       	push	r0
    1128:	18 be       	out	0x38, r1	; 56
    112a:	09 b6       	in	r0, 0x39	; 57
    112c:	0f 92       	push	r0
    112e:	19 be       	out	0x39, r1	; 57
    1130:	0b b6       	in	r0, 0x3b	; 59
    1132:	0f 92       	push	r0
    1134:	1b be       	out	0x3b, r1	; 59
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
	cli();
    114e:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    1150:	20 91 44 22 	lds	r18, 0x2244
    1154:	30 91 45 22 	lds	r19, 0x2245
    1158:	80 91 46 22 	lds	r24, 0x2246
    115c:	90 91 47 22 	lds	r25, 0x2247
    1160:	28 17       	cp	r18, r24
    1162:	39 07       	cpc	r19, r25
    1164:	19 f4       	brne	.+6      	; 0x116c <__vector_89+0x52>
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <__vector_89+0x5e>
	if(dataInBuf(&bufTxD0))
	{
		USARTD0.DATA = bufferRead(&bufTxD0);		//this is used to send packets of data in quick bursts
	}
	else USARTD0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    1168:	78 94       	sei
    116a:	0c c0       	rjmp	.+24     	; 0x1184 <__vector_89+0x6a>
ISR(USARTD0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxD0))
	{
		USARTD0.DATA = bufferRead(&bufTxD0);		//this is used to send packets of data in quick bursts
    116c:	80 e4       	ldi	r24, 0x40	; 64
    116e:	92 e2       	ldi	r25, 0x22	; 34
    1170:	9e dd       	rcall	.-1220   	; 0xcae <bufferRead>
    1172:	80 93 a0 09 	sts	0x09A0, r24
    1176:	f8 cf       	rjmp	.-16     	; 0x1168 <__vector_89+0x4e>
	}
	else USARTD0.CTRLA &= ~USART_DREINTLVL_gm;
    1178:	80 91 a3 09 	lds	r24, 0x09A3
    117c:	8c 7f       	andi	r24, 0xFC	; 252
    117e:	80 93 a3 09 	sts	0x09A3, r24
    1182:	f2 cf       	rjmp	.-28     	; 0x1168 <__vector_89+0x4e>
	sei();
}
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	bf 91       	pop	r27
    118a:	af 91       	pop	r26
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	7f 91       	pop	r23
    1192:	6f 91       	pop	r22
    1194:	5f 91       	pop	r21
    1196:	4f 91       	pop	r20
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	0f 90       	pop	r0
    119e:	0b be       	out	0x3b, r0	; 59
    11a0:	0f 90       	pop	r0
    11a2:	09 be       	out	0x39, r0	; 57
    11a4:	0f 90       	pop	r0
    11a6:	08 be       	out	0x38, r0	; 56
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_92>:

ISR(USARTD1_DRE_vect)
{
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	08 b6       	in	r0, 0x38	; 56
    11be:	0f 92       	push	r0
    11c0:	18 be       	out	0x38, r1	; 56
    11c2:	09 b6       	in	r0, 0x39	; 57
    11c4:	0f 92       	push	r0
    11c6:	19 be       	out	0x39, r1	; 57
    11c8:	0b b6       	in	r0, 0x3b	; 59
    11ca:	0f 92       	push	r0
    11cc:	1b be       	out	0x3b, r1	; 59
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
	cli();
    11e6:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    11e8:	20 91 b4 21 	lds	r18, 0x21B4
    11ec:	30 91 b5 21 	lds	r19, 0x21B5
    11f0:	80 91 b6 21 	lds	r24, 0x21B6
    11f4:	90 91 b7 21 	lds	r25, 0x21B7
    11f8:	28 17       	cp	r18, r24
    11fa:	39 07       	cpc	r19, r25
    11fc:	19 f4       	brne	.+6      	; 0x1204 <__vector_92+0x52>
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <__vector_92+0x5e>
	if(dataInBuf(&bufTxD1))
	{
		USARTD1.DATA = bufferRead(&bufTxD1);		//this is used to send packets of data in quick bursts
	}
	else USARTD1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    1200:	78 94       	sei
    1202:	0c c0       	rjmp	.+24     	; 0x121c <__vector_92+0x6a>
ISR(USARTD1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxD1))
	{
		USARTD1.DATA = bufferRead(&bufTxD1);		//this is used to send packets of data in quick bursts
    1204:	80 eb       	ldi	r24, 0xB0	; 176
    1206:	91 e2       	ldi	r25, 0x21	; 33
    1208:	52 dd       	rcall	.-1372   	; 0xcae <bufferRead>
    120a:	80 93 b0 09 	sts	0x09B0, r24
    120e:	f8 cf       	rjmp	.-16     	; 0x1200 <__vector_92+0x4e>
	}
	else USARTD1.CTRLA &= ~USART_DREINTLVL_gm;
    1210:	80 91 b3 09 	lds	r24, 0x09B3
    1214:	8c 7f       	andi	r24, 0xFC	; 252
    1216:	80 93 b3 09 	sts	0x09B3, r24
    121a:	f2 cf       	rjmp	.-28     	; 0x1200 <__vector_92+0x4e>
	sei();
}
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0b be       	out	0x3b, r0	; 59
    1238:	0f 90       	pop	r0
    123a:	09 be       	out	0x39, r0	; 57
    123c:	0f 90       	pop	r0
    123e:	08 be       	out	0x38, r0	; 56
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <__vector_62>:

ISR(USARTE1_DRE_vect)
{
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	08 b6       	in	r0, 0x38	; 56
    1256:	0f 92       	push	r0
    1258:	18 be       	out	0x38, r1	; 56
    125a:	09 b6       	in	r0, 0x39	; 57
    125c:	0f 92       	push	r0
    125e:	19 be       	out	0x39, r1	; 57
    1260:	0b b6       	in	r0, 0x3b	; 59
    1262:	0f 92       	push	r0
    1264:	1b be       	out	0x3b, r1	; 59
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31
	cli();
    127e:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    1280:	20 91 24 21 	lds	r18, 0x2124
    1284:	30 91 25 21 	lds	r19, 0x2125
    1288:	80 91 26 21 	lds	r24, 0x2126
    128c:	90 91 27 21 	lds	r25, 0x2127
    1290:	28 17       	cp	r18, r24
    1292:	39 07       	cpc	r19, r25
    1294:	19 f4       	brne	.+6      	; 0x129c <__vector_62+0x52>
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <__vector_62+0x5e>
	if(dataInBuf(&bufTxE1))
	{
		USARTE1.DATA = bufferRead(&bufTxE1);		//this is used to send packets of data in quick bursts
	}
	else USARTE1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    1298:	78 94       	sei
    129a:	0c c0       	rjmp	.+24     	; 0x12b4 <__vector_62+0x6a>
ISR(USARTE1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxE1))
	{
		USARTE1.DATA = bufferRead(&bufTxE1);		//this is used to send packets of data in quick bursts
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	91 e2       	ldi	r25, 0x21	; 33
    12a0:	06 dd       	rcall	.-1524   	; 0xcae <bufferRead>
    12a2:	80 93 b0 0a 	sts	0x0AB0, r24
    12a6:	f8 cf       	rjmp	.-16     	; 0x1298 <__vector_62+0x4e>
	}
	else USARTE1.CTRLA &= ~USART_DREINTLVL_gm;
    12a8:	80 91 b3 0a 	lds	r24, 0x0AB3
    12ac:	8c 7f       	andi	r24, 0xFC	; 252
    12ae:	80 93 b3 0a 	sts	0x0AB3, r24
    12b2:	f2 cf       	rjmp	.-28     	; 0x1298 <__vector_62+0x4e>
	sei();
}
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0b be       	out	0x3b, r0	; 59
    12d0:	0f 90       	pop	r0
    12d2:	09 be       	out	0x39, r0	; 57
    12d4:	0f 90       	pop	r0
    12d6:	08 be       	out	0x38, r0	; 56
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_120>:

ISR(USARTF0_DRE_vect)
{
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	08 b6       	in	r0, 0x38	; 56
    12ee:	0f 92       	push	r0
    12f0:	18 be       	out	0x38, r1	; 56
    12f2:	09 b6       	in	r0, 0x39	; 57
    12f4:	0f 92       	push	r0
    12f6:	19 be       	out	0x39, r1	; 57
    12f8:	0b b6       	in	r0, 0x3b	; 59
    12fa:	0f 92       	push	r0
    12fc:	1b be       	out	0x3b, r1	; 59
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	ef 93       	push	r30
    1314:	ff 93       	push	r31
	cli();
    1316:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    1318:	20 91 94 20 	lds	r18, 0x2094
    131c:	30 91 95 20 	lds	r19, 0x2095
    1320:	80 91 96 20 	lds	r24, 0x2096
    1324:	90 91 97 20 	lds	r25, 0x2097
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
    132c:	19 f4       	brne	.+6      	; 0x1334 <__vector_120+0x52>
    132e:	08 c0       	rjmp	.+16     	; 0x1340 <__vector_120+0x5e>
	if(dataInBuf(&bufTxF0))
	{
		USARTF0.DATA = bufferRead(&bufTxF0);		//this is used to send packets of data in quick bursts
	}
	else USARTF0.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    1330:	78 94       	sei
    1332:	0c c0       	rjmp	.+24     	; 0x134c <__vector_120+0x6a>
ISR(USARTF0_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxF0))
	{
		USARTF0.DATA = bufferRead(&bufTxF0);		//this is used to send packets of data in quick bursts
    1334:	80 e9       	ldi	r24, 0x90	; 144
    1336:	90 e2       	ldi	r25, 0x20	; 32
    1338:	ba dc       	rcall	.-1676   	; 0xcae <bufferRead>
    133a:	80 93 a0 0b 	sts	0x0BA0, r24
    133e:	f8 cf       	rjmp	.-16     	; 0x1330 <__vector_120+0x4e>
	}
	else USARTF0.CTRLA &= ~USART_DREINTLVL_gm;
    1340:	80 91 a3 0b 	lds	r24, 0x0BA3
    1344:	8c 7f       	andi	r24, 0xFC	; 252
    1346:	80 93 a3 0b 	sts	0x0BA3, r24
    134a:	f2 cf       	rjmp	.-28     	; 0x1330 <__vector_120+0x4e>
	sei();
}
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0b be       	out	0x3b, r0	; 59
    1368:	0f 90       	pop	r0
    136a:	09 be       	out	0x39, r0	; 57
    136c:	0f 90       	pop	r0
    136e:	08 be       	out	0x38, r0	; 56
    1370:	0f 90       	pop	r0
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	0f 90       	pop	r0
    1376:	1f 90       	pop	r1
    1378:	18 95       	reti

0000137a <__vector_123>:

ISR(USARTF1_DRE_vect)
{
    137a:	1f 92       	push	r1
    137c:	0f 92       	push	r0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	08 b6       	in	r0, 0x38	; 56
    1386:	0f 92       	push	r0
    1388:	18 be       	out	0x38, r1	; 56
    138a:	09 b6       	in	r0, 0x39	; 57
    138c:	0f 92       	push	r0
    138e:	19 be       	out	0x39, r1	; 57
    1390:	0b b6       	in	r0, 0x3b	; 59
    1392:	0f 92       	push	r0
    1394:	1b be       	out	0x3b, r1	; 59
    1396:	2f 93       	push	r18
    1398:	3f 93       	push	r19
    139a:	4f 93       	push	r20
    139c:	5f 93       	push	r21
    139e:	6f 93       	push	r22
    13a0:	7f 93       	push	r23
    13a2:	8f 93       	push	r24
    13a4:	9f 93       	push	r25
    13a6:	af 93       	push	r26
    13a8:	bf 93       	push	r27
    13aa:	ef 93       	push	r30
    13ac:	ff 93       	push	r31
	cli();
    13ae:	f8 94       	cli
	}
	else *buffer->head++ = c;
}

uint8_t dataInBuf(buf_t *buffer){
	if(buffer->head == buffer->tail) return 0;	//no data to be read
    13b0:	20 91 04 20 	lds	r18, 0x2004
    13b4:	30 91 05 20 	lds	r19, 0x2005
    13b8:	80 91 06 20 	lds	r24, 0x2006
    13bc:	90 91 07 20 	lds	r25, 0x2007
    13c0:	28 17       	cp	r18, r24
    13c2:	39 07       	cpc	r19, r25
    13c4:	19 f4       	brne	.+6      	; 0x13cc <__vector_123+0x52>
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <__vector_123+0x5e>
	if(dataInBuf(&bufTxF1))
	{
		USARTF1.DATA = bufferRead(&bufTxF1);		//this is used to send packets of data in quick bursts
	}
	else USARTF1.CTRLA &= ~USART_DREINTLVL_gm;
	sei();
    13c8:	78 94       	sei
    13ca:	0c c0       	rjmp	.+24     	; 0x13e4 <__vector_123+0x6a>
ISR(USARTF1_DRE_vect)
{
	cli();
	if(dataInBuf(&bufTxF1))
	{
		USARTF1.DATA = bufferRead(&bufTxF1);		//this is used to send packets of data in quick bursts
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e2       	ldi	r25, 0x20	; 32
    13d0:	6e dc       	rcall	.-1828   	; 0xcae <bufferRead>
    13d2:	80 93 b0 0b 	sts	0x0BB0, r24
    13d6:	f8 cf       	rjmp	.-16     	; 0x13c8 <__vector_123+0x4e>
	}
	else USARTF1.CTRLA &= ~USART_DREINTLVL_gm;
    13d8:	80 91 b3 0b 	lds	r24, 0x0BB3
    13dc:	8c 7f       	andi	r24, 0xFC	; 252
    13de:	80 93 b3 0b 	sts	0x0BB3, r24
    13e2:	f2 cf       	rjmp	.-28     	; 0x13c8 <__vector_123+0x4e>
	sei();
}
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	0b be       	out	0x3b, r0	; 59
    1400:	0f 90       	pop	r0
    1402:	09 be       	out	0x39, r0	; 57
    1404:	0f 90       	pop	r0
    1406:	08 be       	out	0x38, r0	; 56
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	0f 90       	pop	r0
    140e:	1f 90       	pop	r1
    1410:	18 95       	reti

00001412 <usartInit>:


//initialization functions for the uarts
void usartInit(USART_t *usart, long baud)
{
    1412:	fc 01       	movw	r30, r24
	switch((uint16_t)usart)
    1414:	e0 3b       	cpi	r30, 0xB0	; 176
    1416:	89 e0       	ldi	r24, 0x09	; 9
    1418:	f8 07       	cpc	r31, r24
    141a:	19 f1       	breq	.+70     	; 0x1462 <usartInit+0x50>
    141c:	68 f4       	brcc	.+26     	; 0x1438 <usartInit+0x26>
    141e:	e0 3b       	cpi	r30, 0xB0	; 176
    1420:	88 e0       	ldi	r24, 0x08	; 8
    1422:	f8 07       	cpc	r31, r24
    1424:	c1 f0       	breq	.+48     	; 0x1456 <usartInit+0x44>
    1426:	e0 3a       	cpi	r30, 0xA0	; 160
    1428:	89 e0       	ldi	r24, 0x09	; 9
    142a:	f8 07       	cpc	r31, r24
    142c:	c1 f0       	breq	.+48     	; 0x145e <usartInit+0x4c>
    142e:	e0 3a       	cpi	r30, 0xA0	; 160
    1430:	88 e0       	ldi	r24, 0x08	; 8
    1432:	f8 07       	cpc	r31, r24
    1434:	19 f5       	brne	.+70     	; 0x147c <usartInit+0x6a>
    1436:	0d c0       	rjmp	.+26     	; 0x1452 <usartInit+0x40>
    1438:	e0 3a       	cpi	r30, 0xA0	; 160
    143a:	8b e0       	ldi	r24, 0x0B	; 11
    143c:	f8 07       	cpc	r31, r24
    143e:	c9 f0       	breq	.+50     	; 0x1472 <usartInit+0x60>
    1440:	e0 3b       	cpi	r30, 0xB0	; 176
    1442:	8b e0       	ldi	r24, 0x0B	; 11
    1444:	f8 07       	cpc	r31, r24
    1446:	b9 f0       	breq	.+46     	; 0x1476 <usartInit+0x64>
    1448:	e0 3b       	cpi	r30, 0xB0	; 176
    144a:	8a e0       	ldi	r24, 0x0A	; 10
    144c:	f8 07       	cpc	r31, r24
    144e:	b1 f4       	brne	.+44     	; 0x147c <usartInit+0x6a>
    1450:	0c c0       	rjmp	.+24     	; 0x146a <usartInit+0x58>
	{
		case ((uint16_t)&USARTC0):
			PORTC.DIRSET = PORT_USARTTX0_msk;
    1452:	88 e0       	ldi	r24, 0x08	; 8
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <usartInit+0x46>
		break;
		case ((uint16_t)&USARTC1):
			PORTC.DIRSET = PORT_USARTTX1_msk;
    1456:	80 e8       	ldi	r24, 0x80	; 128
    1458:	80 93 41 06 	sts	0x0641, r24
		break;
    145c:	0f c0       	rjmp	.+30     	; 0x147c <usartInit+0x6a>
		case ((uint16_t)&USARTD0):
			PORTD.DIRSET = PORT_USARTTX0_msk;
    145e:	88 e0       	ldi	r24, 0x08	; 8
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <usartInit+0x52>
		break;
		case ((uint16_t)&USARTD1):
			PORTD.DIRSET = PORT_USARTTX1_msk;
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	80 93 61 06 	sts	0x0661, r24
		break;
    1468:	09 c0       	rjmp	.+18     	; 0x147c <usartInit+0x6a>
		case ((uint16_t)&USARTE1):
			PORTE.DIRSET = PORT_USARTTX1_msk;
    146a:	80 e8       	ldi	r24, 0x80	; 128
    146c:	80 93 81 06 	sts	0x0681, r24
		break;
    1470:	05 c0       	rjmp	.+10     	; 0x147c <usartInit+0x6a>
		case ((uint16_t)&USARTF0):
			PORTF.DIRSET = PORT_USARTTX0_msk;
    1472:	88 e0       	ldi	r24, 0x08	; 8
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <usartInit+0x66>
		break;
		case ((uint16_t)&USARTF1):
			PORTF.DIRSET = PORT_USARTTX1_msk;
    1476:	80 e8       	ldi	r24, 0x80	; 128
    1478:	80 93 a1 06 	sts	0x06A1, r24
		break;
		
	}
	
	PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;	
    147c:	80 91 a2 00 	lds	r24, 0x00A2
    1480:	83 60       	ori	r24, 0x03	; 3
    1482:	80 93 a2 00 	sts	0x00A2, r24
		usart->CTRLA |= USART_RXCINTLVL_MED_gc;
    1486:	83 81       	ldd	r24, Z+3	; 0x03
    1488:	80 62       	ori	r24, 0x20	; 32
    148a:	83 83       	std	Z+3, r24	; 0x03
	switch(baud){
    148c:	40 38       	cpi	r20, 0x80	; 128
    148e:	80 e7       	ldi	r24, 0x70	; 112
    1490:	58 07       	cpc	r21, r24
    1492:	61 05       	cpc	r22, r1
    1494:	71 05       	cpc	r23, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <usartInit+0x88>
    1498:	64 c0       	rjmp	.+200    	; 0x1562 <usartInit+0x150>
    149a:	24 f5       	brge	.+72     	; 0x14e4 <usartInit+0xd2>
    149c:	40 38       	cpi	r20, 0x80	; 128
    149e:	85 e2       	ldi	r24, 0x25	; 37
    14a0:	58 07       	cpc	r21, r24
    14a2:	61 05       	cpc	r22, r1
    14a4:	71 05       	cpc	r23, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <usartInit+0x98>
    14a8:	92 c0       	rjmp	.+292    	; 0x15ce <usartInit+0x1bc>
    14aa:	74 f4       	brge	.+28     	; 0x14c8 <usartInit+0xb6>
    14ac:	40 3b       	cpi	r20, 0xB0	; 176
    14ae:	84 e0       	ldi	r24, 0x04	; 4
    14b0:	58 07       	cpc	r21, r24
    14b2:	61 05       	cpc	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <usartInit+0xa8>
    14b8:	41 c0       	rjmp	.+130    	; 0x153c <usartInit+0x12a>
    14ba:	40 3c       	cpi	r20, 0xC0	; 192
    14bc:	52 41       	sbci	r21, 0x12	; 18
    14be:	61 05       	cpc	r22, r1
    14c0:	71 05       	cpc	r23, r1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <usartInit+0xb4>
    14c4:	84 c0       	rjmp	.+264    	; 0x15ce <usartInit+0x1bc>
    14c6:	41 c0       	rjmp	.+130    	; 0x154a <usartInit+0x138>
    14c8:	40 34       	cpi	r20, 0x40	; 64
    14ca:	88 e3       	ldi	r24, 0x38	; 56
    14cc:	58 07       	cpc	r21, r24
    14ce:	61 05       	cpc	r22, r1
    14d0:	71 05       	cpc	r23, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <usartInit+0xc4>
    14d4:	42 c0       	rjmp	.+132    	; 0x155a <usartInit+0x148>
    14d6:	41 15       	cp	r20, r1
    14d8:	5b 44       	sbci	r21, 0x4B	; 75
    14da:	61 05       	cpc	r22, r1
    14dc:	71 05       	cpc	r23, r1
    14de:	09 f0       	breq	.+2      	; 0x14e2 <usartInit+0xd0>
    14e0:	76 c0       	rjmp	.+236    	; 0x15ce <usartInit+0x1bc>
    14e2:	3d c0       	rjmp	.+122    	; 0x155e <usartInit+0x14c>
    14e4:	41 15       	cp	r20, r1
    14e6:	81 ee       	ldi	r24, 0xE1	; 225
    14e8:	58 07       	cpc	r21, r24
    14ea:	61 05       	cpc	r22, r1
    14ec:	71 05       	cpc	r23, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <usartInit+0xe0>
    14f0:	4e c0       	rjmp	.+156    	; 0x158e <usartInit+0x17c>
    14f2:	6c f4       	brge	.+26     	; 0x150e <usartInit+0xfc>
    14f4:	41 15       	cp	r20, r1
    14f6:	86 e9       	ldi	r24, 0x96	; 150
    14f8:	58 07       	cpc	r21, r24
    14fa:	61 05       	cpc	r22, r1
    14fc:	71 05       	cpc	r23, r1
    14fe:	c9 f1       	breq	.+114    	; 0x1572 <usartInit+0x160>
    1500:	40 3c       	cpi	r20, 0xC0	; 192
    1502:	5a 4d       	sbci	r21, 0xDA	; 218
    1504:	61 05       	cpc	r22, r1
    1506:	71 05       	cpc	r23, r1
    1508:	09 f0       	breq	.+2      	; 0x150c <usartInit+0xfa>
    150a:	61 c0       	rjmp	.+194    	; 0x15ce <usartInit+0x1bc>
    150c:	3a c0       	rjmp	.+116    	; 0x1582 <usartInit+0x170>
    150e:	48 34       	cpi	r20, 0x48	; 72
    1510:	88 ee       	ldi	r24, 0xE8	; 232
    1512:	58 07       	cpc	r21, r24
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	68 07       	cpc	r22, r24
    1518:	71 05       	cpc	r23, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <usartInit+0x10c>
    151c:	48 c0       	rjmp	.+144    	; 0x15ae <usartInit+0x19c>
    151e:	41 15       	cp	r20, r1
    1520:	84 e8       	ldi	r24, 0x84	; 132
    1522:	58 07       	cpc	r21, r24
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	68 07       	cpc	r22, r24
    1528:	71 05       	cpc	r23, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <usartInit+0x11c>
    152c:	48 c0       	rjmp	.+144    	; 0x15be <usartInit+0x1ac>
    152e:	41 15       	cp	r20, r1
    1530:	52 4c       	sbci	r21, 0xC2	; 194
    1532:	61 40       	sbci	r22, 0x01	; 1
    1534:	71 05       	cpc	r23, r1
    1536:	09 f0       	breq	.+2      	; 0x153a <usartInit+0x128>
    1538:	4a c0       	rjmp	.+148    	; 0x15ce <usartInit+0x1bc>
    153a:	31 c0       	rjmp	.+98     	; 0x159e <usartInit+0x18c>
		case (1200):
			usart->CTRLB = USART_CTRLB_1200;
    153c:	88 e1       	ldi	r24, 0x18	; 24
    153e:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_1200;
    1544:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_1200;
    1546:	8d ec       	ldi	r24, 0xCD	; 205
    1548:	49 c0       	rjmp	.+146    	; 0x15dc <usartInit+0x1ca>
		break;
		case (4800):
			usart->CTRLB = USART_CTRLB_4800;
    154a:	88 e1       	ldi	r24, 0x18	; 24
    154c:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_4800;
    1552:	8d ef       	ldi	r24, 0xFD	; 253
    1554:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_4800;
    1556:	8c ed       	ldi	r24, 0xDC	; 220
    1558:	41 c0       	rjmp	.+130    	; 0x15dc <usartInit+0x1ca>
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
			usart->BAUDCTRLA = USART_BAUDCTRLA_9600;
			usart->BAUDCTRLB = USART_BAUDCTRLB_9600;
		break;
		case (14400):
			usart->CTRLB = USART_CTRLB_14400;
    155a:	88 e1       	ldi	r24, 0x18	; 24
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <usartInit+0x152>
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
			usart->BAUDCTRLA = USART_BAUDCTRLA_14400;
			usart->BAUDCTRLB = USART_BAUDCTRLB_14400;
		break;
		case (19200):
			usart->CTRLB = USART_CTRLB_19200;
    155e:	8c e1       	ldi	r24, 0x1C	; 28
    1560:	37 c0       	rjmp	.+110    	; 0x15d0 <usartInit+0x1be>
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
			usart->BAUDCTRLA = USART_BAUDCTRLA_19200;
			usart->BAUDCTRLB = USART_BAUDCTRLB_19200;
		break;
		case (28800):
			usart->CTRLB = USART_CTRLB_28800;
    1562:	8c e1       	ldi	r24, 0x1C	; 28
    1564:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_28800;
    156a:	8e e9       	ldi	r24, 0x9E	; 158
    156c:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_28800;
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	35 c0       	rjmp	.+106    	; 0x15dc <usartInit+0x1ca>
		break;
		case (38400):
			usart->CTRLB = USART_CTRLB_38400;
    1572:	8c e1       	ldi	r24, 0x1C	; 28
    1574:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_38400;
    157a:	85 ee       	ldi	r24, 0xE5	; 229
    157c:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_38400;
    157e:	8c eb       	ldi	r24, 0xBC	; 188
    1580:	2d c0       	rjmp	.+90     	; 0x15dc <usartInit+0x1ca>
		break;
		case (56000):
			usart->CTRLB = USART_CTRLB_56000;
    1582:	8c e1       	ldi	r24, 0x1C	; 28
    1584:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_56000;
    158a:	8e ec       	ldi	r24, 0xCE	; 206
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <usartInit+0x186>
			usart->BAUDCTRLB = USART_BAUDCTRLB_56000;
		break;
		case (57600):
			usart->CTRLB = USART_CTRLB_57600;
    158e:	8c e1       	ldi	r24, 0x1C	; 28
    1590:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_57600;
    1596:	8e e8       	ldi	r24, 0x8E	; 142
    1598:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_57600;
    159a:	88 eb       	ldi	r24, 0xB8	; 184
    159c:	1f c0       	rjmp	.+62     	; 0x15dc <usartInit+0x1ca>
		break;
		case (115200):
			usart->CTRLB = USART_CTRLB_115200;
    159e:	8c e1       	ldi	r24, 0x1C	; 28
    15a0:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_115200;
    15a6:	8e e6       	ldi	r24, 0x6E	; 110
    15a8:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_115200;
    15aa:	88 ea       	ldi	r24, 0xA8	; 168
    15ac:	17 c0       	rjmp	.+46     	; 0x15dc <usartInit+0x1ca>
		break;
		case (125000):
			usart->CTRLB = USART_CTRLB_125000;
    15ae:	8c e1       	ldi	r24, 0x1C	; 28
    15b0:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_125000;
    15b6:	80 ec       	ldi	r24, 0xC0	; 192
    15b8:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_125000;
    15ba:	87 ea       	ldi	r24, 0xA7	; 167
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <usartInit+0x1ca>
		break;
		case (230400):
			usart->CTRLB = USART_CTRLB_230400;
    15be:	8c e1       	ldi	r24, 0x1C	; 28
    15c0:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_230400;
    15c6:	8e e2       	ldi	r24, 0x2E	; 46
    15c8:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_230400;
    15ca:	88 e9       	ldi	r24, 0x98	; 152
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <usartInit+0x1ca>
		break;
		default:
		
		//invalid baud rate defaulting to 9600		
		
			usart->CTRLB = USART_CTRLB_9600;
    15ce:	88 e1       	ldi	r24, 0x18	; 24
    15d0:	84 83       	std	Z+4, r24	; 0x04
			usart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	85 83       	std	Z+5, r24	; 0x05
			usart->BAUDCTRLA = USART_BAUDCTRLA_9600;
    15d6:	85 ef       	ldi	r24, 0xF5	; 245
    15d8:	86 83       	std	Z+6, r24	; 0x06
			usart->BAUDCTRLB = USART_BAUDCTRLB_9600;
    15da:	8c ec       	ldi	r24, 0xCC	; 204
    15dc:	87 83       	std	Z+7, r24	; 0x07
    15de:	08 95       	ret

000015e0 <ReadCalibrationByte>:
uint8_t ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    15e0:	aa ec       	ldi	r26, 0xCA	; 202
    15e2:	b1 e0       	ldi	r27, 0x01	; 1
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
    15e8:	e8 2f       	mov	r30, r24
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    15ee:	1c 92       	st	X, r1

	return( result );
    15f0:	08 95       	ret

000015f2 <__subsf3>:
    15f2:	50 58       	subi	r21, 0x80	; 128

000015f4 <__addsf3>:
    15f4:	bb 27       	eor	r27, r27
    15f6:	aa 27       	eor	r26, r26
    15f8:	0e d0       	rcall	.+28     	; 0x1616 <__addsf3x>
    15fa:	e0 c0       	rjmp	.+448    	; 0x17bc <__fp_round>
    15fc:	d1 d0       	rcall	.+418    	; 0x17a0 <__fp_pscA>
    15fe:	30 f0       	brcs	.+12     	; 0x160c <__addsf3+0x18>
    1600:	d6 d0       	rcall	.+428    	; 0x17ae <__fp_pscB>
    1602:	20 f0       	brcs	.+8      	; 0x160c <__addsf3+0x18>
    1604:	31 f4       	brne	.+12     	; 0x1612 <__addsf3+0x1e>
    1606:	9f 3f       	cpi	r25, 0xFF	; 255
    1608:	11 f4       	brne	.+4      	; 0x160e <__addsf3+0x1a>
    160a:	1e f4       	brtc	.+6      	; 0x1612 <__addsf3+0x1e>
    160c:	c6 c0       	rjmp	.+396    	; 0x179a <__fp_nan>
    160e:	0e f4       	brtc	.+2      	; 0x1612 <__addsf3+0x1e>
    1610:	e0 95       	com	r30
    1612:	e7 fb       	bst	r30, 7
    1614:	bc c0       	rjmp	.+376    	; 0x178e <__fp_inf>

00001616 <__addsf3x>:
    1616:	e9 2f       	mov	r30, r25
    1618:	e2 d0       	rcall	.+452    	; 0x17de <__fp_split3>
    161a:	80 f3       	brcs	.-32     	; 0x15fc <__addsf3+0x8>
    161c:	ba 17       	cp	r27, r26
    161e:	62 07       	cpc	r22, r18
    1620:	73 07       	cpc	r23, r19
    1622:	84 07       	cpc	r24, r20
    1624:	95 07       	cpc	r25, r21
    1626:	18 f0       	brcs	.+6      	; 0x162e <__addsf3x+0x18>
    1628:	71 f4       	brne	.+28     	; 0x1646 <__addsf3x+0x30>
    162a:	9e f5       	brtc	.+102    	; 0x1692 <__addsf3x+0x7c>
    162c:	fa c0       	rjmp	.+500    	; 0x1822 <__fp_zero>
    162e:	0e f4       	brtc	.+2      	; 0x1632 <__addsf3x+0x1c>
    1630:	e0 95       	com	r30
    1632:	0b 2e       	mov	r0, r27
    1634:	ba 2f       	mov	r27, r26
    1636:	a0 2d       	mov	r26, r0
    1638:	0b 01       	movw	r0, r22
    163a:	b9 01       	movw	r22, r18
    163c:	90 01       	movw	r18, r0
    163e:	0c 01       	movw	r0, r24
    1640:	ca 01       	movw	r24, r20
    1642:	a0 01       	movw	r20, r0
    1644:	11 24       	eor	r1, r1
    1646:	ff 27       	eor	r31, r31
    1648:	59 1b       	sub	r21, r25
    164a:	99 f0       	breq	.+38     	; 0x1672 <__addsf3x+0x5c>
    164c:	59 3f       	cpi	r21, 0xF9	; 249
    164e:	50 f4       	brcc	.+20     	; 0x1664 <__addsf3x+0x4e>
    1650:	50 3e       	cpi	r21, 0xE0	; 224
    1652:	68 f1       	brcs	.+90     	; 0x16ae <__addsf3x+0x98>
    1654:	1a 16       	cp	r1, r26
    1656:	f0 40       	sbci	r31, 0x00	; 0
    1658:	a2 2f       	mov	r26, r18
    165a:	23 2f       	mov	r18, r19
    165c:	34 2f       	mov	r19, r20
    165e:	44 27       	eor	r20, r20
    1660:	58 5f       	subi	r21, 0xF8	; 248
    1662:	f3 cf       	rjmp	.-26     	; 0x164a <__addsf3x+0x34>
    1664:	46 95       	lsr	r20
    1666:	37 95       	ror	r19
    1668:	27 95       	ror	r18
    166a:	a7 95       	ror	r26
    166c:	f0 40       	sbci	r31, 0x00	; 0
    166e:	53 95       	inc	r21
    1670:	c9 f7       	brne	.-14     	; 0x1664 <__addsf3x+0x4e>
    1672:	7e f4       	brtc	.+30     	; 0x1692 <__addsf3x+0x7c>
    1674:	1f 16       	cp	r1, r31
    1676:	ba 0b       	sbc	r27, r26
    1678:	62 0b       	sbc	r22, r18
    167a:	73 0b       	sbc	r23, r19
    167c:	84 0b       	sbc	r24, r20
    167e:	ba f0       	brmi	.+46     	; 0x16ae <__addsf3x+0x98>
    1680:	91 50       	subi	r25, 0x01	; 1
    1682:	a1 f0       	breq	.+40     	; 0x16ac <__addsf3x+0x96>
    1684:	ff 0f       	add	r31, r31
    1686:	bb 1f       	adc	r27, r27
    1688:	66 1f       	adc	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	88 1f       	adc	r24, r24
    168e:	c2 f7       	brpl	.-16     	; 0x1680 <__addsf3x+0x6a>
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <__addsf3x+0x98>
    1692:	ba 0f       	add	r27, r26
    1694:	62 1f       	adc	r22, r18
    1696:	73 1f       	adc	r23, r19
    1698:	84 1f       	adc	r24, r20
    169a:	48 f4       	brcc	.+18     	; 0x16ae <__addsf3x+0x98>
    169c:	87 95       	ror	r24
    169e:	77 95       	ror	r23
    16a0:	67 95       	ror	r22
    16a2:	b7 95       	ror	r27
    16a4:	f7 95       	ror	r31
    16a6:	9e 3f       	cpi	r25, 0xFE	; 254
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <__addsf3x+0x96>
    16aa:	b3 cf       	rjmp	.-154    	; 0x1612 <__addsf3+0x1e>
    16ac:	93 95       	inc	r25
    16ae:	88 0f       	add	r24, r24
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <__addsf3x+0x9e>
    16b2:	99 27       	eor	r25, r25
    16b4:	ee 0f       	add	r30, r30
    16b6:	97 95       	ror	r25
    16b8:	87 95       	ror	r24
    16ba:	08 95       	ret

000016bc <__fixunssfsi>:
    16bc:	98 d0       	rcall	.+304    	; 0x17ee <__fp_splitA>
    16be:	88 f0       	brcs	.+34     	; 0x16e2 <__fixunssfsi+0x26>
    16c0:	9f 57       	subi	r25, 0x7F	; 127
    16c2:	90 f0       	brcs	.+36     	; 0x16e8 <__fixunssfsi+0x2c>
    16c4:	b9 2f       	mov	r27, r25
    16c6:	99 27       	eor	r25, r25
    16c8:	b7 51       	subi	r27, 0x17	; 23
    16ca:	a0 f0       	brcs	.+40     	; 0x16f4 <__fixunssfsi+0x38>
    16cc:	d1 f0       	breq	.+52     	; 0x1702 <__fixunssfsi+0x46>
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	1a f0       	brmi	.+6      	; 0x16de <__fixunssfsi+0x22>
    16d8:	ba 95       	dec	r27
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__fixunssfsi+0x12>
    16dc:	12 c0       	rjmp	.+36     	; 0x1702 <__fixunssfsi+0x46>
    16de:	b1 30       	cpi	r27, 0x01	; 1
    16e0:	81 f0       	breq	.+32     	; 0x1702 <__fixunssfsi+0x46>
    16e2:	9f d0       	rcall	.+318    	; 0x1822 <__fp_zero>
    16e4:	b1 e0       	ldi	r27, 0x01	; 1
    16e6:	08 95       	ret
    16e8:	9c c0       	rjmp	.+312    	; 0x1822 <__fp_zero>
    16ea:	67 2f       	mov	r22, r23
    16ec:	78 2f       	mov	r23, r24
    16ee:	88 27       	eor	r24, r24
    16f0:	b8 5f       	subi	r27, 0xF8	; 248
    16f2:	39 f0       	breq	.+14     	; 0x1702 <__fixunssfsi+0x46>
    16f4:	b9 3f       	cpi	r27, 0xF9	; 249
    16f6:	cc f3       	brlt	.-14     	; 0x16ea <__fixunssfsi+0x2e>
    16f8:	86 95       	lsr	r24
    16fa:	77 95       	ror	r23
    16fc:	67 95       	ror	r22
    16fe:	b3 95       	inc	r27
    1700:	d9 f7       	brne	.-10     	; 0x16f8 <__fixunssfsi+0x3c>
    1702:	3e f4       	brtc	.+14     	; 0x1712 <__fixunssfsi+0x56>
    1704:	90 95       	com	r25
    1706:	80 95       	com	r24
    1708:	70 95       	com	r23
    170a:	61 95       	neg	r22
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	8f 4f       	sbci	r24, 0xFF	; 255
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	08 95       	ret

00001714 <__floatunsisf>:
    1714:	e8 94       	clt
    1716:	09 c0       	rjmp	.+18     	; 0x172a <__floatsisf+0x12>

00001718 <__floatsisf>:
    1718:	97 fb       	bst	r25, 7
    171a:	3e f4       	brtc	.+14     	; 0x172a <__floatsisf+0x12>
    171c:	90 95       	com	r25
    171e:	80 95       	com	r24
    1720:	70 95       	com	r23
    1722:	61 95       	neg	r22
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	8f 4f       	sbci	r24, 0xFF	; 255
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	99 23       	and	r25, r25
    172c:	a9 f0       	breq	.+42     	; 0x1758 <__floatsisf+0x40>
    172e:	f9 2f       	mov	r31, r25
    1730:	96 e9       	ldi	r25, 0x96	; 150
    1732:	bb 27       	eor	r27, r27
    1734:	93 95       	inc	r25
    1736:	f6 95       	lsr	r31
    1738:	87 95       	ror	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	b7 95       	ror	r27
    1740:	f1 11       	cpse	r31, r1
    1742:	f8 cf       	rjmp	.-16     	; 0x1734 <__floatsisf+0x1c>
    1744:	fa f4       	brpl	.+62     	; 0x1784 <__floatsisf+0x6c>
    1746:	bb 0f       	add	r27, r27
    1748:	11 f4       	brne	.+4      	; 0x174e <__floatsisf+0x36>
    174a:	60 ff       	sbrs	r22, 0
    174c:	1b c0       	rjmp	.+54     	; 0x1784 <__floatsisf+0x6c>
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	8f 4f       	sbci	r24, 0xFF	; 255
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	16 c0       	rjmp	.+44     	; 0x1784 <__floatsisf+0x6c>
    1758:	88 23       	and	r24, r24
    175a:	11 f0       	breq	.+4      	; 0x1760 <__floatsisf+0x48>
    175c:	96 e9       	ldi	r25, 0x96	; 150
    175e:	11 c0       	rjmp	.+34     	; 0x1782 <__floatsisf+0x6a>
    1760:	77 23       	and	r23, r23
    1762:	21 f0       	breq	.+8      	; 0x176c <__floatsisf+0x54>
    1764:	9e e8       	ldi	r25, 0x8E	; 142
    1766:	87 2f       	mov	r24, r23
    1768:	76 2f       	mov	r23, r22
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <__floatsisf+0x5e>
    176c:	66 23       	and	r22, r22
    176e:	71 f0       	breq	.+28     	; 0x178c <__floatsisf+0x74>
    1770:	96 e8       	ldi	r25, 0x86	; 134
    1772:	86 2f       	mov	r24, r22
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	2a f0       	brmi	.+10     	; 0x1784 <__floatsisf+0x6c>
    177a:	9a 95       	dec	r25
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	da f7       	brpl	.-10     	; 0x177a <__floatsisf+0x62>
    1784:	88 0f       	add	r24, r24
    1786:	96 95       	lsr	r25
    1788:	87 95       	ror	r24
    178a:	97 f9       	bld	r25, 7
    178c:	08 95       	ret

0000178e <__fp_inf>:
    178e:	97 f9       	bld	r25, 7
    1790:	9f 67       	ori	r25, 0x7F	; 127
    1792:	80 e8       	ldi	r24, 0x80	; 128
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	08 95       	ret

0000179a <__fp_nan>:
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	80 ec       	ldi	r24, 0xC0	; 192
    179e:	08 95       	ret

000017a0 <__fp_pscA>:
    17a0:	00 24       	eor	r0, r0
    17a2:	0a 94       	dec	r0
    17a4:	16 16       	cp	r1, r22
    17a6:	17 06       	cpc	r1, r23
    17a8:	18 06       	cpc	r1, r24
    17aa:	09 06       	cpc	r0, r25
    17ac:	08 95       	ret

000017ae <__fp_pscB>:
    17ae:	00 24       	eor	r0, r0
    17b0:	0a 94       	dec	r0
    17b2:	12 16       	cp	r1, r18
    17b4:	13 06       	cpc	r1, r19
    17b6:	14 06       	cpc	r1, r20
    17b8:	05 06       	cpc	r0, r21
    17ba:	08 95       	ret

000017bc <__fp_round>:
    17bc:	09 2e       	mov	r0, r25
    17be:	03 94       	inc	r0
    17c0:	00 0c       	add	r0, r0
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <__fp_round+0xc>
    17c4:	88 23       	and	r24, r24
    17c6:	52 f0       	brmi	.+20     	; 0x17dc <__fp_round+0x20>
    17c8:	bb 0f       	add	r27, r27
    17ca:	40 f4       	brcc	.+16     	; 0x17dc <__fp_round+0x20>
    17cc:	bf 2b       	or	r27, r31
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <__fp_round+0x18>
    17d0:	60 ff       	sbrs	r22, 0
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__fp_round+0x20>
    17d4:	6f 5f       	subi	r22, 0xFF	; 255
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	08 95       	ret

000017de <__fp_split3>:
    17de:	57 fd       	sbrc	r21, 7
    17e0:	90 58       	subi	r25, 0x80	; 128
    17e2:	44 0f       	add	r20, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	59 f0       	breq	.+22     	; 0x17fe <__fp_splitA+0x10>
    17e8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ea:	71 f0       	breq	.+28     	; 0x1808 <__fp_splitA+0x1a>
    17ec:	47 95       	ror	r20

000017ee <__fp_splitA>:
    17ee:	88 0f       	add	r24, r24
    17f0:	97 fb       	bst	r25, 7
    17f2:	99 1f       	adc	r25, r25
    17f4:	61 f0       	breq	.+24     	; 0x180e <__fp_splitA+0x20>
    17f6:	9f 3f       	cpi	r25, 0xFF	; 255
    17f8:	79 f0       	breq	.+30     	; 0x1818 <__fp_splitA+0x2a>
    17fa:	87 95       	ror	r24
    17fc:	08 95       	ret
    17fe:	12 16       	cp	r1, r18
    1800:	13 06       	cpc	r1, r19
    1802:	14 06       	cpc	r1, r20
    1804:	55 1f       	adc	r21, r21
    1806:	f2 cf       	rjmp	.-28     	; 0x17ec <__fp_split3+0xe>
    1808:	46 95       	lsr	r20
    180a:	f1 df       	rcall	.-30     	; 0x17ee <__fp_splitA>
    180c:	08 c0       	rjmp	.+16     	; 0x181e <__fp_splitA+0x30>
    180e:	16 16       	cp	r1, r22
    1810:	17 06       	cpc	r1, r23
    1812:	18 06       	cpc	r1, r24
    1814:	99 1f       	adc	r25, r25
    1816:	f1 cf       	rjmp	.-30     	; 0x17fa <__fp_splitA+0xc>
    1818:	86 95       	lsr	r24
    181a:	71 05       	cpc	r23, r1
    181c:	61 05       	cpc	r22, r1
    181e:	08 94       	sec
    1820:	08 95       	ret

00001822 <__fp_zero>:
    1822:	e8 94       	clt

00001824 <__fp_szero>:
    1824:	bb 27       	eor	r27, r27
    1826:	66 27       	eor	r22, r22
    1828:	77 27       	eor	r23, r23
    182a:	cb 01       	movw	r24, r22
    182c:	97 f9       	bld	r25, 7
    182e:	08 95       	ret

00001830 <vfprintf>:
    1830:	2f 92       	push	r2
    1832:	3f 92       	push	r3
    1834:	4f 92       	push	r4
    1836:	5f 92       	push	r5
    1838:	6f 92       	push	r6
    183a:	7f 92       	push	r7
    183c:	8f 92       	push	r8
    183e:	9f 92       	push	r9
    1840:	af 92       	push	r10
    1842:	bf 92       	push	r11
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	62 97       	sbiw	r28, 0x12	; 18
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	7c 01       	movw	r14, r24
    1860:	1b 01       	movw	r2, r22
    1862:	6a 01       	movw	r12, r20
    1864:	fc 01       	movw	r30, r24
    1866:	16 82       	std	Z+6, r1	; 0x06
    1868:	17 82       	std	Z+7, r1	; 0x07
    186a:	83 81       	ldd	r24, Z+3	; 0x03
    186c:	81 fd       	sbrc	r24, 1
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <vfprintf+0x46>
    1870:	4e c3       	rjmp	.+1692   	; 0x1f0e <vfprintf+0x6de>
    1872:	65 01       	movw	r12, r10
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <vfprintf+0x50>
    1876:	88 24       	eor	r8, r8
    1878:	83 94       	inc	r8
    187a:	91 2c       	mov	r9, r1
    187c:	8c 0e       	add	r8, r28
    187e:	9d 1e       	adc	r9, r29
    1880:	f7 01       	movw	r30, r14
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	f1 01       	movw	r30, r2
    1886:	93 fd       	sbrc	r25, 3
    1888:	85 91       	lpm	r24, Z+
    188a:	93 ff       	sbrs	r25, 3
    188c:	81 91       	ld	r24, Z+
    188e:	1f 01       	movw	r2, r30
    1890:	88 23       	and	r24, r24
    1892:	09 f4       	brne	.+2      	; 0x1896 <vfprintf+0x66>
    1894:	38 c3       	rjmp	.+1648   	; 0x1f06 <vfprintf+0x6d6>
    1896:	85 32       	cpi	r24, 0x25	; 37
    1898:	39 f4       	brne	.+14     	; 0x18a8 <vfprintf+0x78>
    189a:	93 fd       	sbrc	r25, 3
    189c:	85 91       	lpm	r24, Z+
    189e:	93 ff       	sbrs	r25, 3
    18a0:	81 91       	ld	r24, Z+
    18a2:	1f 01       	movw	r2, r30
    18a4:	85 32       	cpi	r24, 0x25	; 37
    18a6:	29 f4       	brne	.+10     	; 0x18b2 <vfprintf+0x82>
    18a8:	b7 01       	movw	r22, r14
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	4b d4       	rcall	.+2198   	; 0x2144 <fputc>
    18ae:	56 01       	movw	r10, r12
    18b0:	e0 cf       	rjmp	.-64     	; 0x1872 <vfprintf+0x42>
    18b2:	71 2c       	mov	r7, r1
    18b4:	61 2c       	mov	r6, r1
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	20 32       	cpi	r18, 0x20	; 32
    18ba:	a8 f4       	brcc	.+42     	; 0x18e6 <vfprintf+0xb6>
    18bc:	8b 32       	cpi	r24, 0x2B	; 43
    18be:	61 f0       	breq	.+24     	; 0x18d8 <vfprintf+0xa8>
    18c0:	28 f4       	brcc	.+10     	; 0x18cc <vfprintf+0x9c>
    18c2:	80 32       	cpi	r24, 0x20	; 32
    18c4:	51 f0       	breq	.+20     	; 0x18da <vfprintf+0xaa>
    18c6:	83 32       	cpi	r24, 0x23	; 35
    18c8:	71 f4       	brne	.+28     	; 0x18e6 <vfprintf+0xb6>
    18ca:	0b c0       	rjmp	.+22     	; 0x18e2 <vfprintf+0xb2>
    18cc:	8d 32       	cpi	r24, 0x2D	; 45
    18ce:	39 f0       	breq	.+14     	; 0x18de <vfprintf+0xae>
    18d0:	80 33       	cpi	r24, 0x30	; 48
    18d2:	49 f4       	brne	.+18     	; 0x18e6 <vfprintf+0xb6>
    18d4:	21 60       	ori	r18, 0x01	; 1
    18d6:	28 c0       	rjmp	.+80     	; 0x1928 <vfprintf+0xf8>
    18d8:	22 60       	ori	r18, 0x02	; 2
    18da:	24 60       	ori	r18, 0x04	; 4
    18dc:	25 c0       	rjmp	.+74     	; 0x1928 <vfprintf+0xf8>
    18de:	28 60       	ori	r18, 0x08	; 8
    18e0:	23 c0       	rjmp	.+70     	; 0x1928 <vfprintf+0xf8>
    18e2:	20 61       	ori	r18, 0x10	; 16
    18e4:	21 c0       	rjmp	.+66     	; 0x1928 <vfprintf+0xf8>
    18e6:	27 fd       	sbrc	r18, 7
    18e8:	27 c0       	rjmp	.+78     	; 0x1938 <vfprintf+0x108>
    18ea:	38 2f       	mov	r19, r24
    18ec:	30 53       	subi	r19, 0x30	; 48
    18ee:	3a 30       	cpi	r19, 0x0A	; 10
    18f0:	78 f4       	brcc	.+30     	; 0x1910 <vfprintf+0xe0>
    18f2:	26 ff       	sbrs	r18, 6
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0xd2>
    18f6:	fa e0       	ldi	r31, 0x0A	; 10
    18f8:	7f 9e       	mul	r7, r31
    18fa:	30 0d       	add	r19, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	73 2e       	mov	r7, r19
    1900:	13 c0       	rjmp	.+38     	; 0x1928 <vfprintf+0xf8>
    1902:	4a e0       	ldi	r20, 0x0A	; 10
    1904:	64 9e       	mul	r6, r20
    1906:	30 0d       	add	r19, r0
    1908:	11 24       	eor	r1, r1
    190a:	63 2e       	mov	r6, r19
    190c:	20 62       	ori	r18, 0x20	; 32
    190e:	0c c0       	rjmp	.+24     	; 0x1928 <vfprintf+0xf8>
    1910:	8e 32       	cpi	r24, 0x2E	; 46
    1912:	21 f4       	brne	.+8      	; 0x191c <vfprintf+0xec>
    1914:	26 fd       	sbrc	r18, 6
    1916:	f7 c2       	rjmp	.+1518   	; 0x1f06 <vfprintf+0x6d6>
    1918:	20 64       	ori	r18, 0x40	; 64
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <vfprintf+0xf8>
    191c:	8c 36       	cpi	r24, 0x6C	; 108
    191e:	11 f4       	brne	.+4      	; 0x1924 <vfprintf+0xf4>
    1920:	20 68       	ori	r18, 0x80	; 128
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0xf8>
    1924:	88 36       	cpi	r24, 0x68	; 104
    1926:	41 f4       	brne	.+16     	; 0x1938 <vfprintf+0x108>
    1928:	f1 01       	movw	r30, r2
    192a:	93 fd       	sbrc	r25, 3
    192c:	85 91       	lpm	r24, Z+
    192e:	93 ff       	sbrs	r25, 3
    1930:	81 91       	ld	r24, Z+
    1932:	1f 01       	movw	r2, r30
    1934:	81 11       	cpse	r24, r1
    1936:	c0 cf       	rjmp	.-128    	; 0x18b8 <vfprintf+0x88>
    1938:	98 2f       	mov	r25, r24
    193a:	95 54       	subi	r25, 0x45	; 69
    193c:	93 30       	cpi	r25, 0x03	; 3
    193e:	18 f4       	brcc	.+6      	; 0x1946 <vfprintf+0x116>
    1940:	20 61       	ori	r18, 0x10	; 16
    1942:	80 5e       	subi	r24, 0xE0	; 224
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <vfprintf+0x122>
    1946:	98 2f       	mov	r25, r24
    1948:	95 56       	subi	r25, 0x65	; 101
    194a:	93 30       	cpi	r25, 0x03	; 3
    194c:	08 f0       	brcs	.+2      	; 0x1950 <vfprintf+0x120>
    194e:	94 c1       	rjmp	.+808    	; 0x1c78 <vfprintf+0x448>
    1950:	2f 7e       	andi	r18, 0xEF	; 239
    1952:	26 fd       	sbrc	r18, 6
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfprintf+0x12a>
    1956:	16 e0       	ldi	r17, 0x06	; 6
    1958:	71 2e       	mov	r7, r17
    195a:	bf e3       	ldi	r27, 0x3F	; 63
    195c:	5b 2e       	mov	r5, r27
    195e:	52 22       	and	r5, r18
    1960:	85 36       	cpi	r24, 0x65	; 101
    1962:	19 f4       	brne	.+6      	; 0x196a <vfprintf+0x13a>
    1964:	f0 e4       	ldi	r31, 0x40	; 64
    1966:	5f 2a       	or	r5, r31
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <vfprintf+0x148>
    196a:	86 36       	cpi	r24, 0x66	; 102
    196c:	19 f4       	brne	.+6      	; 0x1974 <vfprintf+0x144>
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	54 2a       	or	r5, r20
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <vfprintf+0x148>
    1974:	71 10       	cpse	r7, r1
    1976:	7a 94       	dec	r7
    1978:	57 fe       	sbrs	r5, 7
    197a:	07 c0       	rjmp	.+14     	; 0x198a <vfprintf+0x15a>
    197c:	5b e3       	ldi	r21, 0x3B	; 59
    197e:	57 15       	cp	r21, r7
    1980:	48 f0       	brcs	.+18     	; 0x1994 <vfprintf+0x164>
    1982:	47 2c       	mov	r4, r7
    1984:	43 94       	inc	r4
    1986:	27 e0       	ldi	r18, 0x07	; 7
    1988:	0d c0       	rjmp	.+26     	; 0x19a4 <vfprintf+0x174>
    198a:	87 e0       	ldi	r24, 0x07	; 7
    198c:	87 15       	cp	r24, r7
    198e:	30 f0       	brcs	.+12     	; 0x199c <vfprintf+0x16c>
    1990:	27 2d       	mov	r18, r7
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <vfprintf+0x172>
    1994:	27 e0       	ldi	r18, 0x07	; 7
    1996:	ac e3       	ldi	r26, 0x3C	; 60
    1998:	4a 2e       	mov	r4, r26
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <vfprintf+0x174>
    199c:	27 e0       	ldi	r18, 0x07	; 7
    199e:	f7 e0       	ldi	r31, 0x07	; 7
    19a0:	7f 2e       	mov	r7, r31
    19a2:	41 2c       	mov	r4, r1
    19a4:	56 01       	movw	r10, r12
    19a6:	94 e0       	ldi	r25, 0x04	; 4
    19a8:	a9 0e       	add	r10, r25
    19aa:	b1 1c       	adc	r11, r1
    19ac:	f6 01       	movw	r30, r12
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	04 2d       	mov	r16, r4
    19b8:	a4 01       	movw	r20, r8
    19ba:	d6 d2       	rcall	.+1452   	; 0x1f68 <__ftoa_engine>
    19bc:	8c 01       	movw	r16, r24
    19be:	49 81       	ldd	r20, Y+1	; 0x01
    19c0:	4c 87       	std	Y+12, r20	; 0x0c
    19c2:	40 ff       	sbrs	r20, 0
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <vfprintf+0x19a>
    19c6:	43 ff       	sbrs	r20, 3
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <vfprintf+0x1a8>
    19ca:	51 fc       	sbrc	r5, 1
    19cc:	08 c0       	rjmp	.+16     	; 0x19de <vfprintf+0x1ae>
    19ce:	52 fe       	sbrs	r5, 2
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <vfprintf+0x1b4>
    19d2:	e0 e2       	ldi	r30, 0x20	; 32
    19d4:	de 2e       	mov	r13, r30
    19d6:	07 c0       	rjmp	.+14     	; 0x19e6 <vfprintf+0x1b6>
    19d8:	7d e2       	ldi	r23, 0x2D	; 45
    19da:	d7 2e       	mov	r13, r23
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <vfprintf+0x1b6>
    19de:	6b e2       	ldi	r22, 0x2B	; 43
    19e0:	d6 2e       	mov	r13, r22
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <vfprintf+0x1b6>
    19e4:	d1 2c       	mov	r13, r1
    19e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    19e8:	8c 70       	andi	r24, 0x0C	; 12
    19ea:	89 f1       	breq	.+98     	; 0x1a4e <vfprintf+0x21e>
    19ec:	dd 20       	and	r13, r13
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <vfprintf+0x1c4>
    19f0:	84 e0       	ldi	r24, 0x04	; 4
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <vfprintf+0x1c6>
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	86 15       	cp	r24, r6
    19f8:	10 f0       	brcs	.+4      	; 0x19fe <vfprintf+0x1ce>
    19fa:	61 2c       	mov	r6, r1
    19fc:	0a c0       	rjmp	.+20     	; 0x1a12 <vfprintf+0x1e2>
    19fe:	68 1a       	sub	r6, r24
    1a00:	53 fc       	sbrc	r5, 3
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <vfprintf+0x1e2>
    1a04:	b7 01       	movw	r22, r14
    1a06:	80 e2       	ldi	r24, 0x20	; 32
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9c d3       	rcall	.+1848   	; 0x2144 <fputc>
    1a0c:	6a 94       	dec	r6
    1a0e:	d1 f7       	brne	.-12     	; 0x1a04 <vfprintf+0x1d4>
    1a10:	f4 cf       	rjmp	.-24     	; 0x19fa <vfprintf+0x1ca>
    1a12:	dd 20       	and	r13, r13
    1a14:	21 f0       	breq	.+8      	; 0x1a1e <vfprintf+0x1ee>
    1a16:	b7 01       	movw	r22, r14
    1a18:	8d 2d       	mov	r24, r13
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	93 d3       	rcall	.+1830   	; 0x2144 <fputc>
    1a1e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a20:	53 fd       	sbrc	r21, 3
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <vfprintf+0x1fa>
    1a24:	00 e0       	ldi	r16, 0x00	; 0
    1a26:	12 e0       	ldi	r17, 0x02	; 2
    1a28:	0b c0       	rjmp	.+22     	; 0x1a40 <vfprintf+0x210>
    1a2a:	0c ef       	ldi	r16, 0xFC	; 252
    1a2c:	11 e0       	ldi	r17, 0x01	; 1
    1a2e:	08 c0       	rjmp	.+16     	; 0x1a40 <vfprintf+0x210>
    1a30:	51 10       	cpse	r5, r1
    1a32:	80 52       	subi	r24, 0x20	; 32
    1a34:	b7 01       	movw	r22, r14
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	85 d3       	rcall	.+1802   	; 0x2144 <fputc>
    1a3a:	0f 5f       	subi	r16, 0xFF	; 255
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <vfprintf+0x214>
    1a40:	80 e1       	ldi	r24, 0x10	; 16
    1a42:	58 22       	and	r5, r24
    1a44:	f8 01       	movw	r30, r16
    1a46:	84 91       	lpm	r24, Z
    1a48:	81 11       	cpse	r24, r1
    1a4a:	f2 cf       	rjmp	.-28     	; 0x1a30 <vfprintf+0x200>
    1a4c:	59 c2       	rjmp	.+1202   	; 0x1f00 <vfprintf+0x6d0>
    1a4e:	57 fe       	sbrs	r5, 7
    1a50:	0e c0       	rjmp	.+28     	; 0x1a6e <vfprintf+0x23e>
    1a52:	40 0e       	add	r4, r16
    1a54:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a56:	44 ff       	sbrs	r20, 4
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <vfprintf+0x232>
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	81 33       	cpi	r24, 0x31	; 49
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <vfprintf+0x232>
    1a60:	4a 94       	dec	r4
    1a62:	14 14       	cp	r1, r4
    1a64:	4c f5       	brge	.+82     	; 0x1ab8 <vfprintf+0x288>
    1a66:	58 e0       	ldi	r21, 0x08	; 8
    1a68:	54 15       	cp	r21, r4
    1a6a:	48 f1       	brcs	.+82     	; 0x1abe <vfprintf+0x28e>
    1a6c:	2c c0       	rjmp	.+88     	; 0x1ac6 <vfprintf+0x296>
    1a6e:	56 fc       	sbrc	r5, 6
    1a70:	2a c0       	rjmp	.+84     	; 0x1ac6 <vfprintf+0x296>
    1a72:	87 2d       	mov	r24, r7
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	80 17       	cp	r24, r16
    1a78:	91 07       	cpc	r25, r17
    1a7a:	44 f0       	brlt	.+16     	; 0x1a8c <vfprintf+0x25c>
    1a7c:	0c 3f       	cpi	r16, 0xFC	; 252
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	18 07       	cpc	r17, r24
    1a82:	24 f0       	brlt	.+8      	; 0x1a8c <vfprintf+0x25c>
    1a84:	90 e8       	ldi	r25, 0x80	; 128
    1a86:	59 2a       	or	r5, r25
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <vfprintf+0x25c>
    1a8a:	7a 94       	dec	r7
    1a8c:	77 20       	and	r7, r7
    1a8e:	49 f0       	breq	.+18     	; 0x1aa2 <vfprintf+0x272>
    1a90:	e2 e0       	ldi	r30, 0x02	; 2
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	ec 0f       	add	r30, r28
    1a96:	fd 1f       	adc	r31, r29
    1a98:	e7 0d       	add	r30, r7
    1a9a:	f1 1d       	adc	r31, r1
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 33       	cpi	r24, 0x30	; 48
    1aa0:	a1 f3       	breq	.-24     	; 0x1a8a <vfprintf+0x25a>
    1aa2:	57 fe       	sbrs	r5, 7
    1aa4:	10 c0       	rjmp	.+32     	; 0x1ac6 <vfprintf+0x296>
    1aa6:	47 2c       	mov	r4, r7
    1aa8:	43 94       	inc	r4
    1aaa:	87 2d       	mov	r24, r7
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	08 17       	cp	r16, r24
    1ab0:	19 07       	cpc	r17, r25
    1ab2:	44 f4       	brge	.+16     	; 0x1ac4 <vfprintf+0x294>
    1ab4:	70 1a       	sub	r7, r16
    1ab6:	07 c0       	rjmp	.+14     	; 0x1ac6 <vfprintf+0x296>
    1ab8:	44 24       	eor	r4, r4
    1aba:	43 94       	inc	r4
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <vfprintf+0x296>
    1abe:	58 e0       	ldi	r21, 0x08	; 8
    1ac0:	45 2e       	mov	r4, r21
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <vfprintf+0x296>
    1ac4:	71 2c       	mov	r7, r1
    1ac6:	57 fe       	sbrs	r5, 7
    1ac8:	07 c0       	rjmp	.+14     	; 0x1ad8 <vfprintf+0x2a8>
    1aca:	10 16       	cp	r1, r16
    1acc:	11 06       	cpc	r1, r17
    1ace:	3c f4       	brge	.+14     	; 0x1ade <vfprintf+0x2ae>
    1ad0:	98 01       	movw	r18, r16
    1ad2:	2f 5f       	subi	r18, 0xFF	; 255
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	05 c0       	rjmp	.+10     	; 0x1ae2 <vfprintf+0x2b2>
    1ad8:	25 e0       	ldi	r18, 0x05	; 5
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x2b2>
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	dd 20       	and	r13, r13
    1ae4:	11 f0       	breq	.+4      	; 0x1aea <vfprintf+0x2ba>
    1ae6:	2f 5f       	subi	r18, 0xFF	; 255
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	77 20       	and	r7, r7
    1aec:	31 f0       	breq	.+12     	; 0x1afa <vfprintf+0x2ca>
    1aee:	47 2d       	mov	r20, r7
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	4f 5f       	subi	r20, 0xFF	; 255
    1af4:	5f 4f       	sbci	r21, 0xFF	; 255
    1af6:	24 0f       	add	r18, r20
    1af8:	35 1f       	adc	r19, r21
    1afa:	46 2d       	mov	r20, r6
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	24 17       	cp	r18, r20
    1b00:	35 07       	cpc	r19, r21
    1b02:	14 f4       	brge	.+4      	; 0x1b08 <vfprintf+0x2d8>
    1b04:	62 1a       	sub	r6, r18
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <vfprintf+0x2da>
    1b08:	61 2c       	mov	r6, r1
    1b0a:	85 2d       	mov	r24, r5
    1b0c:	89 70       	andi	r24, 0x09	; 9
    1b0e:	41 f4       	brne	.+16     	; 0x1b20 <vfprintf+0x2f0>
    1b10:	05 c0       	rjmp	.+10     	; 0x1b1c <vfprintf+0x2ec>
    1b12:	b7 01       	movw	r22, r14
    1b14:	80 e2       	ldi	r24, 0x20	; 32
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	15 d3       	rcall	.+1578   	; 0x2144 <fputc>
    1b1a:	6a 94       	dec	r6
    1b1c:	61 10       	cpse	r6, r1
    1b1e:	f9 cf       	rjmp	.-14     	; 0x1b12 <vfprintf+0x2e2>
    1b20:	dd 20       	and	r13, r13
    1b22:	21 f0       	breq	.+8      	; 0x1b2c <vfprintf+0x2fc>
    1b24:	b7 01       	movw	r22, r14
    1b26:	8d 2d       	mov	r24, r13
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0c d3       	rcall	.+1560   	; 0x2144 <fputc>
    1b2c:	53 fc       	sbrc	r5, 3
    1b2e:	08 c0       	rjmp	.+16     	; 0x1b40 <vfprintf+0x310>
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <vfprintf+0x30c>
    1b32:	b7 01       	movw	r22, r14
    1b34:	80 e3       	ldi	r24, 0x30	; 48
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	05 d3       	rcall	.+1546   	; 0x2144 <fputc>
    1b3a:	6a 94       	dec	r6
    1b3c:	61 10       	cpse	r6, r1
    1b3e:	f9 cf       	rjmp	.-14     	; 0x1b32 <vfprintf+0x302>
    1b40:	57 fe       	sbrs	r5, 7
    1b42:	54 c0       	rjmp	.+168    	; 0x1bec <vfprintf+0x3bc>
    1b44:	68 01       	movw	r12, r16
    1b46:	17 ff       	sbrs	r17, 7
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <vfprintf+0x31e>
    1b4a:	c1 2c       	mov	r12, r1
    1b4c:	d1 2c       	mov	r13, r1
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	a8 01       	movw	r20, r16
    1b54:	44 19       	sub	r20, r4
    1b56:	51 09       	sbc	r21, r1
    1b58:	4d 87       	std	Y+13, r20	; 0x0d
    1b5a:	5e 87       	std	Y+14, r21	; 0x0e
    1b5c:	28 01       	movw	r4, r16
    1b5e:	4c 18       	sub	r4, r12
    1b60:	5d 08       	sbc	r5, r13
    1b62:	48 0c       	add	r4, r8
    1b64:	59 1c       	adc	r5, r9
    1b66:	87 2d       	mov	r24, r7
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	44 27       	eor	r20, r20
    1b6c:	55 27       	eor	r21, r21
    1b6e:	48 1b       	sub	r20, r24
    1b70:	59 0b       	sbc	r21, r25
    1b72:	4f 87       	std	Y+15, r20	; 0x0f
    1b74:	58 8b       	std	Y+16, r21	; 0x10
    1b76:	5f ef       	ldi	r21, 0xFF	; 255
    1b78:	c5 16       	cp	r12, r21
    1b7a:	d5 06       	cpc	r13, r21
    1b7c:	41 f4       	brne	.+16     	; 0x1b8e <vfprintf+0x35e>
    1b7e:	b7 01       	movw	r22, r14
    1b80:	8e e2       	ldi	r24, 0x2E	; 46
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	2a 8b       	std	Y+18, r18	; 0x12
    1b86:	39 8b       	std	Y+17, r19	; 0x11
    1b88:	dd d2       	rcall	.+1466   	; 0x2144 <fputc>
    1b8a:	39 89       	ldd	r19, Y+17	; 0x11
    1b8c:	2a 89       	ldd	r18, Y+18	; 0x12
    1b8e:	0c 15       	cp	r16, r12
    1b90:	1d 05       	cpc	r17, r13
    1b92:	54 f0       	brlt	.+20     	; 0x1ba8 <vfprintf+0x378>
    1b94:	4d 85       	ldd	r20, Y+13	; 0x0d
    1b96:	5e 85       	ldd	r21, Y+14	; 0x0e
    1b98:	4c 15       	cp	r20, r12
    1b9a:	5d 05       	cpc	r21, r13
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <vfprintf+0x378>
    1b9e:	f2 01       	movw	r30, r4
    1ba0:	e2 0f       	add	r30, r18
    1ba2:	f3 1f       	adc	r31, r19
    1ba4:	81 81       	ldd	r24, Z+1	; 0x01
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <vfprintf+0x37a>
    1ba8:	80 e3       	ldi	r24, 0x30	; 48
    1baa:	51 e0       	ldi	r21, 0x01	; 1
    1bac:	c5 1a       	sub	r12, r21
    1bae:	d1 08       	sbc	r13, r1
    1bb0:	2f 5f       	subi	r18, 0xFF	; 255
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1bb6:	58 89       	ldd	r21, Y+16	; 0x10
    1bb8:	c4 16       	cp	r12, r20
    1bba:	d5 06       	cpc	r13, r21
    1bbc:	44 f0       	brlt	.+16     	; 0x1bce <vfprintf+0x39e>
    1bbe:	b7 01       	movw	r22, r14
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	2a 8b       	std	Y+18, r18	; 0x12
    1bc4:	39 8b       	std	Y+17, r19	; 0x11
    1bc6:	be d2       	rcall	.+1404   	; 0x2144 <fputc>
    1bc8:	2a 89       	ldd	r18, Y+18	; 0x12
    1bca:	39 89       	ldd	r19, Y+17	; 0x11
    1bcc:	d4 cf       	rjmp	.-88     	; 0x1b76 <vfprintf+0x346>
    1bce:	c0 16       	cp	r12, r16
    1bd0:	d1 06       	cpc	r13, r17
    1bd2:	49 f4       	brne	.+18     	; 0x1be6 <vfprintf+0x3b6>
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	96 33       	cpi	r25, 0x36	; 54
    1bd8:	28 f4       	brcc	.+10     	; 0x1be4 <vfprintf+0x3b4>
    1bda:	95 33       	cpi	r25, 0x35	; 53
    1bdc:	21 f4       	brne	.+8      	; 0x1be6 <vfprintf+0x3b6>
    1bde:	5c 85       	ldd	r21, Y+12	; 0x0c
    1be0:	54 fd       	sbrc	r21, 4
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <vfprintf+0x3b6>
    1be4:	81 e3       	ldi	r24, 0x31	; 49
    1be6:	b7 01       	movw	r22, r14
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	44 c0       	rjmp	.+136    	; 0x1c74 <vfprintf+0x444>
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	81 33       	cpi	r24, 0x31	; 49
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <vfprintf+0x3c8>
    1bf2:	4c 85       	ldd	r20, Y+12	; 0x0c
    1bf4:	4f 7e       	andi	r20, 0xEF	; 239
    1bf6:	4c 87       	std	Y+12, r20	; 0x0c
    1bf8:	b7 01       	movw	r22, r14
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a3 d2       	rcall	.+1350   	; 0x2144 <fputc>
    1bfe:	71 10       	cpse	r7, r1
    1c00:	05 c0       	rjmp	.+10     	; 0x1c0c <vfprintf+0x3dc>
    1c02:	54 fe       	sbrs	r5, 4
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <vfprintf+0x3fe>
    1c06:	85 e4       	ldi	r24, 0x45	; 69
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	13 c0       	rjmp	.+38     	; 0x1c32 <vfprintf+0x402>
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	8e e2       	ldi	r24, 0x2E	; 46
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	98 d2       	rcall	.+1328   	; 0x2144 <fputc>
    1c14:	42 e0       	ldi	r20, 0x02	; 2
    1c16:	d4 2e       	mov	r13, r20
    1c18:	f4 01       	movw	r30, r8
    1c1a:	ed 0d       	add	r30, r13
    1c1c:	f1 1d       	adc	r31, r1
    1c1e:	d3 94       	inc	r13
    1c20:	b7 01       	movw	r22, r14
    1c22:	80 81       	ld	r24, Z
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	8e d2       	rcall	.+1308   	; 0x2144 <fputc>
    1c28:	7a 94       	dec	r7
    1c2a:	b1 f7       	brne	.-20     	; 0x1c18 <vfprintf+0x3e8>
    1c2c:	ea cf       	rjmp	.-44     	; 0x1c02 <vfprintf+0x3d2>
    1c2e:	85 e6       	ldi	r24, 0x65	; 101
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	b7 01       	movw	r22, r14
    1c34:	87 d2       	rcall	.+1294   	; 0x2144 <fputc>
    1c36:	17 fd       	sbrc	r17, 7
    1c38:	06 c0       	rjmp	.+12     	; 0x1c46 <vfprintf+0x416>
    1c3a:	01 15       	cp	r16, r1
    1c3c:	11 05       	cpc	r17, r1
    1c3e:	41 f4       	brne	.+16     	; 0x1c50 <vfprintf+0x420>
    1c40:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c42:	54 ff       	sbrs	r21, 4
    1c44:	05 c0       	rjmp	.+10     	; 0x1c50 <vfprintf+0x420>
    1c46:	11 95       	neg	r17
    1c48:	01 95       	neg	r16
    1c4a:	11 09       	sbc	r17, r1
    1c4c:	8d e2       	ldi	r24, 0x2D	; 45
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <vfprintf+0x422>
    1c50:	8b e2       	ldi	r24, 0x2B	; 43
    1c52:	b7 01       	movw	r22, r14
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	76 d2       	rcall	.+1260   	; 0x2144 <fputc>
    1c58:	80 e3       	ldi	r24, 0x30	; 48
    1c5a:	03 c0       	rjmp	.+6      	; 0x1c62 <vfprintf+0x432>
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	0a 50       	subi	r16, 0x0A	; 10
    1c60:	11 09       	sbc	r17, r1
    1c62:	0a 30       	cpi	r16, 0x0A	; 10
    1c64:	11 05       	cpc	r17, r1
    1c66:	d4 f7       	brge	.-12     	; 0x1c5c <vfprintf+0x42c>
    1c68:	b7 01       	movw	r22, r14
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	6b d2       	rcall	.+1238   	; 0x2144 <fputc>
    1c6e:	b7 01       	movw	r22, r14
    1c70:	c8 01       	movw	r24, r16
    1c72:	c0 96       	adiw	r24, 0x30	; 48
    1c74:	67 d2       	rcall	.+1230   	; 0x2144 <fputc>
    1c76:	44 c1       	rjmp	.+648    	; 0x1f00 <vfprintf+0x6d0>
    1c78:	83 36       	cpi	r24, 0x63	; 99
    1c7a:	31 f0       	breq	.+12     	; 0x1c88 <vfprintf+0x458>
    1c7c:	83 37       	cpi	r24, 0x73	; 115
    1c7e:	81 f0       	breq	.+32     	; 0x1ca0 <vfprintf+0x470>
    1c80:	83 35       	cpi	r24, 0x53	; 83
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <vfprintf+0x456>
    1c84:	5a c0       	rjmp	.+180    	; 0x1d3a <vfprintf+0x50a>
    1c86:	23 c0       	rjmp	.+70     	; 0x1cce <vfprintf+0x49e>
    1c88:	56 01       	movw	r10, r12
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	a8 0e       	add	r10, r24
    1c8e:	b1 1c       	adc	r11, r1
    1c90:	f6 01       	movw	r30, r12
    1c92:	80 81       	ld	r24, Z
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	cc 24       	eor	r12, r12
    1c98:	c3 94       	inc	r12
    1c9a:	d1 2c       	mov	r13, r1
    1c9c:	84 01       	movw	r16, r8
    1c9e:	13 c0       	rjmp	.+38     	; 0x1cc6 <vfprintf+0x496>
    1ca0:	56 01       	movw	r10, r12
    1ca2:	f2 e0       	ldi	r31, 0x02	; 2
    1ca4:	af 0e       	add	r10, r31
    1ca6:	b1 1c       	adc	r11, r1
    1ca8:	f6 01       	movw	r30, r12
    1caa:	00 81       	ld	r16, Z
    1cac:	11 81       	ldd	r17, Z+1	; 0x01
    1cae:	26 ff       	sbrs	r18, 6
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <vfprintf+0x488>
    1cb2:	67 2d       	mov	r22, r7
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <vfprintf+0x48c>
    1cb8:	6f ef       	ldi	r22, 0xFF	; 255
    1cba:	7f ef       	ldi	r23, 0xFF	; 255
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	2a 8b       	std	Y+18, r18	; 0x12
    1cc0:	36 d2       	rcall	.+1132   	; 0x212e <strnlen>
    1cc2:	6c 01       	movw	r12, r24
    1cc4:	2a 89       	ldd	r18, Y+18	; 0x12
    1cc6:	9f e7       	ldi	r25, 0x7F	; 127
    1cc8:	59 2e       	mov	r5, r25
    1cca:	52 22       	and	r5, r18
    1ccc:	16 c0       	rjmp	.+44     	; 0x1cfa <vfprintf+0x4ca>
    1cce:	56 01       	movw	r10, r12
    1cd0:	f2 e0       	ldi	r31, 0x02	; 2
    1cd2:	af 0e       	add	r10, r31
    1cd4:	b1 1c       	adc	r11, r1
    1cd6:	f6 01       	movw	r30, r12
    1cd8:	00 81       	ld	r16, Z
    1cda:	11 81       	ldd	r17, Z+1	; 0x01
    1cdc:	26 ff       	sbrs	r18, 6
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <vfprintf+0x4b6>
    1ce0:	67 2d       	mov	r22, r7
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x4ba>
    1ce6:	6f ef       	ldi	r22, 0xFF	; 255
    1ce8:	7f ef       	ldi	r23, 0xFF	; 255
    1cea:	c8 01       	movw	r24, r16
    1cec:	2a 8b       	std	Y+18, r18	; 0x12
    1cee:	14 d2       	rcall	.+1064   	; 0x2118 <strnlen_P>
    1cf0:	6c 01       	movw	r12, r24
    1cf2:	2a 89       	ldd	r18, Y+18	; 0x12
    1cf4:	80 e8       	ldi	r24, 0x80	; 128
    1cf6:	58 2e       	mov	r5, r24
    1cf8:	52 2a       	or	r5, r18
    1cfa:	53 fc       	sbrc	r5, 3
    1cfc:	1a c0       	rjmp	.+52     	; 0x1d32 <vfprintf+0x502>
    1cfe:	05 c0       	rjmp	.+10     	; 0x1d0a <vfprintf+0x4da>
    1d00:	b7 01       	movw	r22, r14
    1d02:	80 e2       	ldi	r24, 0x20	; 32
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	1e d2       	rcall	.+1084   	; 0x2144 <fputc>
    1d08:	6a 94       	dec	r6
    1d0a:	86 2d       	mov	r24, r6
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	c8 16       	cp	r12, r24
    1d10:	d9 06       	cpc	r13, r25
    1d12:	b0 f3       	brcs	.-20     	; 0x1d00 <vfprintf+0x4d0>
    1d14:	0e c0       	rjmp	.+28     	; 0x1d32 <vfprintf+0x502>
    1d16:	f8 01       	movw	r30, r16
    1d18:	57 fc       	sbrc	r5, 7
    1d1a:	85 91       	lpm	r24, Z+
    1d1c:	57 fe       	sbrs	r5, 7
    1d1e:	81 91       	ld	r24, Z+
    1d20:	8f 01       	movw	r16, r30
    1d22:	b7 01       	movw	r22, r14
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e d2       	rcall	.+1052   	; 0x2144 <fputc>
    1d28:	61 10       	cpse	r6, r1
    1d2a:	6a 94       	dec	r6
    1d2c:	f1 e0       	ldi	r31, 0x01	; 1
    1d2e:	cf 1a       	sub	r12, r31
    1d30:	d1 08       	sbc	r13, r1
    1d32:	c1 14       	cp	r12, r1
    1d34:	d1 04       	cpc	r13, r1
    1d36:	79 f7       	brne	.-34     	; 0x1d16 <vfprintf+0x4e6>
    1d38:	e3 c0       	rjmp	.+454    	; 0x1f00 <vfprintf+0x6d0>
    1d3a:	84 36       	cpi	r24, 0x64	; 100
    1d3c:	11 f0       	breq	.+4      	; 0x1d42 <vfprintf+0x512>
    1d3e:	89 36       	cpi	r24, 0x69	; 105
    1d40:	49 f5       	brne	.+82     	; 0x1d94 <vfprintf+0x564>
    1d42:	56 01       	movw	r10, r12
    1d44:	27 ff       	sbrs	r18, 7
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <vfprintf+0x52a>
    1d48:	44 e0       	ldi	r20, 0x04	; 4
    1d4a:	a4 0e       	add	r10, r20
    1d4c:	b1 1c       	adc	r11, r1
    1d4e:	f6 01       	movw	r30, r12
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	0a c0       	rjmp	.+20     	; 0x1d6e <vfprintf+0x53e>
    1d5a:	f2 e0       	ldi	r31, 0x02	; 2
    1d5c:	af 0e       	add	r10, r31
    1d5e:	b1 1c       	adc	r11, r1
    1d60:	f6 01       	movw	r30, r12
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	88 27       	eor	r24, r24
    1d68:	77 fd       	sbrc	r23, 7
    1d6a:	80 95       	com	r24
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	12 2f       	mov	r17, r18
    1d70:	1f 76       	andi	r17, 0x6F	; 111
    1d72:	97 ff       	sbrs	r25, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <vfprintf+0x556>
    1d76:	90 95       	com	r25
    1d78:	80 95       	com	r24
    1d7a:	70 95       	com	r23
    1d7c:	61 95       	neg	r22
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	8f 4f       	sbci	r24, 0xFF	; 255
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	10 68       	ori	r17, 0x80	; 128
    1d86:	2a e0       	ldi	r18, 0x0A	; 10
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	a4 01       	movw	r20, r8
    1d8c:	07 d2       	rcall	.+1038   	; 0x219c <__ultoa_invert>
    1d8e:	d8 2e       	mov	r13, r24
    1d90:	d8 18       	sub	r13, r8
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <vfprintf+0x5e2>
    1d94:	12 2f       	mov	r17, r18
    1d96:	85 37       	cpi	r24, 0x75	; 117
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <vfprintf+0x572>
    1d9a:	1f 7e       	andi	r17, 0xEF	; 239
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	1f c0       	rjmp	.+62     	; 0x1de0 <vfprintf+0x5b0>
    1da2:	19 7f       	andi	r17, 0xF9	; 249
    1da4:	8f 36       	cpi	r24, 0x6F	; 111
    1da6:	a1 f0       	breq	.+40     	; 0x1dd0 <vfprintf+0x5a0>
    1da8:	20 f4       	brcc	.+8      	; 0x1db2 <vfprintf+0x582>
    1daa:	88 35       	cpi	r24, 0x58	; 88
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <vfprintf+0x580>
    1dae:	ab c0       	rjmp	.+342    	; 0x1f06 <vfprintf+0x6d6>
    1db0:	0b c0       	rjmp	.+22     	; 0x1dc8 <vfprintf+0x598>
    1db2:	80 37       	cpi	r24, 0x70	; 112
    1db4:	21 f0       	breq	.+8      	; 0x1dbe <vfprintf+0x58e>
    1db6:	88 37       	cpi	r24, 0x78	; 120
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <vfprintf+0x58c>
    1dba:	a5 c0       	rjmp	.+330    	; 0x1f06 <vfprintf+0x6d6>
    1dbc:	01 c0       	rjmp	.+2      	; 0x1dc0 <vfprintf+0x590>
    1dbe:	10 61       	ori	r17, 0x10	; 16
    1dc0:	14 ff       	sbrs	r17, 4
    1dc2:	09 c0       	rjmp	.+18     	; 0x1dd6 <vfprintf+0x5a6>
    1dc4:	14 60       	ori	r17, 0x04	; 4
    1dc6:	07 c0       	rjmp	.+14     	; 0x1dd6 <vfprintf+0x5a6>
    1dc8:	24 ff       	sbrs	r18, 4
    1dca:	08 c0       	rjmp	.+16     	; 0x1ddc <vfprintf+0x5ac>
    1dcc:	16 60       	ori	r17, 0x06	; 6
    1dce:	06 c0       	rjmp	.+12     	; 0x1ddc <vfprintf+0x5ac>
    1dd0:	28 e0       	ldi	r18, 0x08	; 8
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <vfprintf+0x5b0>
    1dd6:	20 e1       	ldi	r18, 0x10	; 16
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <vfprintf+0x5b0>
    1ddc:	20 e1       	ldi	r18, 0x10	; 16
    1dde:	32 e0       	ldi	r19, 0x02	; 2
    1de0:	56 01       	movw	r10, r12
    1de2:	17 ff       	sbrs	r17, 7
    1de4:	09 c0       	rjmp	.+18     	; 0x1df8 <vfprintf+0x5c8>
    1de6:	f4 e0       	ldi	r31, 0x04	; 4
    1de8:	af 0e       	add	r10, r31
    1dea:	b1 1c       	adc	r11, r1
    1dec:	f6 01       	movw	r30, r12
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <vfprintf+0x5d8>
    1df8:	f2 e0       	ldi	r31, 0x02	; 2
    1dfa:	af 0e       	add	r10, r31
    1dfc:	b1 1c       	adc	r11, r1
    1dfe:	f6 01       	movw	r30, r12
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a4 01       	movw	r20, r8
    1e0a:	c8 d1       	rcall	.+912    	; 0x219c <__ultoa_invert>
    1e0c:	d8 2e       	mov	r13, r24
    1e0e:	d8 18       	sub	r13, r8
    1e10:	1f 77       	andi	r17, 0x7F	; 127
    1e12:	16 ff       	sbrs	r17, 6
    1e14:	0b c0       	rjmp	.+22     	; 0x1e2c <vfprintf+0x5fc>
    1e16:	21 2f       	mov	r18, r17
    1e18:	2e 7f       	andi	r18, 0xFE	; 254
    1e1a:	d7 14       	cp	r13, r7
    1e1c:	50 f4       	brcc	.+20     	; 0x1e32 <vfprintf+0x602>
    1e1e:	14 ff       	sbrs	r17, 4
    1e20:	0a c0       	rjmp	.+20     	; 0x1e36 <vfprintf+0x606>
    1e22:	12 fd       	sbrc	r17, 2
    1e24:	08 c0       	rjmp	.+16     	; 0x1e36 <vfprintf+0x606>
    1e26:	21 2f       	mov	r18, r17
    1e28:	2e 7e       	andi	r18, 0xEE	; 238
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <vfprintf+0x606>
    1e2c:	0d 2d       	mov	r16, r13
    1e2e:	21 2f       	mov	r18, r17
    1e30:	03 c0       	rjmp	.+6      	; 0x1e38 <vfprintf+0x608>
    1e32:	0d 2d       	mov	r16, r13
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <vfprintf+0x608>
    1e36:	07 2d       	mov	r16, r7
    1e38:	24 ff       	sbrs	r18, 4
    1e3a:	0c c0       	rjmp	.+24     	; 0x1e54 <vfprintf+0x624>
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	ed 0d       	add	r30, r13
    1e40:	f1 1d       	adc	r31, r1
    1e42:	80 81       	ld	r24, Z
    1e44:	80 33       	cpi	r24, 0x30	; 48
    1e46:	11 f4       	brne	.+4      	; 0x1e4c <vfprintf+0x61c>
    1e48:	29 7e       	andi	r18, 0xE9	; 233
    1e4a:	08 c0       	rjmp	.+16     	; 0x1e5c <vfprintf+0x62c>
    1e4c:	22 ff       	sbrs	r18, 2
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <vfprintf+0x62a>
    1e50:	0e 5f       	subi	r16, 0xFE	; 254
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <vfprintf+0x62c>
    1e54:	82 2f       	mov	r24, r18
    1e56:	86 78       	andi	r24, 0x86	; 134
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <vfprintf+0x62c>
    1e5a:	0f 5f       	subi	r16, 0xFF	; 255
    1e5c:	23 fd       	sbrc	r18, 3
    1e5e:	13 c0       	rjmp	.+38     	; 0x1e86 <vfprintf+0x656>
    1e60:	20 ff       	sbrs	r18, 0
    1e62:	0e c0       	rjmp	.+28     	; 0x1e80 <vfprintf+0x650>
    1e64:	7d 2c       	mov	r7, r13
    1e66:	06 15       	cp	r16, r6
    1e68:	58 f4       	brcc	.+22     	; 0x1e80 <vfprintf+0x650>
    1e6a:	76 0c       	add	r7, r6
    1e6c:	70 1a       	sub	r7, r16
    1e6e:	06 2d       	mov	r16, r6
    1e70:	07 c0       	rjmp	.+14     	; 0x1e80 <vfprintf+0x650>
    1e72:	b7 01       	movw	r22, r14
    1e74:	80 e2       	ldi	r24, 0x20	; 32
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	2a 8b       	std	Y+18, r18	; 0x12
    1e7a:	64 d1       	rcall	.+712    	; 0x2144 <fputc>
    1e7c:	0f 5f       	subi	r16, 0xFF	; 255
    1e7e:	2a 89       	ldd	r18, Y+18	; 0x12
    1e80:	06 15       	cp	r16, r6
    1e82:	b8 f3       	brcs	.-18     	; 0x1e72 <vfprintf+0x642>
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <vfprintf+0x65e>
    1e86:	06 15       	cp	r16, r6
    1e88:	10 f4       	brcc	.+4      	; 0x1e8e <vfprintf+0x65e>
    1e8a:	60 1a       	sub	r6, r16
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <vfprintf+0x660>
    1e8e:	61 2c       	mov	r6, r1
    1e90:	24 ff       	sbrs	r18, 4
    1e92:	11 c0       	rjmp	.+34     	; 0x1eb6 <vfprintf+0x686>
    1e94:	b7 01       	movw	r22, r14
    1e96:	80 e3       	ldi	r24, 0x30	; 48
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	2a 8b       	std	Y+18, r18	; 0x12
    1e9c:	53 d1       	rcall	.+678    	; 0x2144 <fputc>
    1e9e:	2a 89       	ldd	r18, Y+18	; 0x12
    1ea0:	22 ff       	sbrs	r18, 2
    1ea2:	1c c0       	rjmp	.+56     	; 0x1edc <vfprintf+0x6ac>
    1ea4:	21 ff       	sbrs	r18, 1
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <vfprintf+0x67e>
    1ea8:	88 e5       	ldi	r24, 0x58	; 88
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <vfprintf+0x682>
    1eae:	88 e7       	ldi	r24, 0x78	; 120
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	b7 01       	movw	r22, r14
    1eb4:	0c c0       	rjmp	.+24     	; 0x1ece <vfprintf+0x69e>
    1eb6:	82 2f       	mov	r24, r18
    1eb8:	86 78       	andi	r24, 0x86	; 134
    1eba:	81 f0       	breq	.+32     	; 0x1edc <vfprintf+0x6ac>
    1ebc:	21 fd       	sbrc	r18, 1
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <vfprintf+0x694>
    1ec0:	80 e2       	ldi	r24, 0x20	; 32
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <vfprintf+0x696>
    1ec4:	8b e2       	ldi	r24, 0x2B	; 43
    1ec6:	27 fd       	sbrc	r18, 7
    1ec8:	8d e2       	ldi	r24, 0x2D	; 45
    1eca:	b7 01       	movw	r22, r14
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	3a d1       	rcall	.+628    	; 0x2144 <fputc>
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <vfprintf+0x6ac>
    1ed2:	b7 01       	movw	r22, r14
    1ed4:	80 e3       	ldi	r24, 0x30	; 48
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	35 d1       	rcall	.+618    	; 0x2144 <fputc>
    1eda:	7a 94       	dec	r7
    1edc:	d7 14       	cp	r13, r7
    1ede:	c8 f3       	brcs	.-14     	; 0x1ed2 <vfprintf+0x6a2>
    1ee0:	da 94       	dec	r13
    1ee2:	f4 01       	movw	r30, r8
    1ee4:	ed 0d       	add	r30, r13
    1ee6:	f1 1d       	adc	r31, r1
    1ee8:	b7 01       	movw	r22, r14
    1eea:	80 81       	ld	r24, Z
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	2a d1       	rcall	.+596    	; 0x2144 <fputc>
    1ef0:	d1 10       	cpse	r13, r1
    1ef2:	f6 cf       	rjmp	.-20     	; 0x1ee0 <vfprintf+0x6b0>
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <vfprintf+0x6d0>
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	23 d1       	rcall	.+582    	; 0x2144 <fputc>
    1efe:	6a 94       	dec	r6
    1f00:	61 10       	cpse	r6, r1
    1f02:	f9 cf       	rjmp	.-14     	; 0x1ef6 <vfprintf+0x6c6>
    1f04:	b6 cc       	rjmp	.-1684   	; 0x1872 <vfprintf+0x42>
    1f06:	f7 01       	movw	r30, r14
    1f08:	26 81       	ldd	r18, Z+6	; 0x06
    1f0a:	37 81       	ldd	r19, Z+7	; 0x07
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x6e2>
    1f0e:	2f ef       	ldi	r18, 0xFF	; 255
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	c9 01       	movw	r24, r18
    1f14:	62 96       	adiw	r28, 0x12	; 18
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	ff 90       	pop	r15
    1f24:	ef 90       	pop	r14
    1f26:	df 90       	pop	r13
    1f28:	cf 90       	pop	r12
    1f2a:	bf 90       	pop	r11
    1f2c:	af 90       	pop	r10
    1f2e:	9f 90       	pop	r9
    1f30:	8f 90       	pop	r8
    1f32:	7f 90       	pop	r7
    1f34:	6f 90       	pop	r6
    1f36:	5f 90       	pop	r5
    1f38:	4f 90       	pop	r4
    1f3a:	3f 90       	pop	r3
    1f3c:	2f 90       	pop	r2
    1f3e:	08 95       	ret

00001f40 <__udivmodhi4>:
    1f40:	aa 1b       	sub	r26, r26
    1f42:	bb 1b       	sub	r27, r27
    1f44:	51 e1       	ldi	r21, 0x11	; 17
    1f46:	07 c0       	rjmp	.+14     	; 0x1f56 <__udivmodhi4_ep>

00001f48 <__udivmodhi4_loop>:
    1f48:	aa 1f       	adc	r26, r26
    1f4a:	bb 1f       	adc	r27, r27
    1f4c:	a6 17       	cp	r26, r22
    1f4e:	b7 07       	cpc	r27, r23
    1f50:	10 f0       	brcs	.+4      	; 0x1f56 <__udivmodhi4_ep>
    1f52:	a6 1b       	sub	r26, r22
    1f54:	b7 0b       	sbc	r27, r23

00001f56 <__udivmodhi4_ep>:
    1f56:	88 1f       	adc	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	5a 95       	dec	r21
    1f5c:	a9 f7       	brne	.-22     	; 0x1f48 <__udivmodhi4_loop>
    1f5e:	80 95       	com	r24
    1f60:	90 95       	com	r25
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	08 95       	ret

00001f68 <__ftoa_engine>:
    1f68:	28 30       	cpi	r18, 0x08	; 8
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <__ftoa_engine+0x6>
    1f6c:	27 e0       	ldi	r18, 0x07	; 7
    1f6e:	33 27       	eor	r19, r19
    1f70:	da 01       	movw	r26, r20
    1f72:	99 0f       	add	r25, r25
    1f74:	31 1d       	adc	r19, r1
    1f76:	87 fd       	sbrc	r24, 7
    1f78:	91 60       	ori	r25, 0x01	; 1
    1f7a:	00 96       	adiw	r24, 0x00	; 0
    1f7c:	61 05       	cpc	r22, r1
    1f7e:	71 05       	cpc	r23, r1
    1f80:	39 f4       	brne	.+14     	; 0x1f90 <__ftoa_engine+0x28>
    1f82:	32 60       	ori	r19, 0x02	; 2
    1f84:	2e 5f       	subi	r18, 0xFE	; 254
    1f86:	3d 93       	st	X+, r19
    1f88:	30 e3       	ldi	r19, 0x30	; 48
    1f8a:	2a 95       	dec	r18
    1f8c:	e1 f7       	brne	.-8      	; 0x1f86 <__ftoa_engine+0x1e>
    1f8e:	08 95       	ret
    1f90:	9f 3f       	cpi	r25, 0xFF	; 255
    1f92:	30 f0       	brcs	.+12     	; 0x1fa0 <__ftoa_engine+0x38>
    1f94:	80 38       	cpi	r24, 0x80	; 128
    1f96:	71 05       	cpc	r23, r1
    1f98:	61 05       	cpc	r22, r1
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <__ftoa_engine+0x36>
    1f9c:	3c 5f       	subi	r19, 0xFC	; 252
    1f9e:	3c 5f       	subi	r19, 0xFC	; 252
    1fa0:	3d 93       	st	X+, r19
    1fa2:	91 30       	cpi	r25, 0x01	; 1
    1fa4:	08 f0       	brcs	.+2      	; 0x1fa8 <__ftoa_engine+0x40>
    1fa6:	80 68       	ori	r24, 0x80	; 128
    1fa8:	91 1d       	adc	r25, r1
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	1f 93       	push	r17
    1fb0:	0f 93       	push	r16
    1fb2:	ff 92       	push	r15
    1fb4:	ef 92       	push	r14
    1fb6:	19 2f       	mov	r17, r25
    1fb8:	98 7f       	andi	r25, 0xF8	; 248
    1fba:	96 95       	lsr	r25
    1fbc:	e9 2f       	mov	r30, r25
    1fbe:	96 95       	lsr	r25
    1fc0:	96 95       	lsr	r25
    1fc2:	e9 0f       	add	r30, r25
    1fc4:	ff 27       	eor	r31, r31
    1fc6:	e2 5a       	subi	r30, 0xA2	; 162
    1fc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fca:	99 27       	eor	r25, r25
    1fcc:	33 27       	eor	r19, r19
    1fce:	ee 24       	eor	r14, r14
    1fd0:	ff 24       	eor	r15, r15
    1fd2:	a7 01       	movw	r20, r14
    1fd4:	e7 01       	movw	r28, r14
    1fd6:	05 90       	lpm	r0, Z+
    1fd8:	08 94       	sec
    1fda:	07 94       	ror	r0
    1fdc:	28 f4       	brcc	.+10     	; 0x1fe8 <__ftoa_engine+0x80>
    1fde:	36 0f       	add	r19, r22
    1fe0:	e7 1e       	adc	r14, r23
    1fe2:	f8 1e       	adc	r15, r24
    1fe4:	49 1f       	adc	r20, r25
    1fe6:	51 1d       	adc	r21, r1
    1fe8:	66 0f       	add	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	06 94       	lsr	r0
    1ff2:	a1 f7       	brne	.-24     	; 0x1fdc <__ftoa_engine+0x74>
    1ff4:	05 90       	lpm	r0, Z+
    1ff6:	07 94       	ror	r0
    1ff8:	28 f4       	brcc	.+10     	; 0x2004 <__ftoa_engine+0x9c>
    1ffa:	e7 0e       	add	r14, r23
    1ffc:	f8 1e       	adc	r15, r24
    1ffe:	49 1f       	adc	r20, r25
    2000:	56 1f       	adc	r21, r22
    2002:	c1 1d       	adc	r28, r1
    2004:	77 0f       	add	r23, r23
    2006:	88 1f       	adc	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	66 1f       	adc	r22, r22
    200c:	06 94       	lsr	r0
    200e:	a1 f7       	brne	.-24     	; 0x1ff8 <__ftoa_engine+0x90>
    2010:	05 90       	lpm	r0, Z+
    2012:	07 94       	ror	r0
    2014:	28 f4       	brcc	.+10     	; 0x2020 <__ftoa_engine+0xb8>
    2016:	f8 0e       	add	r15, r24
    2018:	49 1f       	adc	r20, r25
    201a:	56 1f       	adc	r21, r22
    201c:	c7 1f       	adc	r28, r23
    201e:	d1 1d       	adc	r29, r1
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	66 1f       	adc	r22, r22
    2026:	77 1f       	adc	r23, r23
    2028:	06 94       	lsr	r0
    202a:	a1 f7       	brne	.-24     	; 0x2014 <__ftoa_engine+0xac>
    202c:	05 90       	lpm	r0, Z+
    202e:	07 94       	ror	r0
    2030:	20 f4       	brcc	.+8      	; 0x203a <__ftoa_engine+0xd2>
    2032:	49 0f       	add	r20, r25
    2034:	56 1f       	adc	r21, r22
    2036:	c7 1f       	adc	r28, r23
    2038:	d8 1f       	adc	r29, r24
    203a:	99 0f       	add	r25, r25
    203c:	66 1f       	adc	r22, r22
    203e:	77 1f       	adc	r23, r23
    2040:	88 1f       	adc	r24, r24
    2042:	06 94       	lsr	r0
    2044:	a9 f7       	brne	.-22     	; 0x2030 <__ftoa_engine+0xc8>
    2046:	84 91       	lpm	r24, Z
    2048:	10 95       	com	r17
    204a:	17 70       	andi	r17, 0x07	; 7
    204c:	41 f0       	breq	.+16     	; 0x205e <__ftoa_engine+0xf6>
    204e:	d6 95       	lsr	r29
    2050:	c7 95       	ror	r28
    2052:	57 95       	ror	r21
    2054:	47 95       	ror	r20
    2056:	f7 94       	ror	r15
    2058:	e7 94       	ror	r14
    205a:	1a 95       	dec	r17
    205c:	c1 f7       	brne	.-16     	; 0x204e <__ftoa_engine+0xe6>
    205e:	e4 e0       	ldi	r30, 0x04	; 4
    2060:	f2 e0       	ldi	r31, 0x02	; 2
    2062:	68 94       	set
    2064:	15 90       	lpm	r1, Z+
    2066:	15 91       	lpm	r17, Z+
    2068:	35 91       	lpm	r19, Z+
    206a:	65 91       	lpm	r22, Z+
    206c:	95 91       	lpm	r25, Z+
    206e:	05 90       	lpm	r0, Z+
    2070:	7f e2       	ldi	r23, 0x2F	; 47
    2072:	73 95       	inc	r23
    2074:	e1 18       	sub	r14, r1
    2076:	f1 0a       	sbc	r15, r17
    2078:	43 0b       	sbc	r20, r19
    207a:	56 0b       	sbc	r21, r22
    207c:	c9 0b       	sbc	r28, r25
    207e:	d0 09       	sbc	r29, r0
    2080:	c0 f7       	brcc	.-16     	; 0x2072 <__ftoa_engine+0x10a>
    2082:	e1 0c       	add	r14, r1
    2084:	f1 1e       	adc	r15, r17
    2086:	43 1f       	adc	r20, r19
    2088:	56 1f       	adc	r21, r22
    208a:	c9 1f       	adc	r28, r25
    208c:	d0 1d       	adc	r29, r0
    208e:	7e f4       	brtc	.+30     	; 0x20ae <__ftoa_engine+0x146>
    2090:	70 33       	cpi	r23, 0x30	; 48
    2092:	11 f4       	brne	.+4      	; 0x2098 <__ftoa_engine+0x130>
    2094:	8a 95       	dec	r24
    2096:	e6 cf       	rjmp	.-52     	; 0x2064 <__ftoa_engine+0xfc>
    2098:	e8 94       	clt
    209a:	01 50       	subi	r16, 0x01	; 1
    209c:	30 f0       	brcs	.+12     	; 0x20aa <__ftoa_engine+0x142>
    209e:	08 0f       	add	r16, r24
    20a0:	0a f4       	brpl	.+2      	; 0x20a4 <__ftoa_engine+0x13c>
    20a2:	00 27       	eor	r16, r16
    20a4:	02 17       	cp	r16, r18
    20a6:	08 f4       	brcc	.+2      	; 0x20aa <__ftoa_engine+0x142>
    20a8:	20 2f       	mov	r18, r16
    20aa:	23 95       	inc	r18
    20ac:	02 2f       	mov	r16, r18
    20ae:	7a 33       	cpi	r23, 0x3A	; 58
    20b0:	28 f0       	brcs	.+10     	; 0x20bc <__ftoa_engine+0x154>
    20b2:	79 e3       	ldi	r23, 0x39	; 57
    20b4:	7d 93       	st	X+, r23
    20b6:	2a 95       	dec	r18
    20b8:	e9 f7       	brne	.-6      	; 0x20b4 <__ftoa_engine+0x14c>
    20ba:	10 c0       	rjmp	.+32     	; 0x20dc <__ftoa_engine+0x174>
    20bc:	7d 93       	st	X+, r23
    20be:	2a 95       	dec	r18
    20c0:	89 f6       	brne	.-94     	; 0x2064 <__ftoa_engine+0xfc>
    20c2:	06 94       	lsr	r0
    20c4:	97 95       	ror	r25
    20c6:	67 95       	ror	r22
    20c8:	37 95       	ror	r19
    20ca:	17 95       	ror	r17
    20cc:	17 94       	ror	r1
    20ce:	e1 18       	sub	r14, r1
    20d0:	f1 0a       	sbc	r15, r17
    20d2:	43 0b       	sbc	r20, r19
    20d4:	56 0b       	sbc	r21, r22
    20d6:	c9 0b       	sbc	r28, r25
    20d8:	d0 09       	sbc	r29, r0
    20da:	98 f0       	brcs	.+38     	; 0x2102 <__ftoa_engine+0x19a>
    20dc:	23 95       	inc	r18
    20de:	7e 91       	ld	r23, -X
    20e0:	73 95       	inc	r23
    20e2:	7a 33       	cpi	r23, 0x3A	; 58
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <__ftoa_engine+0x180>
    20e6:	70 e3       	ldi	r23, 0x30	; 48
    20e8:	7c 93       	st	X, r23
    20ea:	20 13       	cpse	r18, r16
    20ec:	b8 f7       	brcc	.-18     	; 0x20dc <__ftoa_engine+0x174>
    20ee:	7e 91       	ld	r23, -X
    20f0:	70 61       	ori	r23, 0x10	; 16
    20f2:	7d 93       	st	X+, r23
    20f4:	30 f0       	brcs	.+12     	; 0x2102 <__ftoa_engine+0x19a>
    20f6:	83 95       	inc	r24
    20f8:	71 e3       	ldi	r23, 0x31	; 49
    20fa:	7d 93       	st	X+, r23
    20fc:	70 e3       	ldi	r23, 0x30	; 48
    20fe:	2a 95       	dec	r18
    2100:	e1 f7       	brne	.-8      	; 0x20fa <__ftoa_engine+0x192>
    2102:	11 24       	eor	r1, r1
    2104:	ef 90       	pop	r14
    2106:	ff 90       	pop	r15
    2108:	0f 91       	pop	r16
    210a:	1f 91       	pop	r17
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	99 27       	eor	r25, r25
    2112:	87 fd       	sbrc	r24, 7
    2114:	90 95       	com	r25
    2116:	08 95       	ret

00002118 <strnlen_P>:
    2118:	fc 01       	movw	r30, r24
    211a:	05 90       	lpm	r0, Z+
    211c:	61 50       	subi	r22, 0x01	; 1
    211e:	70 40       	sbci	r23, 0x00	; 0
    2120:	01 10       	cpse	r0, r1
    2122:	d8 f7       	brcc	.-10     	; 0x211a <strnlen_P+0x2>
    2124:	80 95       	com	r24
    2126:	90 95       	com	r25
    2128:	8e 0f       	add	r24, r30
    212a:	9f 1f       	adc	r25, r31
    212c:	08 95       	ret

0000212e <strnlen>:
    212e:	fc 01       	movw	r30, r24
    2130:	61 50       	subi	r22, 0x01	; 1
    2132:	70 40       	sbci	r23, 0x00	; 0
    2134:	01 90       	ld	r0, Z+
    2136:	01 10       	cpse	r0, r1
    2138:	d8 f7       	brcc	.-10     	; 0x2130 <strnlen+0x2>
    213a:	80 95       	com	r24
    213c:	90 95       	com	r25
    213e:	8e 0f       	add	r24, r30
    2140:	9f 1f       	adc	r25, r31
    2142:	08 95       	ret

00002144 <fputc>:
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	8c 01       	movw	r16, r24
    214e:	eb 01       	movw	r28, r22
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	81 fd       	sbrc	r24, 1
    2154:	03 c0       	rjmp	.+6      	; 0x215c <fputc+0x18>
    2156:	0f ef       	ldi	r16, 0xFF	; 255
    2158:	1f ef       	ldi	r17, 0xFF	; 255
    215a:	1a c0       	rjmp	.+52     	; 0x2190 <fputc+0x4c>
    215c:	82 ff       	sbrs	r24, 2
    215e:	0d c0       	rjmp	.+26     	; 0x217a <fputc+0x36>
    2160:	2e 81       	ldd	r18, Y+6	; 0x06
    2162:	3f 81       	ldd	r19, Y+7	; 0x07
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	9d 81       	ldd	r25, Y+5	; 0x05
    2168:	28 17       	cp	r18, r24
    216a:	39 07       	cpc	r19, r25
    216c:	64 f4       	brge	.+24     	; 0x2186 <fputc+0x42>
    216e:	e8 81       	ld	r30, Y
    2170:	f9 81       	ldd	r31, Y+1	; 0x01
    2172:	01 93       	st	Z+, r16
    2174:	e8 83       	st	Y, r30
    2176:	f9 83       	std	Y+1, r31	; 0x01
    2178:	06 c0       	rjmp	.+12     	; 0x2186 <fputc+0x42>
    217a:	e8 85       	ldd	r30, Y+8	; 0x08
    217c:	f9 85       	ldd	r31, Y+9	; 0x09
    217e:	80 2f       	mov	r24, r16
    2180:	19 95       	eicall
    2182:	89 2b       	or	r24, r25
    2184:	41 f7       	brne	.-48     	; 0x2156 <fputc+0x12>
    2186:	8e 81       	ldd	r24, Y+6	; 0x06
    2188:	9f 81       	ldd	r25, Y+7	; 0x07
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	8e 83       	std	Y+6, r24	; 0x06
    218e:	9f 83       	std	Y+7, r25	; 0x07
    2190:	c8 01       	movw	r24, r16
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	08 95       	ret

0000219c <__ultoa_invert>:
    219c:	fa 01       	movw	r30, r20
    219e:	aa 27       	eor	r26, r26
    21a0:	28 30       	cpi	r18, 0x08	; 8
    21a2:	51 f1       	breq	.+84     	; 0x21f8 <__ultoa_invert+0x5c>
    21a4:	20 31       	cpi	r18, 0x10	; 16
    21a6:	81 f1       	breq	.+96     	; 0x2208 <__ultoa_invert+0x6c>
    21a8:	e8 94       	clt
    21aa:	6f 93       	push	r22
    21ac:	6e 7f       	andi	r22, 0xFE	; 254
    21ae:	6e 5f       	subi	r22, 0xFE	; 254
    21b0:	7f 4f       	sbci	r23, 0xFF	; 255
    21b2:	8f 4f       	sbci	r24, 0xFF	; 255
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	af 4f       	sbci	r26, 0xFF	; 255
    21b8:	b1 e0       	ldi	r27, 0x01	; 1
    21ba:	3e d0       	rcall	.+124    	; 0x2238 <__ultoa_invert+0x9c>
    21bc:	b4 e0       	ldi	r27, 0x04	; 4
    21be:	3c d0       	rcall	.+120    	; 0x2238 <__ultoa_invert+0x9c>
    21c0:	67 0f       	add	r22, r23
    21c2:	78 1f       	adc	r23, r24
    21c4:	89 1f       	adc	r24, r25
    21c6:	9a 1f       	adc	r25, r26
    21c8:	a1 1d       	adc	r26, r1
    21ca:	68 0f       	add	r22, r24
    21cc:	79 1f       	adc	r23, r25
    21ce:	8a 1f       	adc	r24, r26
    21d0:	91 1d       	adc	r25, r1
    21d2:	a1 1d       	adc	r26, r1
    21d4:	6a 0f       	add	r22, r26
    21d6:	71 1d       	adc	r23, r1
    21d8:	81 1d       	adc	r24, r1
    21da:	91 1d       	adc	r25, r1
    21dc:	a1 1d       	adc	r26, r1
    21de:	20 d0       	rcall	.+64     	; 0x2220 <__ultoa_invert+0x84>
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <__ultoa_invert+0x48>
    21e2:	68 94       	set
    21e4:	3f 91       	pop	r19
    21e6:	2a e0       	ldi	r18, 0x0A	; 10
    21e8:	26 9f       	mul	r18, r22
    21ea:	11 24       	eor	r1, r1
    21ec:	30 19       	sub	r19, r0
    21ee:	30 5d       	subi	r19, 0xD0	; 208
    21f0:	31 93       	st	Z+, r19
    21f2:	de f6       	brtc	.-74     	; 0x21aa <__ultoa_invert+0xe>
    21f4:	cf 01       	movw	r24, r30
    21f6:	08 95       	ret
    21f8:	46 2f       	mov	r20, r22
    21fa:	47 70       	andi	r20, 0x07	; 7
    21fc:	40 5d       	subi	r20, 0xD0	; 208
    21fe:	41 93       	st	Z+, r20
    2200:	b3 e0       	ldi	r27, 0x03	; 3
    2202:	0f d0       	rcall	.+30     	; 0x2222 <__ultoa_invert+0x86>
    2204:	c9 f7       	brne	.-14     	; 0x21f8 <__ultoa_invert+0x5c>
    2206:	f6 cf       	rjmp	.-20     	; 0x21f4 <__ultoa_invert+0x58>
    2208:	46 2f       	mov	r20, r22
    220a:	4f 70       	andi	r20, 0x0F	; 15
    220c:	40 5d       	subi	r20, 0xD0	; 208
    220e:	4a 33       	cpi	r20, 0x3A	; 58
    2210:	18 f0       	brcs	.+6      	; 0x2218 <__ultoa_invert+0x7c>
    2212:	49 5d       	subi	r20, 0xD9	; 217
    2214:	31 fd       	sbrc	r19, 1
    2216:	40 52       	subi	r20, 0x20	; 32
    2218:	41 93       	st	Z+, r20
    221a:	02 d0       	rcall	.+4      	; 0x2220 <__ultoa_invert+0x84>
    221c:	a9 f7       	brne	.-22     	; 0x2208 <__ultoa_invert+0x6c>
    221e:	ea cf       	rjmp	.-44     	; 0x21f4 <__ultoa_invert+0x58>
    2220:	b4 e0       	ldi	r27, 0x04	; 4
    2222:	a6 95       	lsr	r26
    2224:	97 95       	ror	r25
    2226:	87 95       	ror	r24
    2228:	77 95       	ror	r23
    222a:	67 95       	ror	r22
    222c:	ba 95       	dec	r27
    222e:	c9 f7       	brne	.-14     	; 0x2222 <__ultoa_invert+0x86>
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	61 05       	cpc	r22, r1
    2234:	71 05       	cpc	r23, r1
    2236:	08 95       	ret
    2238:	9b 01       	movw	r18, r22
    223a:	ac 01       	movw	r20, r24
    223c:	0a 2e       	mov	r0, r26
    223e:	06 94       	lsr	r0
    2240:	57 95       	ror	r21
    2242:	47 95       	ror	r20
    2244:	37 95       	ror	r19
    2246:	27 95       	ror	r18
    2248:	ba 95       	dec	r27
    224a:	c9 f7       	brne	.-14     	; 0x223e <__ultoa_invert+0xa2>
    224c:	62 0f       	add	r22, r18
    224e:	73 1f       	adc	r23, r19
    2250:	84 1f       	adc	r24, r20
    2252:	95 1f       	adc	r25, r21
    2254:	a0 1d       	adc	r26, r0
    2256:	08 95       	ret

00002258 <_exit>:
    2258:	f8 94       	cli

0000225a <__stop_program>:
    225a:	ff cf       	rjmp	.-2      	; 0x225a <__stop_program>
