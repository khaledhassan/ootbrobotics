
ServoControlATtiny4313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000be  00800060  00800060  0000064c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000266  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c9  00000000  00000000  00001083  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000363  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001018  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002bc  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000109  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0001a545  00000000  00000000  000031dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000155  00000000  00000000  0001d722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	d8 c1       	rjmp	.+944    	; 0x3ba <__vector_4>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	11 e0       	ldi	r17, 0x01	; 1
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	ae 31       	cpi	r26, 0x1E	; 30
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	86 d2       	rcall	.+1292   	; 0x554 <main>
  48:	c5 c2       	rjmp	.+1418   	; 0x5d4 <_exit>

0000004a <__bad_interrupt>:
  4a:	ac c1       	rjmp	.+856    	; 0x3a4 <__vector_default>

0000004c <setMasks>:
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  4c:	cf 93       	push	r28
  4e:	df 93       	push	r29
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  50:	e7 e9       	ldi	r30, 0x97	; 151
  52:	f0 e0       	ldi	r31, 0x00	; 0
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  58:	21 e0       	ldi	r18, 0x01	; 1
  5a:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
  5c:	6f ef       	ldi	r22, 0xFF	; 255
#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  5e:	a9 01       	movw	r20, r18
  60:	08 2e       	mov	r0, r24
  62:	02 c0       	rjmp	.+4      	; 0x68 <setMasks+0x1c>
  64:	44 0f       	add	r20, r20
  66:	55 1f       	adc	r21, r21
  68:	0a 94       	dec	r0
  6a:	e2 f7       	brpl	.-8      	; 0x64 <setMasks+0x18>
  6c:	40 95       	com	r20
  6e:	40 83       	st	Z, r20
			servos.bus[i].masks[1] = 0xFF;
  70:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i].masks[2] = 0xFF;
  72:	62 83       	std	Z+2, r22	; 0x02
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	33 96       	adiw	r30, 0x03	; 3

#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
  78:	88 30       	cpi	r24, 0x08	; 8
  7a:	91 05       	cpc	r25, r1
  7c:	81 f7       	brne	.-32     	; 0x5e <setMasks+0x12>
  7e:	ef ea       	ldi	r30, 0xAF	; 175
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  86:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+8].masks[1] = ~(1<<i);
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  8c:	60 83       	st	Z, r22
			servos.bus[i+8].masks[1] = ~(1<<i);
  8e:	a9 01       	movw	r20, r18
  90:	08 2e       	mov	r0, r24
  92:	02 c0       	rjmp	.+4      	; 0x98 <setMasks+0x4c>
  94:	44 0f       	add	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <setMasks+0x48>
  9c:	40 95       	com	r20
  9e:	41 83       	std	Z+1, r20	; 0x01
			servos.bus[i+8].masks[2] = 0xFF;
  a0:	62 83       	std	Z+2, r22	; 0x02
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i].masks[0] = ~(1<<i);
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	91 05       	cpc	r25, r1
  aa:	81 f7       	brne	.-32     	; 0x8c <setMasks+0x40>
  ac:	e7 ec       	ldi	r30, 0xC7	; 199
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  b4:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  ba:	60 83       	st	Z, r22
			servos.bus[i+16].masks[1] = 0xFF;
  bc:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i+16].masks[2] = ~(1<<i);
  be:	a9 01       	movw	r20, r18
  c0:	08 2e       	mov	r0, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <setMasks+0x7c>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <setMasks+0x78>
  cc:	40 95       	com	r20
  ce:	42 83       	std	Z+2, r20	; 0x02
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i+8].masks[1] = ~(1<<i);
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	91 05       	cpc	r25, r1
  d8:	81 f7       	brne	.-32     	; 0xba <setMasks+0x6e>
			servos.bus[i+16].masks[0] = 0xFF;
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
		}
		servos.tempBus.masks[0] = 0x0;
  da:	10 92 df 00 	sts	0x00DF, r1
		servos.tempBus.masks[1] = 0x0;
  de:	10 92 e0 00 	sts	0x00E0, r1
		servos.tempBus.masks[2] = 0x0;
  e2:	10 92 e1 00 	sts	0x00E1, r1
		
		mainBus[0] = 0xFF;
  e6:	60 93 15 01 	sts	0x0115, r22
		mainBus[1] = 0xFF;
  ea:	60 93 16 01 	sts	0x0116, r22
		mainBus[2] = 0xFF;
  ee:	60 93 17 01 	sts	0x0117, r22
  f2:	27 e9       	ldi	r18, 0x97	; 151
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
				servos.bus[i] = servos.tempBus;
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	50 e0       	ldi	r21, 0x00	; 0
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  fe:	e8 2f       	mov	r30, r24
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
 100:	dc 01       	movw	r26, r24
 102:	aa 0f       	add	r26, r26
 104:	bb 1f       	adc	r27, r27
 106:	ae 51       	subi	r26, 0x1E	; 30
 108:	bf 4f       	sbci	r27, 0xFF	; 255
 10a:	6d 91       	ld	r22, X+
 10c:	7c 91       	ld	r23, X
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	61 15       	cp	r22, r1
 112:	71 05       	cpc	r23, r1
 114:	e1 f4       	brne	.+56     	; 0x14e <setMasks+0x102>
				servos.bus[i] = servos.tempBus;
 116:	e9 01       	movw	r28, r18
 118:	af ed       	ldi	r26, 0xDF	; 223
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	0d 90       	ld	r0, X+
 120:	09 92       	st	Y+, r0
 122:	61 50       	subi	r22, 0x01	; 1
 124:	e1 f7       	brne	.-8      	; 0x11e <setMasks+0xd2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
 126:	e6 95       	lsr	r30
 128:	e6 95       	lsr	r30
 12a:	e6 95       	lsr	r30
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	eb 5e       	subi	r30, 0xEB	; 235
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	bc 01       	movw	r22, r24
 134:	67 70       	andi	r22, 0x07	; 7
 136:	70 70       	andi	r23, 0x00	; 0
 138:	da 01       	movw	r26, r20
 13a:	02 c0       	rjmp	.+4      	; 0x140 <setMasks+0xf4>
 13c:	aa 0f       	add	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <setMasks+0xf0>
 144:	bd 01       	movw	r22, r26
 146:	60 95       	com	r22
 148:	70 81       	ld	r23, Z
 14a:	67 23       	and	r22, r23
 14c:	60 83       	st	Z, r22
			}
			asm("nop");				
 14e:	00 00       	nop
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	2d 5f       	subi	r18, 0xFD	; 253
 154:	3f 4f       	sbci	r19, 0xFF	; 255
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
		
		for(i=0;i<24;i++){ 
 156:	88 31       	cpi	r24, 0x18	; 24
 158:	91 05       	cpc	r25, r1
 15a:	89 f6       	brne	.-94     	; 0xfe <setMasks+0xb2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
			}
			asm("nop");				
		}	
			
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <refresh>:

void refresh(void){
 162:	a4 e6       	ldi	r26, 0x64	; 100
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	//refresh all the servos
	for(i=0;i<24;i++)servos.times[i].timerVal = servoBuffer[i].timerVal;
 16a:	2d 91       	ld	r18, X+
 16c:	3d 91       	ld	r19, X+
 16e:	fc 01       	movw	r30, r24
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ee 51       	subi	r30, 0x1E	; 30
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	31 83       	std	Z+1, r19	; 0x01
 17a:	20 83       	st	Z, r18
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	91 05       	cpc	r25, r1
 182:	99 f7       	brne	.-26     	; 0x16a <refresh+0x8>
	
	//initialize all the pointers
	servoBusPtr = &servos.bus[0].masks[0];
 184:	87 e9       	ldi	r24, 0x97	; 151
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 63 00 	sts	0x0063, r25
 18c:	80 93 62 00 	sts	0x0062, r24
	servoTimePtr = &servos.times[0].timerVal;
 190:	82 ee       	ldi	r24, 0xE2	; 226
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 19 01 	sts	0x0119, r25
 198:	80 93 18 01 	sts	0x0118, r24
}
 19c:	08 95       	ret

0000019e <seedValues>:
  
void seedValues(void){
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  //normally 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ee 51       	subi	r30, 0x1E	; 30
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	11 82       	std	Z+1, r1	; 0x01
 1ae:	10 82       	st	Z, r1
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	88 31       	cpi	r24, 0x18	; 24
 1b4:	91 05       	cpc	r25, r1
 1b6:	a9 f7       	brne	.-22     	; 0x1a2 <seedValues+0x4>
 1b8:	e4 e6       	ldi	r30, 0x64	; 100
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 0;  //normally 0	
 1bc:	11 82       	std	Z+1, r1	; 0x01
 1be:	10 82       	st	Z, r1
 1c0:	34 96       	adiw	r30, 0x04	; 4
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	e4 39       	cpi	r30, 0x94	; 148
 1c6:	f8 07       	cpc	r31, r24
 1c8:	c9 f7       	brne	.-14     	; 0x1bc <seedValues+0x1e>
}	
 1ca:	08 95       	ret

000001cc <sort>:
 
void sort(void){
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	52 c0       	rjmp	.+164    	; 0x27e <sort+0xb2>
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 1da:	ab 01       	movw	r20, r22
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  //normally 0
	
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 0;  //normally 0	
}	
 
void sort(void){
 1dc:	ba 01       	movw	r22, r20
 1de:	6f 5f       	subi	r22, 0xFF	; 255
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
 1e2:	db 01       	movw	r26, r22
 1e4:	aa 0f       	add	r26, r26
 1e6:	bb 1f       	adc	r27, r27
 1e8:	ae 51       	subi	r26, 0x1E	; 30
 1ea:	bf 4f       	sbci	r27, 0xFF	; 255
 1ec:	cd 91       	ld	r28, X+
 1ee:	dc 91       	ld	r29, X
 1f0:	da 01       	movw	r26, r20
 1f2:	aa 0f       	add	r26, r26
 1f4:	bb 1f       	adc	r27, r27
 1f6:	ae 51       	subi	r26, 0x1E	; 30
 1f8:	bf 4f       	sbci	r27, 0xFF	; 255
 1fa:	4d 91       	ld	r20, X+
 1fc:	5c 91       	ld	r21, X
 1fe:	11 97       	sbiw	r26, 0x01	; 1
 200:	c4 17       	cp	r28, r20
 202:	d5 07       	cpc	r29, r21
 204:	90 f5       	brcc	.+100    	; 0x26a <sort+0x9e>
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  //normally 0
	
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 0;  //normally 0	
}	
 
void sort(void){
 206:	7c 01       	movw	r14, r24
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
 208:	cf ed       	ldi	r28, 0xDF	; 223
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	48 2f       	mov	r20, r24
 20e:	59 2f       	mov	r21, r25
 210:	da 01       	movw	r26, r20
 212:	43 e0       	ldi	r20, 0x03	; 3
 214:	0d 90       	ld	r0, X+
 216:	09 92       	st	Y+, r0
 218:	41 50       	subi	r20, 0x01	; 1
 21a:	e1 f7       	brne	.-8      	; 0x214 <sort+0x48>
				servos.tempTimes = servos.times[i];
 21c:	42 81       	ldd	r20, Z+2	; 0x02
 21e:	53 81       	ldd	r21, Z+3	; 0x03
 220:	50 93 13 01 	sts	0x0113, r21
 224:	40 93 12 01 	sts	0x0112, r20
				
				servos.times[i] = servos.times[i-1];
 228:	40 81       	ld	r20, Z
 22a:	51 81       	ldd	r21, Z+1	; 0x01
 22c:	53 83       	std	Z+3, r21	; 0x03
 22e:	42 83       	std	Z+2, r20	; 0x02
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  //normally 0
	
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 0;  //normally 0	
}	
 
void sort(void){
 230:	89 01       	movw	r16, r18
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
				servos.tempTimes = servos.times[i];
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
 232:	4e 2d       	mov	r20, r14
 234:	5f 2d       	mov	r21, r15
 236:	ea 01       	movw	r28, r20
 238:	42 2f       	mov	r20, r18
 23a:	53 2f       	mov	r21, r19
 23c:	da 01       	movw	r26, r20
 23e:	43 e0       	ldi	r20, 0x03	; 3
 240:	0d 90       	ld	r0, X+
 242:	09 92       	st	Y+, r0
 244:	41 50       	subi	r20, 0x01	; 1
 246:	e1 f7       	brne	.-8      	; 0x240 <sort+0x74>
			
				servos.times[i-1] = servos.tempTimes;
 248:	40 91 12 01 	lds	r20, 0x0112
 24c:	50 91 13 01 	lds	r21, 0x0113
 250:	51 83       	std	Z+1, r21	; 0x01
 252:	40 83       	st	Z, r20
				servos.bus[i-1] = servos.tempBus;
 254:	40 2f       	mov	r20, r16
 256:	51 2f       	mov	r21, r17
 258:	ea 01       	movw	r28, r20
 25a:	af ed       	ldi	r26, 0xDF	; 223
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	43 e0       	ldi	r20, 0x03	; 3
 260:	0d 90       	ld	r0, X+
 262:	09 92       	st	Y+, r0
 264:	41 50       	subi	r20, 0x01	; 1
 266:	e1 f7       	brne	.-8      	; 0x260 <sort+0x94>
			
				ErrorFound = 1;	
 268:	11 e0       	ldi	r17, 0x01	; 1
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
			
				servos.times[i-1] = servos.tempTimes;
				servos.bus[i-1] = servos.tempBus;
 26a:	03 96       	adiw	r24, 0x03	; 3
 26c:	2d 5f       	subi	r18, 0xFD	; 253
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	32 96       	adiw	r30, 0x02	; 2
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 272:	67 31       	cpi	r22, 0x17	; 23
 274:	71 05       	cpc	r23, r1
 276:	09 f0       	breq	.+2      	; 0x27a <sort+0xae>
 278:	b0 cf       	rjmp	.-160    	; 0x1da <sort+0xe>
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 0;  //normally 0	
}	
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
 27a:	11 23       	and	r17, r17
 27c:	59 f0       	breq	.+22     	; 0x294 <sort+0xc8>
 27e:	8a e9       	ldi	r24, 0x9A	; 154
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	9c 01       	movw	r18, r24
 284:	23 50       	subi	r18, 0x03	; 3
 286:	30 40       	sbci	r19, 0x00	; 0
 288:	e2 ee       	ldi	r30, 0xE2	; 226
 28a:	f0 e0       	ldi	r31, 0x00	; 0
		ErrorFound = 0;
		for(i=1;i<24;i++){
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	a4 cf       	rjmp	.-184    	; 0x1dc <sort+0x10>
			
				ErrorFound = 1;	
			}				
		}
	}
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	08 95       	ret

000002a2 <postSortMask>:

void postSortMask(void){
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 e0       	ldi	r16, 0x00	; 0
 2ac:	10 e0       	ldi	r17, 0x00	; 0
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	e0 e0       	ldi	r30, 0x00	; 0
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	1e c0       	rjmp	.+60     	; 0x2f4 <postSortMask+0x52>
 2b8:	ae 01       	movw	r20, r28
 2ba:	42 0f       	add	r20, r18
 2bc:	53 1f       	adc	r21, r19
 2be:	40 0f       	add	r20, r16
 2c0:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2c2:	da 01       	movw	r26, r20
 2c4:	13 96       	adiw	r26, 0x03	; 3
 2c6:	7c 91       	ld	r23, X
 2c8:	69 91       	ld	r22, Y+
			}				
		}
	}
}

void postSortMask(void){
 2ca:	ae 01       	movw	r20, r28
 2cc:	42 0f       	add	r20, r18
 2ce:	53 1f       	adc	r21, r19
 2d0:	40 0f       	add	r20, r16
 2d2:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2d4:	67 23       	and	r22, r23
 2d6:	da 01       	movw	r26, r20
 2d8:	12 96       	adiw	r26, 0x02	; 2
 2da:	6c 93       	st	X, r22
 2dc:	12 97       	sbiw	r26, 0x02	; 2
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
 2de:	c8 17       	cp	r28, r24
 2e0:	d9 07       	cpc	r29, r25
 2e2:	51 f7       	brne	.-44     	; 0x2b8 <postSortMask+0x16>
 2e4:	31 96       	adiw	r30, 0x01	; 1
 2e6:	23 50       	subi	r18, 0x03	; 3
 2e8:	30 40       	sbci	r19, 0x00	; 0
 2ea:	0d 5f       	subi	r16, 0xFD	; 253
 2ec:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
 2ee:	e7 31       	cpi	r30, 0x17	; 23
 2f0:	f1 05       	cpc	r31, r1
 2f2:	71 f0       	breq	.+28     	; 0x310 <postSortMask+0x6e>
			}				
		}
	}
}

void postSortMask(void){
 2f4:	cf 01       	movw	r24, r30
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	5a d1       	rcall	.+692    	; 0x5b0 <__mulhi3>
 2fc:	ec 01       	movw	r28, r24
 2fe:	c9 56       	subi	r28, 0x69	; 105
 300:	df 4f       	sbci	r29, 0xFF	; 255
 302:	88 27       	eor	r24, r24
 304:	99 27       	eor	r25, r25
 306:	82 1b       	sub	r24, r18
 308:	93 0b       	sbc	r25, r19
	uint8_t i,j;
	for(i=0;i<23;i++){
 30a:	86 56       	subi	r24, 0x66	; 102
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	d4 cf       	rjmp	.-88     	; 0x2b8 <postSortMask+0x16>
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
			//servos.bus[i+1].masks[j] &= mainBus[j];
		}			
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <mulitpleServoTimeFix>:



//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
 31a:	1f 93       	push	r17
static uint8_t i;
	servos.tempBus = servos.bus[23];
 31c:	ef ed       	ldi	r30, 0xDF	; 223
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	df 01       	movw	r26, r30
 322:	13 97       	sbiw	r26, 0x03	; 3
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0d 90       	ld	r0, X+
 328:	01 92       	st	Z+, r0
 32a:	81 50       	subi	r24, 0x01	; 1
 32c:	e1 f7       	brne	.-8      	; 0x326 <mulitpleServoTimeFix+0xc>
	for(i=23;i>0;i--){
 32e:	87 e1       	ldi	r24, 0x17	; 23
 330:	80 93 60 00 	sts	0x0060, r24
 334:	2c c0       	rjmp	.+88     	; 0x38e <mulitpleServoTimeFix+0x74>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
 336:	21 2f       	mov	r18, r17
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	c9 01       	movw	r24, r18
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	fc 01       	movw	r30, r24
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	ee 51       	subi	r30, 0x1E	; 30
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	60 81       	ld	r22, Z
 34a:	71 81       	ldd	r23, Z+1	; 0x01
 34c:	f9 01       	movw	r30, r18
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	ee 51       	subi	r30, 0x1E	; 30
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	40 81       	ld	r20, Z
 358:	51 81       	ldd	r21, Z+1	; 0x01
 35a:	64 17       	cp	r22, r20
 35c:	75 07       	cpc	r23, r21
 35e:	a1 f4       	brne	.+40     	; 0x388 <mulitpleServoTimeFix+0x6e>
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
 360:	11 82       	std	Z+1, r1	; 0x01
 362:	10 82       	st	Z, r1
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	23 d1       	rcall	.+582    	; 0x5b0 <__mulhi3>
 36a:	fc 01       	movw	r30, r24
 36c:	e9 56       	subi	r30, 0x69	; 105
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	c9 01       	movw	r24, r18
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	1c d1       	rcall	.+568    	; 0x5b0 <__mulhi3>
 378:	dc 01       	movw	r26, r24
 37a:	a9 56       	subi	r26, 0x69	; 105
 37c:	bf 4f       	sbci	r27, 0xFF	; 255
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	0d 90       	ld	r0, X+
 382:	01 92       	st	Z+, r0
 384:	81 50       	subi	r24, 0x01	; 1
 386:	e1 f7       	brne	.-8      	; 0x380 <mulitpleServoTimeFix+0x66>

//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
static uint8_t i;
	servos.tempBus = servos.bus[23];
	for(i=23;i>0;i--){
 388:	11 50       	subi	r17, 0x01	; 1
 38a:	10 93 60 00 	sts	0x0060, r17
 38e:	10 91 60 00 	lds	r17, 0x0060
 392:	11 23       	and	r17, r17
 394:	81 f6       	brne	.-96     	; 0x336 <mulitpleServoTimeFix+0x1c>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
		}			
	}
}	
 396:	1f 91       	pop	r17
 398:	08 95       	ret

0000039a <servoDataIRQ>:


void servoDataIRQ()
{
//if(bytesInBuffer < (bufferSize -2)) 
PORTD ^= 0x02;//this will trigger a PCINT on the xmega
 39a:	82 b3       	in	r24, 0x12	; 18
 39c:	92 e0       	ldi	r25, 0x02	; 2
 39e:	89 27       	eor	r24, r25
 3a0:	82 bb       	out	0x12, r24	; 18
 3a2:	08 95       	ret

000003a4 <__vector_default>:
		}
		asm("nop");
    }
}

ISR(BADISR_vect){
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
	asm("nop");
 3ae:	00 00       	nop
}
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <__vector_4>:

ISR(TIMER1_COMPA_vect){
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
	cli();
 3c8:	f8 94       	cli
	if(servosEnabled){
 3ca:	80 91 61 00 	lds	r24, 0x0061
 3ce:	88 23       	and	r24, r24
 3d0:	a9 f0       	breq	.+42     	; 0x3fc <__vector_4+0x42>
		PORTB =	mainBus[0]; 
 3d2:	80 91 15 01 	lds	r24, 0x0115
 3d6:	88 bb       	out	0x18, r24	; 24
		PORTD +=DECODE0;	     
 3d8:	82 b3       	in	r24, 0x12	; 18
 3da:	80 5f       	subi	r24, 0xF0	; 240
 3dc:	82 bb       	out	0x12, r24	; 18
		PORTB =	mainBus[1]; 
 3de:	80 91 16 01 	lds	r24, 0x0116
 3e2:	88 bb       	out	0x18, r24	; 24
		PORTD +=DECODE0;			
 3e4:	82 b3       	in	r24, 0x12	; 18
 3e6:	80 5f       	subi	r24, 0xF0	; 240
 3e8:	82 bb       	out	0x12, r24	; 18
		PORTB =	mainBus[2];		
 3ea:	80 91 17 01 	lds	r24, 0x0117
 3ee:	88 bb       	out	0x18, r24	; 24
		PORTD +=DECODE1;		
 3f0:	82 b3       	in	r24, 0x12	; 18
 3f2:	80 5e       	subi	r24, 0xE0	; 224
 3f4:	82 bb       	out	0x12, r24	; 18
		PORTD &= 0x0F;
 3f6:	82 b3       	in	r24, 0x12	; 18
 3f8:	8f 70       	andi	r24, 0x0F	; 15
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__vector_4+0x48>
	}
	else	PORTD ^=DBLED;
 3fc:	82 b3       	in	r24, 0x12	; 18
 3fe:	94 e0       	ldi	r25, 0x04	; 4
 400:	89 27       	eor	r24, r25
 402:	82 bb       	out	0x12, r24	; 18
	sei();
 404:	78 94       	sei
}
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <initializations>:

void initializations(void){
	DDRB = 0xFF;//disable all port B pins (servo pins as Outputs) for the case of wdt resets
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE;//enables every pin except the uart receive pin as an output
 418:	8e ef       	ldi	r24, 0xFE	; 254
 41a:	81 bb       	out	0x11, r24	; 17
	PORTB = 0;
 41c:	18 ba       	out	0x18, r1	; 24
	PORTD |= DECODE0 | DECODE1 | DECODE2;
 41e:	82 b3       	in	r24, 0x12	; 18
 420:	80 67       	ori	r24, 0x70	; 112
 422:	82 bb       	out	0x12, r24	; 18
	PORTD &= 0x0F;
 424:	82 b3       	in	r24, 0x12	; 18
 426:	8f 70       	andi	r24, 0x0F	; 15
 428:	82 bb       	out	0x12, r24	; 18
	uartInit();
 42a:	bd d0       	rcall	.+378    	; 0x5a6 <uartInit>
	refresh();
 42c:	9a de       	rcall	.-716    	; 0x162 <refresh>
	setMasks();
 42e:	0e de       	rcall	.-996    	; 0x4c <setMasks>
	seedValues();
 430:	b6 de       	rcall	.-660    	; 0x19e <seedValues>
	sort();
 432:	cc de       	rcall	.-616    	; 0x1cc <sort>
	postSortMask();
 434:	36 df       	rcall	.-404    	; 0x2a2 <postSortMask>
	mulitpleServoTimeFix();
 436:	71 df       	rcall	.-286    	; 0x31a <mulitpleServoTimeFix>
	timer1Init();
 438:	aa d0       	rcall	.+340    	; 0x58e <timer1Init>
	sei();
 43a:	78 94       	sei
}
 43c:	08 95       	ret

0000043e <servoSignalLoop>:

void servoSignalLoop(void){
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
	do 
		{
			if(TCNT1>(uint16_t)*servoTimePtr){		
 442:	2c b5       	in	r18, 0x2c	; 44
 444:	3d b5       	in	r19, 0x2d	; 45
 446:	a0 91 18 01 	lds	r26, 0x0118
 44a:	b0 91 19 01 	lds	r27, 0x0119
 44e:	8d 91       	ld	r24, X+
 450:	9c 91       	ld	r25, X
 452:	11 97       	sbiw	r26, 0x01	; 1
 454:	82 17       	cp	r24, r18
 456:	93 07       	cpc	r25, r19
 458:	d8 f5       	brcc	.+118    	; 0x4d0 <servoSignalLoop+0x92>
				if((uint16_t)*servoTimePtr != 0 && servosEnabled){
 45a:	00 97       	sbiw	r24, 0x00	; 0
 45c:	59 f1       	breq	.+86     	; 0x4b4 <servoSignalLoop+0x76>
 45e:	80 91 61 00 	lds	r24, 0x0061
 462:	88 23       	and	r24, r24
 464:	39 f1       	breq	.+78     	; 0x4b4 <servoSignalLoop+0x76>
					PORTB =	*servoBusPtr++; 
 466:	c0 91 62 00 	lds	r28, 0x0062
 46a:	d0 91 63 00 	lds	r29, 0x0063
 46e:	fe 01       	movw	r30, r28
 470:	81 91       	ld	r24, Z+
 472:	88 bb       	out	0x18, r24	; 24
 474:	f0 93 63 00 	sts	0x0063, r31
 478:	e0 93 62 00 	sts	0x0062, r30
					PORTD +=DECODE0;	     
 47c:	82 b3       	in	r24, 0x12	; 18
 47e:	80 5f       	subi	r24, 0xF0	; 240
 480:	82 bb       	out	0x12, r24	; 18
					PORTB =	*servoBusPtr++; 
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	88 bb       	out	0x18, r24	; 24
 486:	cf 01       	movw	r24, r30
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	90 93 63 00 	sts	0x0063, r25
 48e:	80 93 62 00 	sts	0x0062, r24
					PORTD +=DECODE0;			
 492:	22 b3       	in	r18, 0x12	; 18
 494:	20 5f       	subi	r18, 0xF0	; 240
 496:	22 bb       	out	0x12, r18	; 18
					PORTB =	*servoBusPtr++;		
 498:	21 81       	ldd	r18, Z+1	; 0x01
 49a:	28 bb       	out	0x18, r18	; 24
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	90 93 63 00 	sts	0x0063, r25
 4a2:	80 93 62 00 	sts	0x0062, r24
					PORTD +=DECODE1;		
 4a6:	82 b3       	in	r24, 0x12	; 18
 4a8:	80 5e       	subi	r24, 0xE0	; 224
 4aa:	82 bb       	out	0x12, r24	; 18
					PORTD &= 0x0F;
 4ac:	82 b3       	in	r24, 0x12	; 18
 4ae:	8f 70       	andi	r24, 0x0F	; 15
 4b0:	82 bb       	out	0x12, r24	; 18
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <servoSignalLoop+0x88>
					servoTimePtr++;
				}				
				else{
					servoBusPtr += 3;
 4b4:	80 91 62 00 	lds	r24, 0x0062
 4b8:	90 91 63 00 	lds	r25, 0x0063
 4bc:	03 96       	adiw	r24, 0x03	; 3
 4be:	90 93 63 00 	sts	0x0063, r25
 4c2:	80 93 62 00 	sts	0x0062, r24
					servoTimePtr++;
 4c6:	12 96       	adiw	r26, 0x02	; 2
 4c8:	b0 93 19 01 	sts	0x0119, r27
 4cc:	a0 93 18 01 	sts	0x0118, r26
				}
			}					
		} while (servoTimePtr <= servoTimesEnd); 
 4d0:	80 91 18 01 	lds	r24, 0x0118
 4d4:	90 91 19 01 	lds	r25, 0x0119
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	80 31       	cpi	r24, 0x10	; 16
 4dc:	92 07       	cpc	r25, r18
 4de:	09 f0       	breq	.+2      	; 0x4e2 <servoSignalLoop+0xa4>
 4e0:	08 f4       	brcc	.+2      	; 0x4e4 <servoSignalLoop+0xa6>
 4e2:	af cf       	rjmp	.-162    	; 0x442 <servoSignalLoop+0x4>
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <processingForNextLoop>:

void processingForNextLoop(void)
{
	refresh();
 4ea:	3b de       	rcall	.-906    	; 0x162 <refresh>
	setMasks();
 4ec:	af dd       	rcall	.-1186   	; 0x4c <setMasks>
	sort();
 4ee:	6e de       	rcall	.-804    	; 0x1cc <sort>
	postSortMask();
 4f0:	d8 de       	rcall	.-592    	; 0x2a2 <postSortMask>
	mulitpleServoTimeFix();
 4f2:	13 df       	rcall	.-474    	; 0x31a <mulitpleServoTimeFix>
}
 4f4:	08 95       	ret

000004f6 <testArray>:


inline testArray(void){
	if(buffer[0] < 50 ){
 4f6:	e0 91 1a 01 	lds	r30, 0x011A
 4fa:	e2 33       	cpi	r30, 0x32	; 50
 4fc:	d0 f4       	brcc	.+52     	; 0x532 <testArray+0x3c>
		if(buffer[3] == (0x80 | buffer[0]) )
 4fe:	8e 2f       	mov	r24, r30
 500:	80 68       	ori	r24, 0x80	; 128
 502:	90 91 1d 01 	lds	r25, 0x011D
 506:	98 17       	cp	r25, r24
 508:	a1 f4       	brne	.+40     	; 0x532 <testArray+0x3c>
		{
			servoBuffer[buffer[0]].timerVal = (buffer[1])<<8 | buffer[2] ;	
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	ec 59       	subi	r30, 0x9C	; 156
 512:	ff 4f       	sbci	r31, 0xFF	; 255
 514:	30 91 1b 01 	lds	r19, 0x011B
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	80 91 1c 01 	lds	r24, 0x011C
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	82 2b       	or	r24, r18
 522:	93 2b       	or	r25, r19
 524:	91 83       	std	Z+1, r25	; 0x01
 526:	80 83       	st	Z, r24
				wdt_reset();
 528:	a8 95       	wdr
				PORTD |= DBLED;
 52a:	92 9a       	sbi	0x12, 2	; 18
				servosEnabled = true;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 61 00 	sts	0x0061, r24
		}
	}
}
 532:	08 95       	ret

00000534 <repopulateArray>:

inline repopulateArray(void){
	uint8_t i;
	for(i=0;i<3;i++) buffer[i] = buffer[i+1];
 534:	80 91 1b 01 	lds	r24, 0x011B
 538:	80 93 1a 01 	sts	0x011A, r24
 53c:	80 91 1c 01 	lds	r24, 0x011C
 540:	80 93 1b 01 	sts	0x011B, r24
 544:	80 91 1d 01 	lds	r24, 0x011D
 548:	80 93 1c 01 	sts	0x011C, r24
	buffer[3] = UDR;
 54c:	8c b1       	in	r24, 0x0c	; 12
 54e:	80 93 1d 01 	sts	0x011D, r24
 552:	08 95       	ret

00000554 <main>:
uint8_t buffer[4];
bool servosEnabled = false;

int main(void)
{
	wdt_enable(WDTO_500MS);	
 554:	2d e0       	ldi	r18, 0x0D	; 13
 556:	88 e1       	ldi	r24, 0x18	; 24
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	a8 95       	wdr
 560:	81 bd       	out	0x21, r24	; 33
 562:	0f be       	out	0x3f, r0	; 63
 564:	21 bd       	out	0x21, r18	; 33
	servosEnabled = false;
 566:	10 92 61 00 	sts	0x0061, r1
	initializations();
 56a:	54 df       	rcall	.-344    	; 0x414 <initializations>
	PORTD &= ~DBLED;
 56c:	92 98       	cbi	0x12, 2	; 18
	while(1)
    {
		
		servoSignalLoop();			//sends all the servo signals 
 56e:	67 df       	rcall	.-306    	; 0x43e <servoSignalLoop>
		
		processingForNextLoop();	//processes the current servoBuffer Values
 570:	bc df       	rcall	.-136    	; 0x4ea <processingForNextLoop>
 572:	04 c0       	rjmp	.+8      	; 0x57c <main+0x28>
		servoDataIRQ();				//sends an interrupt request to the Xmega	
		
				
		while(TCNT1>500)
		{		
			testArray();
 574:	c0 df       	rcall	.-128    	; 0x4f6 <testArray>
			if(newDataExists()){
 576:	5f 9b       	sbis	0x0b, 7	; 11
 578:	02 c0       	rjmp	.+4      	; 0x57e <main+0x2a>
				repopulateArray();
 57a:	dc df       	rcall	.-72     	; 0x534 <repopulateArray>
				servoDataIRQ();
 57c:	0e df       	rcall	.-484    	; 0x39a <servoDataIRQ>
		processingForNextLoop();	//processes the current servoBuffer Values
		
		servoDataIRQ();				//sends an interrupt request to the Xmega	
		
				
		while(TCNT1>500)
 57e:	8c b5       	in	r24, 0x2c	; 44
 580:	9d b5       	in	r25, 0x2d	; 45
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	85 3f       	cpi	r24, 0xF5	; 245
 586:	92 07       	cpc	r25, r18
 588:	a8 f7       	brcc	.-22     	; 0x574 <main+0x20>
				repopulateArray();
				servoDataIRQ();
			}
			
		}
		asm("nop");
 58a:	00 00       	nop
    }
 58c:	f0 cf       	rjmp	.-32     	; 0x56e <main+0x1a>

0000058e <timer1Init>:
 */ 
#include "Timer.h"


void timer1Init(void){
	TCCR1A = 0;
 58e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x1A; //sets ICR1 as top val reg and sets the prescaler to div8 enables ctc for immediate updates to ocr1x
 590:	8a e1       	ldi	r24, 0x1A	; 26
 592:	8e bd       	out	0x2e, r24	; 46
	TIMSK = _BV(OCIE1A);
 594:	80 e4       	ldi	r24, 0x40	; 64
 596:	89 bf       	out	0x39, r24	; 57
	ICR1 = 	(F_CPU/(50*8)); //1 timer clock equals 1us period of 20ms ie 20000us	
 598:	80 e3       	ldi	r24, 0x30	; 48
 59a:	95 e7       	ldi	r25, 0x75	; 117
 59c:	95 bd       	out	0x25, r25	; 37
 59e:	84 bd       	out	0x24, r24	; 36
	OCR1A = (F_CPU/(50*8));
 5a0:	9b bd       	out	0x2b, r25	; 43
 5a2:	8a bd       	out	0x2a, r24	; 42
 5a4:	08 95       	ret

000005a6 <uartInit>:

#include "uart.h"

void uartInit(void){

UBRRH = 0;//5 = 125000, 12 = 57600
 5a6:	12 b8       	out	0x02, r1	; 2
UBRRL = 5;
 5a8:	85 e0       	ldi	r24, 0x05	; 5
 5aa:	89 b9       	out	0x09, r24	; 9

UCSRB	|= _BV(RXEN) ;//holding off on tx enable as of right now it may be better to simply receive data with the tx line as a sort of flow control 
 5ac:	54 9a       	sbi	0x0a, 4	; 10

//buffer.head = uartBufferBegin;
//buffer.tail = uartBufferBegin;

}
 5ae:	08 95       	ret

000005b0 <__mulhi3>:
 5b0:	55 27       	eor	r21, r21
 5b2:	00 24       	eor	r0, r0

000005b4 <__mulhi3_loop>:
 5b4:	80 ff       	sbrs	r24, 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__mulhi3_skip1>
 5b8:	06 0e       	add	r0, r22
 5ba:	57 1f       	adc	r21, r23

000005bc <__mulhi3_skip1>:
 5bc:	66 0f       	add	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	61 15       	cp	r22, r1
 5c2:	71 05       	cpc	r23, r1
 5c4:	21 f0       	breq	.+8      	; 0x5ce <__mulhi3_exit>
 5c6:	96 95       	lsr	r25
 5c8:	87 95       	ror	r24
 5ca:	00 97       	sbiw	r24, 0x00	; 0
 5cc:	99 f7       	brne	.-26     	; 0x5b4 <__mulhi3_loop>

000005ce <__mulhi3_exit>:
 5ce:	95 2f       	mov	r25, r21
 5d0:	80 2d       	mov	r24, r0
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
