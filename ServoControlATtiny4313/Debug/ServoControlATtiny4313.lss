
ServoControlATtiny4313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000bc  00800060  00800060  000003c4  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001eb  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ac  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000404  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db7  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000027e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000295  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011e  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 00018ee7  00000000  00000000  00002cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000118  00000000  00000000  0001bbe2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	01 c1       	rjmp	.+514    	; 0x20c <__vector_4>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	f4 c0       	rjmp	.+488    	; 0x1f8 <__vector_7>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	11 e0       	ldi	r17, 0x01	; 1
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	ac 31       	cpi	r26, 0x1C	; 28
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	b6 d0       	rcall	.+364    	; 0x1b4 <main>
  48:	81 c1       	rjmp	.+770    	; 0x34c <_exit>

0000004a <__bad_interrupt>:
  4a:	cc c0       	rjmp	.+408    	; 0x1e4 <__vector_default>

0000004c <setMasks>:

		for(i=0;i<8;i++){
			servo[i].masks.portDMask = 0xC0; 
			servo[i].masks.portBMask = 0x80>>i; 
		}		
		for(i=0;i<8;i++){
  4c:	e8 e9       	ldi	r30, 0x98	; 152
  4e:	f0 e0       	ldi	r31, 0x00	; 0
volatile uint8_t flagReg = 0;
uint16_t servoDataBuffer[24];

volatile uint8_t currentServo = 0;

void setMasks(void){
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i ;//simple increment 

		for(i=0;i<8;i++){
			servo[i].masks.portDMask = 0xC0; 
  54:	60 ec       	ldi	r22, 0xC0	; 192
			servo[i].masks.portBMask = 0x80>>i; 
  56:	20 e8       	ldi	r18, 0x80	; 128
  58:	30 e0       	ldi	r19, 0x00	; 0

void setMasks(void){
	uint8_t i ;//simple increment 

		for(i=0;i<8;i++){
			servo[i].masks.portDMask = 0xC0; 
  5a:	60 83       	st	Z, r22
			servo[i].masks.portBMask = 0x80>>i; 
  5c:	a9 01       	movw	r20, r18
  5e:	08 2e       	mov	r0, r24
  60:	02 c0       	rjmp	.+4      	; 0x66 <setMasks+0x1a>
  62:	55 95       	asr	r21
  64:	47 95       	ror	r20
  66:	0a 94       	dec	r0
  68:	e2 f7       	brpl	.-8      	; 0x62 <setMasks+0x16>
  6a:	41 83       	std	Z+1, r20	; 0x01
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	34 96       	adiw	r30, 0x04	; 4
volatile uint8_t currentServo = 0;

void setMasks(void){
	uint8_t i ;//simple increment 

		for(i=0;i<8;i++){
  70:	88 30       	cpi	r24, 0x08	; 8
  72:	91 05       	cpc	r25, r1
  74:	91 f7       	brne	.-28     	; 0x5a <setMasks+0xe>
  76:	e8 eb       	ldi	r30, 0xB8	; 184
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
			servo[i].masks.portDMask = 0xC0; 
			servo[i].masks.portBMask = 0x80>>i; 
		}		
		for(i=0;i<8;i++){
			servo[i+8].masks.portDMask = 0xA0; 
  7e:	60 ea       	ldi	r22, 0xA0	; 160
			servo[i+8].masks.portBMask = 0x80>>i;
  80:	20 e8       	ldi	r18, 0x80	; 128
  82:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<8;i++){
			servo[i].masks.portDMask = 0xC0; 
			servo[i].masks.portBMask = 0x80>>i; 
		}		
		for(i=0;i<8;i++){
			servo[i+8].masks.portDMask = 0xA0; 
  84:	60 83       	st	Z, r22
			servo[i+8].masks.portBMask = 0x80>>i;
  86:	a9 01       	movw	r20, r18
  88:	08 2e       	mov	r0, r24
  8a:	02 c0       	rjmp	.+4      	; 0x90 <setMasks+0x44>
  8c:	55 95       	asr	r21
  8e:	47 95       	ror	r20
  90:	0a 94       	dec	r0
  92:	e2 f7       	brpl	.-8      	; 0x8c <setMasks+0x40>
  94:	41 83       	std	Z+1, r20	; 0x01
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	34 96       	adiw	r30, 0x04	; 4

		for(i=0;i<8;i++){
			servo[i].masks.portDMask = 0xC0; 
			servo[i].masks.portBMask = 0x80>>i; 
		}		
		for(i=0;i<8;i++){
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	91 05       	cpc	r25, r1
  9e:	91 f7       	brne	.-28     	; 0x84 <setMasks+0x38>
  a0:	e8 ed       	ldi	r30, 0xD8	; 216
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
			servo[i+8].masks.portDMask = 0xA0; 
			servo[i+8].masks.portBMask = 0x80>>i;
		}		
		for(i=0;i<8;i++){
			servo[i+16].masks.portDMask = 0x60;
  a8:	60 e6       	ldi	r22, 0x60	; 96
			servo[i+16].masks.portBMask = 0x80>>i;
  aa:	20 e8       	ldi	r18, 0x80	; 128
  ac:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<8;i++){
			servo[i+8].masks.portDMask = 0xA0; 
			servo[i+8].masks.portBMask = 0x80>>i;
		}		
		for(i=0;i<8;i++){
			servo[i+16].masks.portDMask = 0x60;
  ae:	60 83       	st	Z, r22
			servo[i+16].masks.portBMask = 0x80>>i;
  b0:	a9 01       	movw	r20, r18
  b2:	08 2e       	mov	r0, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <setMasks+0x6e>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <setMasks+0x6a>
  be:	41 83       	std	Z+1, r20	; 0x01
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	34 96       	adiw	r30, 0x04	; 4
		}		
		for(i=0;i<8;i++){
			servo[i+8].masks.portDMask = 0xA0; 
			servo[i+8].masks.portBMask = 0x80>>i;
		}		
		for(i=0;i<8;i++){
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	91 05       	cpc	r25, r1
  c8:	91 f7       	brne	.-28     	; 0xae <setMasks+0x62>
			servo[i+16].masks.portDMask = 0x60;
			servo[i+16].masks.portBMask = 0x80>>i;
		}		
}
  ca:	08 95       	ret

000000cc <refresh>:

void refresh(void){
  cc:	a6 e6       	ldi	r26, 0x66	; 102
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	e6 e9       	ldi	r30, 0x96	; 150
  d2:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t i;
	for(i=0;i<24;i++)servo[i].TimerVal = servoDataBuffer[i];
  d4:	8d 91       	ld	r24, X+
  d6:	9d 91       	ld	r25, X+
  d8:	91 83       	std	Z+1, r25	; 0x01
  da:	80 83       	st	Z, r24
  dc:	34 96       	adiw	r30, 0x04	; 4
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	a6 39       	cpi	r26, 0x96	; 150
  e2:	b8 07       	cpc	r27, r24
  e4:	b9 f7       	brne	.-18     	; 0xd4 <refresh+0x8>
	currentServo = 0;
  e6:	10 92 61 00 	sts	0x0061, r1
}
  ea:	08 95       	ret

000000ec <seedValues>:
  
void seedValues(void){
  ec:	e6 e6       	ldi	r30, 0x66	; 102
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	8a e9       	ldi	r24, 0x9A	; 154
  f2:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t i;
	for(i=24;i>0;i--)servoDataBuffer[24-i] = (uint16_t)((i)*15 + 50);  
  f4:	81 93       	st	Z+, r24
  f6:	91 93       	st	Z+, r25
  f8:	0f 97       	sbiw	r24, 0x0f	; 15
  fa:	82 33       	cpi	r24, 0x32	; 50
  fc:	91 05       	cpc	r25, r1
  fe:	d1 f7       	brne	.-12     	; 0xf4 <seedValues+0x8>
}	
 100:	08 95       	ret

00000102 <sort>:
 
void sort(void){
 102:	27 c0       	rjmp	.+78     	; 0x152 <sort+0x50>
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servo[i].TimerVal < servo[i-1].TimerVal){
 104:	24 81       	ldd	r18, Z+4	; 0x04
 106:	35 81       	ldd	r19, Z+5	; 0x05
 108:	80 81       	ld	r24, Z
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	28 17       	cp	r18, r24
 10e:	39 07       	cpc	r19, r25
 110:	c8 f4       	brcc	.+50     	; 0x144 <sort+0x42>
				temp = servo[i];
 112:	84 81       	ldd	r24, Z+4	; 0x04
 114:	95 81       	ldd	r25, Z+5	; 0x05
 116:	a6 81       	ldd	r26, Z+6	; 0x06
 118:	b7 81       	ldd	r27, Z+7	; 0x07
 11a:	80 93 62 00 	sts	0x0062, r24
 11e:	90 93 63 00 	sts	0x0063, r25
 122:	a0 93 64 00 	sts	0x0064, r26
 126:	b0 93 65 00 	sts	0x0065, r27
				servo [i] = servo[i-1];
 12a:	20 81       	ld	r18, Z
 12c:	31 81       	ldd	r19, Z+1	; 0x01
 12e:	42 81       	ldd	r20, Z+2	; 0x02
 130:	53 81       	ldd	r21, Z+3	; 0x03
 132:	24 83       	std	Z+4, r18	; 0x04
 134:	35 83       	std	Z+5, r19	; 0x05
 136:	46 83       	std	Z+6, r20	; 0x06
 138:	57 83       	std	Z+7, r21	; 0x07
				servo[i-1] = temp;		
 13a:	80 83       	st	Z, r24
 13c:	91 83       	std	Z+1, r25	; 0x01
 13e:	a2 83       	std	Z+2, r26	; 0x02
 140:	b3 83       	std	Z+3, r27	; 0x03
				ErrorFound = 1;	
 142:	41 e0       	ldi	r20, 0x01	; 1
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servo[i].TimerVal < servo[i-1].TimerVal){
				temp = servo[i];
				servo [i] = servo[i-1];
				servo[i-1] = temp;		
 144:	34 96       	adiw	r30, 0x04	; 4
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	e2 3f       	cpi	r30, 0xF2	; 242
 14a:	f8 07       	cpc	r31, r24
 14c:	d9 f6       	brne	.-74     	; 0x104 <sort+0x2>
	for(i=24;i>0;i--)servoDataBuffer[24-i] = (uint16_t)((i)*15 + 50);  
}	
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
 14e:	44 23       	and	r20, r20
 150:	21 f0       	breq	.+8      	; 0x15a <sort+0x58>
 152:	e6 e9       	ldi	r30, 0x96	; 150
 154:	f0 e0       	ldi	r31, 0x00	; 0
void seedValues(void){
	uint8_t i;
	for(i=24;i>0;i--)servoDataBuffer[24-i] = (uint16_t)((i)*15 + 50);  
}	
 
void sort(void){
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	d5 cf       	rjmp	.-86     	; 0x104 <sort+0x2>
 15a:	08 95       	ret

0000015c <postSortMask>:
}

void postSortMask(void){
	uint8_t i,temp[3];
	
	for(i=0;i<3;i++)temp[i] = 0;
 15c:	e8 e9       	ldi	r30, 0x98	; 152
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	80 e0       	ldi	r24, 0x00	; 0
	
	for(i=0;i<24;i++){
		switch(servo[i].masks.portDMask){
 166:	30 81       	ld	r19, Z
 168:	30 3a       	cpi	r19, 0xA0	; 160
 16a:	49 f0       	breq	.+18     	; 0x17e <__stack+0x1f>
 16c:	30 3c       	cpi	r19, 0xC0	; 192
 16e:	19 f0       	breq	.+6      	; 0x176 <__stack+0x17>
 170:	30 36       	cpi	r19, 0x60	; 96
 172:	61 f4       	brne	.+24     	; 0x18c <__stack+0x2d>
 174:	08 c0       	rjmp	.+16     	; 0x186 <__stack+0x27>
			case(0xC0):
				servo[i].masks.portBMask |= temp[0];
 176:	31 81       	ldd	r19, Z+1	; 0x01
 178:	83 2b       	or	r24, r19
 17a:	81 83       	std	Z+1, r24	; 0x01
				temp[0] = servo[i].masks.portBMask;
			break;
 17c:	07 c0       	rjmp	.+14     	; 0x18c <__stack+0x2d>
			case(0xA0):
				servo[i].masks.portBMask |= temp[1];
 17e:	31 81       	ldd	r19, Z+1	; 0x01
 180:	93 2b       	or	r25, r19
 182:	91 83       	std	Z+1, r25	; 0x01
				temp[1] = servo[i].masks.portBMask;
			break;
 184:	03 c0       	rjmp	.+6      	; 0x18c <__stack+0x2d>
			case(0x60):
				servo[i].masks.portBMask |= temp[2];
 186:	31 81       	ldd	r19, Z+1	; 0x01
 188:	23 2b       	or	r18, r19
 18a:	21 83       	std	Z+1, r18	; 0x01
				temp[2] = servo[i].masks.portBMask;
			break;
 18c:	34 96       	adiw	r30, 0x04	; 4
void postSortMask(void){
	uint8_t i,temp[3];
	
	for(i=0;i<3;i++)temp[i] = 0;
	
	for(i=0;i<24;i++){
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	e8 3f       	cpi	r30, 0xF8	; 248
 192:	f3 07       	cpc	r31, r19
 194:	41 f7       	brne	.-48     	; 0x166 <__stack+0x7>
				servo[i].masks.portBMask |= temp[2];
				temp[2] = servo[i].masks.portBMask;
			break;
		}
	}
}
 196:	08 95       	ret

00000198 <seedTimerCompares>:

void seedTimerCompares(void){
	OCR1A = servo[currentServo].TimerVal;
 198:	e0 91 61 00 	lds	r30, 0x0061
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ea 56       	subi	r30, 0x6A	; 106
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
 1ac:	91 81       	ldd	r25, Z+1	; 0x01
 1ae:	9b bd       	out	0x2b, r25	; 43
 1b0:	8a bd       	out	0x2a, r24	; 42
//	OCR1B = servo[currentServo + 1].TimerVal;
 1b2:	08 95       	ret

000001b4 <main>:


int main(void)
{
	
	DDRB = 0xFF;//enable all port B pins (servo pins as Outputs)
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE;//enables every pin except the uart receive pin as an output
 1b8:	8e ef       	ldi	r24, 0xFE	; 254
 1ba:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0x4;
 1bc:	92 9a       	sbi	0x12, 2	; 18
	uartInit();
 1be:	73 d0       	rcall	.+230    	; 0x2a6 <uartInit>
	setMasks();
 1c0:	45 df       	rcall	.-374    	; 0x4c <setMasks>
	seedValues();
 1c2:	94 df       	rcall	.-216    	; 0xec <seedValues>
	refresh();
 1c4:	83 df       	rcall	.-250    	; 0xcc <refresh>
	sort();
 1c6:	9d df       	rcall	.-198    	; 0x102 <sort>
	seedTimerCompares();
 1c8:	e7 df       	rcall	.-50     	; 0x198 <seedTimerCompares>
	timer1Init();
 1ca:	63 d0       	rcall	.+198    	; 0x292 <timer1Init>
	sei();
 1cc:	78 94       	sei
	while(1)
    {
		while(currentServo<24);
 1ce:	80 91 61 00 	lds	r24, 0x0061
 1d2:	88 31       	cpi	r24, 0x18	; 24
 1d4:	e0 f3       	brcs	.-8      	; 0x1ce <main+0x1a>
		setMasks();
 1d6:	3a df       	rcall	.-396    	; 0x4c <setMasks>
		seedValues();
 1d8:	89 df       	rcall	.-238    	; 0xec <seedValues>
		refresh();
 1da:	78 df       	rcall	.-272    	; 0xcc <refresh>
		sort();
 1dc:	92 df       	rcall	.-220    	; 0x102 <sort>
		seedTimerCompares();	
 1de:	dc df       	rcall	.-72     	; 0x198 <seedTimerCompares>
		asm("nop");
 1e0:	00 00       	nop
 1e2:	f5 cf       	rjmp	.-22     	; 0x1ce <main+0x1a>

000001e4 <__vector_default>:
    }
}



ISR(BADISR_vect){}
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_7>:

ISR(USART_RX_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
	//uartGetC(); set this equal to the current buffer location	
}
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_4>:

ISR(TIMER1_COMPA_vect){
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	OCR1A = servo[currentServo + 1].TimerVal;	
 222:	e0 91 61 00 	lds	r30, 0x0061
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	31 96       	adiw	r30, 0x01	; 1
 22a:	86 e9       	ldi	r24, 0x96	; 150
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	e8 0f       	add	r30, r24
 238:	f9 1f       	adc	r31, r25
 23a:	20 81       	ld	r18, Z
 23c:	31 81       	ldd	r19, Z+1	; 0x01
 23e:	3b bd       	out	0x2b, r19	; 43
 240:	2a bd       	out	0x2a, r18	; 42
	PORTD = _BV(DECODE0) | _BV(DECODE1) | _BV(DECODE2);
 242:	12 ba       	out	0x12, r1	; 18
	PORTB = servo[currentServo].masks.portBMask;
 244:	e0 91 61 00 	lds	r30, 0x0061
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	e8 0f       	add	r30, r24
 254:	f9 1f       	adc	r31, r25
 256:	23 81       	ldd	r18, Z+3	; 0x03
 258:	28 bb       	out	0x18, r18	; 24
	PORTD = servo[currentServo++].masks.portDMask;
 25a:	20 91 61 00 	lds	r18, 0x0061
 25e:	e2 2f       	mov	r30, r18
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	e8 0f       	add	r30, r24
 26c:	f9 1f       	adc	r31, r25
 26e:	82 81       	ldd	r24, Z+2	; 0x02
 270:	82 bb       	out	0x12, r24	; 18
 272:	2f 5f       	subi	r18, 0xFF	; 255
 274:	20 93 61 00 	sts	0x0061, r18
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <uartGetC>:

uint8_t uartGetC(){
	return UDR;
 28e:	8c b1       	in	r24, 0x0c	; 12
}
 290:	08 95       	ret

00000292 <timer1Init>:
 */ 
#include "Timer.h"


void timer1Init(void){
	TCCR1A = 0;
 292:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x1A; //sets ICR1 as top val reg and sets the prescaler to div8 enables ctc for immediate updates to ocr1x
 294:	8a e1       	ldi	r24, 0x1A	; 26
 296:	8e bd       	out	0x2e, r24	; 46
	TIMSK = _BV(OCIE1A);
 298:	80 e4       	ldi	r24, 0x40	; 64
 29a:	89 bf       	out	0x39, r24	; 57
	ICR1 = 	(F_CPU/(50*8)); //1 timer clock equals 1us period of 20ms ie 20000us	
 29c:	80 e3       	ldi	r24, 0x30	; 48
 29e:	95 e7       	ldi	r25, 0x75	; 117
 2a0:	95 bd       	out	0x25, r25	; 37
 2a2:	84 bd       	out	0x24, r24	; 36
 2a4:	08 95       	ret

000002a6 <uartInit>:
	uint8_t data[bufferSize];
}buffer;

void uartInit(void){

UBRRH = 0;//set for baud of 230400... dang fast
 2a6:	12 b8       	out	0x02, r1	; 2
UBRRL = 2;
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	89 b9       	out	0x09, r24	; 9

UCSRB = _BV(RXCIE) | _BV(RXEN) ;//holding off on tx enable as of right now it may be better to simply receive data with the tx line as a sort of flow control 
 2ac:	80 e9       	ldi	r24, 0x90	; 144
 2ae:	8a b9       	out	0x0a, r24	; 10
}
 2b0:	08 95       	ret

000002b2 <uart_putchar>:

void uart_putchar(char c,FILE *unused)
{
	while(!(UCSRA & UDRE));
 2b2:	9b b1       	in	r25, 0x0b	; 11
 2b4:	95 70       	andi	r25, 0x05	; 5
 2b6:	e9 f3       	breq	.-6      	; 0x2b2 <uart_putchar>
	UDR = c;
 2b8:	8c b9       	out	0x0c, r24	; 12
}
 2ba:	08 95       	ret

000002bc <uart_getchar>:

int uart_getchar(FILE *stream){
	
	if (buffer.tail == buffer.bufferEnd){
 2bc:	e0 91 0a 01 	lds	r30, 0x010A
 2c0:	f0 91 0b 01 	lds	r31, 0x010B
 2c4:	20 91 06 01 	lds	r18, 0x0106
 2c8:	30 91 07 01 	lds	r19, 0x0107
 2cc:	80 81       	ld	r24, Z
 2ce:	e2 17       	cp	r30, r18
 2d0:	f3 07       	cpc	r31, r19
 2d2:	49 f4       	brne	.+18     	; 0x2e6 <uart_getchar+0x2a>
		uint8_t temp = *buffer.tail;
		buffer.tail = buffer.bufferBegin;
 2d4:	20 91 04 01 	lds	r18, 0x0104
 2d8:	30 91 05 01 	lds	r19, 0x0105
 2dc:	30 93 0b 01 	sts	0x010B, r19
 2e0:	20 93 0a 01 	sts	0x010A, r18
		return temp;
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <uart_getchar+0x34>
	}
	else return *buffer.tail++;
 2e6:	31 96       	adiw	r30, 0x01	; 1
 2e8:	f0 93 0b 01 	sts	0x010B, r31
 2ec:	e0 93 0a 01 	sts	0x010A, r30
}
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <store>:

void store(char c){
	if(buffer.head == buffer.bufferEnd){
 2f4:	e0 91 08 01 	lds	r30, 0x0108
 2f8:	f0 91 09 01 	lds	r31, 0x0109
 2fc:	20 91 06 01 	lds	r18, 0x0106
 300:	30 91 07 01 	lds	r19, 0x0107
 304:	e2 17       	cp	r30, r18
 306:	f3 07       	cpc	r31, r19
 308:	51 f4       	brne	.+20     	; 0x31e <store+0x2a>
		*buffer.head = c;
 30a:	80 83       	st	Z, r24
		buffer.head = buffer.bufferBegin;	
 30c:	80 91 04 01 	lds	r24, 0x0104
 310:	90 91 05 01 	lds	r25, 0x0105
 314:	90 93 09 01 	sts	0x0109, r25
 318:	80 93 08 01 	sts	0x0108, r24
 31c:	08 95       	ret
	}		
	else *buffer.head++ = c;
 31e:	81 93       	st	Z+, r24
 320:	f0 93 09 01 	sts	0x0109, r31
 324:	e0 93 08 01 	sts	0x0108, r30
 328:	08 95       	ret

0000032a <dataInbuffer>:
}

uint8_t dataInbuffer(void){
	if(buffer.head == buffer.tail) return 0;	//no data to be read
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	40 91 08 01 	lds	r20, 0x0108
 330:	50 91 09 01 	lds	r21, 0x0109
 334:	20 91 0a 01 	lds	r18, 0x010A
 338:	30 91 0b 01 	lds	r19, 0x010B
 33c:	42 17       	cp	r20, r18
 33e:	53 07       	cpc	r21, r19
 340:	09 f4       	brne	.+2      	; 0x344 <dataInbuffer+0x1a>
 342:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;							//data to be read
}
 344:	08 95       	ret

00000346 <ISR>:
ISR(USART_RX_vect){
	store(UDR);
 346:	8c b1       	in	r24, 0x0c	; 12
 348:	d5 df       	rcall	.-86     	; 0x2f4 <store>
}
 34a:	08 95       	ret

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
