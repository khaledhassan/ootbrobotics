
ServoControlATtiny4313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006a6  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ee  00800062  00800062  0000073c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000270  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a7f  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000043c  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fea  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000150  00000000  00000000  00003024  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d6  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000121  00000000  00000000  0000344a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000193e7  00000000  00000000  0000356b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000176  00000000  00000000  0001c952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	93 c2       	rjmp	.+1318   	; 0x530 <__vector_4>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	13 c3       	rjmp	.+1574   	; 0x636 <__vector_7>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e6 ea       	ldi	r30, 0xA6	; 166
  3e:	f6 e0       	ldi	r31, 0x06	; 6
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a2 36       	cpi	r26, 0x62	; 98
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	11 e0       	ldi	r17, 0x01	; 1
  4e:	a2 e6       	ldi	r26, 0x62	; 98
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a0 35       	cpi	r26, 0x50	; 80
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	a0 d1       	rcall	.+832    	; 0x39e <main>
  5e:	21 c3       	rjmp	.+1602   	; 0x6a2 <_exit>

00000060 <__bad_interrupt>:
  60:	5d c2       	rjmp	.+1210   	; 0x51c <__vector_default>

00000062 <setMasks>:
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f0 e0       	ldi	r31, 0x00	; 0
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  6e:	21 e0       	ldi	r18, 0x01	; 1
  70:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
  72:	6f ef       	ldi	r22, 0xFF	; 255
#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  74:	a9 01       	movw	r20, r18
  76:	08 2e       	mov	r0, r24
  78:	02 c0       	rjmp	.+4      	; 0x7e <setMasks+0x1c>
  7a:	44 0f       	add	r20, r20
  7c:	55 1f       	adc	r21, r21
  7e:	0a 94       	dec	r0
  80:	e2 f7       	brpl	.-8      	; 0x7a <setMasks+0x18>
  82:	40 95       	com	r20
  84:	40 83       	st	Z, r20
			servos.bus[i].masks[1] = 0xFF;
  86:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i].masks[2] = 0xFF;
  88:	62 83       	std	Z+2, r22	; 0x02
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	33 96       	adiw	r30, 0x03	; 3

#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
  8e:	88 30       	cpi	r24, 0x08	; 8
  90:	91 05       	cpc	r25, r1
  92:	81 f7       	brne	.-32     	; 0x74 <setMasks+0x12>
  94:	e0 eb       	ldi	r30, 0xB0	; 176
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  9c:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+8].masks[1] = ~(1<<i);
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  a2:	60 83       	st	Z, r22
			servos.bus[i+8].masks[1] = ~(1<<i);
  a4:	a9 01       	movw	r20, r18
  a6:	08 2e       	mov	r0, r24
  a8:	02 c0       	rjmp	.+4      	; 0xae <setMasks+0x4c>
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <setMasks+0x48>
  b2:	40 95       	com	r20
  b4:	41 83       	std	Z+1, r20	; 0x01
			servos.bus[i+8].masks[2] = 0xFF;
  b6:	62 83       	std	Z+2, r22	; 0x02
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i].masks[0] = ~(1<<i);
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
  bc:	88 30       	cpi	r24, 0x08	; 8
  be:	91 05       	cpc	r25, r1
  c0:	81 f7       	brne	.-32     	; 0xa2 <setMasks+0x40>
  c2:	e8 ec       	ldi	r30, 0xC8	; 200
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  ca:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  d0:	60 83       	st	Z, r22
			servos.bus[i+16].masks[1] = 0xFF;
  d2:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i+16].masks[2] = ~(1<<i);
  d4:	a9 01       	movw	r20, r18
  d6:	08 2e       	mov	r0, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <setMasks+0x7c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <setMasks+0x78>
  e2:	40 95       	com	r20
  e4:	42 83       	std	Z+2, r20	; 0x02
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i+8].masks[1] = ~(1<<i);
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	91 05       	cpc	r25, r1
  ee:	81 f7       	brne	.-32     	; 0xd0 <setMasks+0x6e>
			servos.bus[i+16].masks[0] = 0xFF;
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
		}
		servos.tempBus.masks[0] = 0x0;
  f0:	10 92 e0 00 	sts	0x00E0, r1
		servos.tempBus.masks[1] = 0x0;
  f4:	10 92 e1 00 	sts	0x00E1, r1
		servos.tempBus.masks[2] = 0x0;
  f8:	10 92 e2 00 	sts	0x00E2, r1
		
		mainBus[0] = 0xFF;
  fc:	60 93 16 01 	sts	0x0116, r22
		mainBus[1] = 0xFF;
 100:	60 93 17 01 	sts	0x0117, r22
		mainBus[2] = 0xFF;
 104:	60 93 18 01 	sts	0x0118, r22
 108:	28 e9       	ldi	r18, 0x98	; 152
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
				servos.bus[i] = servos.tempBus;
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	50 e0       	ldi	r21, 0x00	; 0
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
 114:	e8 2f       	mov	r30, r24
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
 116:	dc 01       	movw	r26, r24
 118:	aa 0f       	add	r26, r26
 11a:	bb 1f       	adc	r27, r27
 11c:	ad 51       	subi	r26, 0x1D	; 29
 11e:	bf 4f       	sbci	r27, 0xFF	; 255
 120:	6d 91       	ld	r22, X+
 122:	7c 91       	ld	r23, X
 124:	11 97       	sbiw	r26, 0x01	; 1
 126:	61 15       	cp	r22, r1
 128:	71 05       	cpc	r23, r1
 12a:	e1 f4       	brne	.+56     	; 0x164 <__stack+0x5>
				servos.bus[i] = servos.tempBus;
 12c:	e9 01       	movw	r28, r18
 12e:	a0 ee       	ldi	r26, 0xE0	; 224
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	0d 90       	ld	r0, X+
 136:	09 92       	st	Y+, r0
 138:	61 50       	subi	r22, 0x01	; 1
 13a:	e1 f7       	brne	.-8      	; 0x134 <setMasks+0xd2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
 13c:	e6 95       	lsr	r30
 13e:	e6 95       	lsr	r30
 140:	e6 95       	lsr	r30
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ea 5e       	subi	r30, 0xEA	; 234
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	bc 01       	movw	r22, r24
 14a:	67 70       	andi	r22, 0x07	; 7
 14c:	70 70       	andi	r23, 0x00	; 0
 14e:	da 01       	movw	r26, r20
 150:	02 c0       	rjmp	.+4      	; 0x156 <setMasks+0xf4>
 152:	aa 0f       	add	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <setMasks+0xf0>
 15a:	bd 01       	movw	r22, r26
 15c:	60 95       	com	r22
 15e:	70 81       	ld	r23, Z
 160:	67 23       	and	r22, r23
 162:	60 83       	st	Z, r22
			}
			asm("nop");				
 164:	00 00       	nop
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	2d 5f       	subi	r18, 0xFD	; 253
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
		
		for(i=0;i<24;i++){ 
 16c:	88 31       	cpi	r24, 0x18	; 24
 16e:	91 05       	cpc	r25, r1
 170:	89 f6       	brne	.-94     	; 0x114 <setMasks+0xb2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
			}
			asm("nop");				
		}	
			
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <refresh>:

void refresh(void){
 178:	a5 e6       	ldi	r26, 0x65	; 101
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	//refresh all the servos
	for(i=0;i<24;i++)servos.times[i].timerVal = servoBuffer[i].timerVal;
 180:	2d 91       	ld	r18, X+
 182:	3d 91       	ld	r19, X+
 184:	fc 01       	movw	r30, r24
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ed 51       	subi	r30, 0x1D	; 29
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	31 83       	std	Z+1, r19	; 0x01
 190:	20 83       	st	Z, r18
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	88 31       	cpi	r24, 0x18	; 24
 196:	91 05       	cpc	r25, r1
 198:	99 f7       	brne	.-26     	; 0x180 <refresh+0x8>
	
	//initialize all the pointers
	servoBusPtr = &servos.bus[0].masks[0];
 19a:	88 e9       	ldi	r24, 0x98	; 152
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 64 00 	sts	0x0064, r25
 1a2:	80 93 63 00 	sts	0x0063, r24
	servoTimePtr = &servos.times[0].timerVal;
 1a6:	83 ee       	ldi	r24, 0xE3	; 227
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 1a 01 	sts	0x011A, r25
 1ae:	80 93 19 01 	sts	0x0119, r24
}
 1b2:	08 95       	ret

000001b4 <seedValues>:
  
void seedValues(void){
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
 1b8:	fc 01       	movw	r30, r24
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	ed 51       	subi	r30, 0x1D	; 29
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	11 82       	std	Z+1, r1	; 0x01
 1c4:	10 82       	st	Z, r1
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	88 31       	cpi	r24, 0x18	; 24
 1ca:	91 05       	cpc	r25, r1
 1cc:	a9 f7       	brne	.-22     	; 0x1b8 <seedValues+0x4>
}	
 1ce:	08 95       	ret

000001d0 <sort>:
 
void sort(void){
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	52 c0       	rjmp	.+164    	; 0x282 <sort+0xb2>
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 1de:	ab 01       	movw	r20, r22
void seedValues(void){
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
}	
 
void sort(void){
 1e0:	ba 01       	movw	r22, r20
 1e2:	6f 5f       	subi	r22, 0xFF	; 255
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
 1e6:	db 01       	movw	r26, r22
 1e8:	aa 0f       	add	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	ad 51       	subi	r26, 0x1D	; 29
 1ee:	bf 4f       	sbci	r27, 0xFF	; 255
 1f0:	cd 91       	ld	r28, X+
 1f2:	dc 91       	ld	r29, X
 1f4:	da 01       	movw	r26, r20
 1f6:	aa 0f       	add	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	ad 51       	subi	r26, 0x1D	; 29
 1fc:	bf 4f       	sbci	r27, 0xFF	; 255
 1fe:	4d 91       	ld	r20, X+
 200:	5c 91       	ld	r21, X
 202:	11 97       	sbiw	r26, 0x01	; 1
 204:	c4 17       	cp	r28, r20
 206:	d5 07       	cpc	r29, r21
 208:	90 f5       	brcc	.+100    	; 0x26e <sort+0x9e>
void seedValues(void){
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
}	
 
void sort(void){
 20a:	7c 01       	movw	r14, r24
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
 20c:	c0 ee       	ldi	r28, 0xE0	; 224
 20e:	d0 e0       	ldi	r29, 0x00	; 0
 210:	48 2f       	mov	r20, r24
 212:	59 2f       	mov	r21, r25
 214:	da 01       	movw	r26, r20
 216:	43 e0       	ldi	r20, 0x03	; 3
 218:	0d 90       	ld	r0, X+
 21a:	09 92       	st	Y+, r0
 21c:	41 50       	subi	r20, 0x01	; 1
 21e:	e1 f7       	brne	.-8      	; 0x218 <sort+0x48>
				servos.tempTimes = servos.times[i];
 220:	42 81       	ldd	r20, Z+2	; 0x02
 222:	53 81       	ldd	r21, Z+3	; 0x03
 224:	50 93 14 01 	sts	0x0114, r21
 228:	40 93 13 01 	sts	0x0113, r20
				
				servos.times[i] = servos.times[i-1];
 22c:	40 81       	ld	r20, Z
 22e:	51 81       	ldd	r21, Z+1	; 0x01
 230:	53 83       	std	Z+3, r21	; 0x03
 232:	42 83       	std	Z+2, r20	; 0x02
void seedValues(void){
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
}	
 
void sort(void){
 234:	89 01       	movw	r16, r18
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
				servos.tempTimes = servos.times[i];
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
 236:	4e 2d       	mov	r20, r14
 238:	5f 2d       	mov	r21, r15
 23a:	ea 01       	movw	r28, r20
 23c:	42 2f       	mov	r20, r18
 23e:	53 2f       	mov	r21, r19
 240:	da 01       	movw	r26, r20
 242:	43 e0       	ldi	r20, 0x03	; 3
 244:	0d 90       	ld	r0, X+
 246:	09 92       	st	Y+, r0
 248:	41 50       	subi	r20, 0x01	; 1
 24a:	e1 f7       	brne	.-8      	; 0x244 <sort+0x74>
			
				servos.times[i-1] = servos.tempTimes;
 24c:	40 91 13 01 	lds	r20, 0x0113
 250:	50 91 14 01 	lds	r21, 0x0114
 254:	51 83       	std	Z+1, r21	; 0x01
 256:	40 83       	st	Z, r20
				servos.bus[i-1] = servos.tempBus;
 258:	40 2f       	mov	r20, r16
 25a:	51 2f       	mov	r21, r17
 25c:	ea 01       	movw	r28, r20
 25e:	a0 ee       	ldi	r26, 0xE0	; 224
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	43 e0       	ldi	r20, 0x03	; 3
 264:	0d 90       	ld	r0, X+
 266:	09 92       	st	Y+, r0
 268:	41 50       	subi	r20, 0x01	; 1
 26a:	e1 f7       	brne	.-8      	; 0x264 <sort+0x94>
			
				ErrorFound = 1;	
 26c:	11 e0       	ldi	r17, 0x01	; 1
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
			
				servos.times[i-1] = servos.tempTimes;
				servos.bus[i-1] = servos.tempBus;
 26e:	03 96       	adiw	r24, 0x03	; 3
 270:	2d 5f       	subi	r18, 0xFD	; 253
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	32 96       	adiw	r30, 0x02	; 2
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 276:	67 31       	cpi	r22, 0x17	; 23
 278:	71 05       	cpc	r23, r1
 27a:	09 f0       	breq	.+2      	; 0x27e <sort+0xae>
 27c:	b0 cf       	rjmp	.-160    	; 0x1de <sort+0xe>
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
}	
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
 27e:	11 23       	and	r17, r17
 280:	59 f0       	breq	.+22     	; 0x298 <sort+0xc8>
 282:	8b e9       	ldi	r24, 0x9B	; 155
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	9c 01       	movw	r18, r24
 288:	23 50       	subi	r18, 0x03	; 3
 28a:	30 40       	sbci	r19, 0x00	; 0
 28c:	e3 ee       	ldi	r30, 0xE3	; 227
 28e:	f0 e0       	ldi	r31, 0x00	; 0
		ErrorFound = 0;
		for(i=1;i<24;i++){
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	a4 cf       	rjmp	.-184    	; 0x1e0 <sort+0x10>
			
				ErrorFound = 1;	
			}				
		}
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	08 95       	ret

000002a6 <postSortMask>:

void postSortMask(void){
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 e0       	ldi	r16, 0x00	; 0
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	e0 e0       	ldi	r30, 0x00	; 0
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	1e c0       	rjmp	.+60     	; 0x2f8 <postSortMask+0x52>
 2bc:	ae 01       	movw	r20, r28
 2be:	42 0f       	add	r20, r18
 2c0:	53 1f       	adc	r21, r19
 2c2:	40 0f       	add	r20, r16
 2c4:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2c6:	da 01       	movw	r26, r20
 2c8:	13 96       	adiw	r26, 0x03	; 3
 2ca:	7c 91       	ld	r23, X
 2cc:	69 91       	ld	r22, Y+
			}				
		}
	}
}

void postSortMask(void){
 2ce:	ae 01       	movw	r20, r28
 2d0:	42 0f       	add	r20, r18
 2d2:	53 1f       	adc	r21, r19
 2d4:	40 0f       	add	r20, r16
 2d6:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2d8:	67 23       	and	r22, r23
 2da:	da 01       	movw	r26, r20
 2dc:	12 96       	adiw	r26, 0x02	; 2
 2de:	6c 93       	st	X, r22
 2e0:	12 97       	sbiw	r26, 0x02	; 2
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
 2e2:	c8 17       	cp	r28, r24
 2e4:	d9 07       	cpc	r29, r25
 2e6:	51 f7       	brne	.-44     	; 0x2bc <postSortMask+0x16>
 2e8:	31 96       	adiw	r30, 0x01	; 1
 2ea:	23 50       	subi	r18, 0x03	; 3
 2ec:	30 40       	sbci	r19, 0x00	; 0
 2ee:	0d 5f       	subi	r16, 0xFD	; 253
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
 2f2:	e7 31       	cpi	r30, 0x17	; 23
 2f4:	f1 05       	cpc	r31, r1
 2f6:	71 f0       	breq	.+28     	; 0x314 <postSortMask+0x6e>
			}				
		}
	}
}

void postSortMask(void){
 2f8:	cf 01       	movw	r24, r30
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	bf d1       	rcall	.+894    	; 0x67e <__mulhi3>
 300:	ec 01       	movw	r28, r24
 302:	c8 56       	subi	r28, 0x68	; 104
 304:	df 4f       	sbci	r29, 0xFF	; 255
 306:	88 27       	eor	r24, r24
 308:	99 27       	eor	r25, r25
 30a:	82 1b       	sub	r24, r18
 30c:	93 0b       	sbc	r25, r19
	uint8_t i,j;
	for(i=0;i<23;i++){
 30e:	85 56       	subi	r24, 0x65	; 101
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	d4 cf       	rjmp	.-88     	; 0x2bc <postSortMask+0x16>
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
			//servos.bus[i+1].masks[j] &= mainBus[j];
		}			
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <mulitpleServoTimeFix>:



//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
 31e:	1f 93       	push	r17
static uint8_t i;
	servos.tempBus = servos.bus[23];
 320:	e0 ee       	ldi	r30, 0xE0	; 224
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	df 01       	movw	r26, r30
 326:	13 97       	sbiw	r26, 0x03	; 3
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0d 90       	ld	r0, X+
 32c:	01 92       	st	Z+, r0
 32e:	81 50       	subi	r24, 0x01	; 1
 330:	e1 f7       	brne	.-8      	; 0x32a <mulitpleServoTimeFix+0xc>
	for(i=23;i>0;i--){
 332:	87 e1       	ldi	r24, 0x17	; 23
 334:	80 93 62 00 	sts	0x0062, r24
 338:	2c c0       	rjmp	.+88     	; 0x392 <mulitpleServoTimeFix+0x74>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
 33a:	21 2f       	mov	r18, r17
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	c9 01       	movw	r24, r18
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	fc 01       	movw	r30, r24
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	ed 51       	subi	r30, 0x1D	; 29
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	60 81       	ld	r22, Z
 34e:	71 81       	ldd	r23, Z+1	; 0x01
 350:	f9 01       	movw	r30, r18
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	ed 51       	subi	r30, 0x1D	; 29
 358:	ff 4f       	sbci	r31, 0xFF	; 255
 35a:	40 81       	ld	r20, Z
 35c:	51 81       	ldd	r21, Z+1	; 0x01
 35e:	64 17       	cp	r22, r20
 360:	75 07       	cpc	r23, r21
 362:	a1 f4       	brne	.+40     	; 0x38c <mulitpleServoTimeFix+0x6e>
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
 364:	11 82       	std	Z+1, r1	; 0x01
 366:	10 82       	st	Z, r1
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	88 d1       	rcall	.+784    	; 0x67e <__mulhi3>
 36e:	fc 01       	movw	r30, r24
 370:	e8 56       	subi	r30, 0x68	; 104
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	c9 01       	movw	r24, r18
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	81 d1       	rcall	.+770    	; 0x67e <__mulhi3>
 37c:	dc 01       	movw	r26, r24
 37e:	a8 56       	subi	r26, 0x68	; 104
 380:	bf 4f       	sbci	r27, 0xFF	; 255
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	0d 90       	ld	r0, X+
 386:	01 92       	st	Z+, r0
 388:	81 50       	subi	r24, 0x01	; 1
 38a:	e1 f7       	brne	.-8      	; 0x384 <mulitpleServoTimeFix+0x66>

//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
static uint8_t i;
	servos.tempBus = servos.bus[23];
	for(i=23;i>0;i--){
 38c:	11 50       	subi	r17, 0x01	; 1
 38e:	10 93 62 00 	sts	0x0062, r17
 392:	10 91 62 00 	lds	r17, 0x0062
 396:	11 23       	and	r17, r17
 398:	81 f6       	brne	.-96     	; 0x33a <mulitpleServoTimeFix+0x1c>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
		}			
	}
}	
 39a:	1f 91       	pop	r17
 39c:	08 95       	ret

0000039e <main>:

static uint16_t angle = 900;


int main(void)
{
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
	bytesInBuffer = 0;
 3a6:	10 92 1b 01 	sts	0x011B, r1
	DDRB = 0xFF;//enable all port B pins (servo pins as Outputs)
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE;//enables every pin except the uart receive pin as an output
 3ae:	8e ef       	ldi	r24, 0xFE	; 254
 3b0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
 3b2:	12 ba       	out	0x12, r1	; 18
	uartInit();
 3b4:	e7 d0       	rcall	.+462    	; 0x584 <uartInit>
	refresh();
 3b6:	e0 de       	rcall	.-576    	; 0x178 <refresh>
	setMasks();
 3b8:	54 de       	rcall	.-856    	; 0x62 <setMasks>
	seedValues();
 3ba:	fc de       	rcall	.-520    	; 0x1b4 <seedValues>
	sort();
 3bc:	09 df       	rcall	.-494    	; 0x1d0 <sort>
	postSortMask();
 3be:	73 df       	rcall	.-282    	; 0x2a6 <postSortMask>
	mulitpleServoTimeFix();
 3c0:	ae df       	rcall	.-164    	; 0x31e <mulitpleServoTimeFix>
	timer1Init();
 3c2:	d4 d0       	rcall	.+424    	; 0x56c <timer1Init>
	sei();
 3c4:	78 94       	sei
		do 
		{
			if(TCNT1>(uint16_t)*servoTimePtr){		
				if((uint16_t)*servoTimePtr != 0){
					PORTB =	*servoBusPtr++; 
					PORTD =	DECODE0;	     
 3c6:	10 e1       	ldi	r17, 0x10	; 16
			uart_store((angle & 0xFF00)>>8);
			uart_store((uint8_t)angle);
			uart_store(i | 0x80);
		}
		angle+=200;
		if(angle > 3600) angle = 900;
 3c8:	c4 e8       	ldi	r28, 0x84	; 132
 3ca:	d3 e0       	ldi	r29, 0x03	; 3
	sei();
	while(1)
    {
		do 
		{
			if(TCNT1>(uint16_t)*servoTimePtr){		
 3cc:	4c b5       	in	r20, 0x2c	; 44
 3ce:	5d b5       	in	r21, 0x2d	; 45
 3d0:	80 91 19 01 	lds	r24, 0x0119
 3d4:	90 91 1a 01 	lds	r25, 0x011A
 3d8:	fc 01       	movw	r30, r24
 3da:	20 81       	ld	r18, Z
 3dc:	31 81       	ldd	r19, Z+1	; 0x01
 3de:	24 17       	cp	r18, r20
 3e0:	35 07       	cpc	r19, r21
 3e2:	a0 f5       	brcc	.+104    	; 0x44c <main+0xae>
 3e4:	a0 91 63 00 	lds	r26, 0x0063
 3e8:	b0 91 64 00 	lds	r27, 0x0064
 3ec:	02 96       	adiw	r24, 0x02	; 2
				if((uint16_t)*servoTimePtr != 0){
 3ee:	21 15       	cp	r18, r1
 3f0:	31 05       	cpc	r19, r1
 3f2:	19 f1       	breq	.+70     	; 0x43a <main+0x9c>
					PORTB =	*servoBusPtr++; 
 3f4:	fd 01       	movw	r30, r26
 3f6:	21 91       	ld	r18, Z+
 3f8:	28 bb       	out	0x18, r18	; 24
 3fa:	f0 93 64 00 	sts	0x0064, r31
 3fe:	e0 93 63 00 	sts	0x0063, r30
					PORTD =	DECODE0;	     
 402:	12 bb       	out	0x12, r17	; 18
					PORTB =	*servoBusPtr++; 
 404:	11 96       	adiw	r26, 0x01	; 1
 406:	2c 91       	ld	r18, X
 408:	11 97       	sbiw	r26, 0x01	; 1
 40a:	28 bb       	out	0x18, r18	; 24
 40c:	9f 01       	movw	r18, r30
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	3f 4f       	sbci	r19, 0xFF	; 255
 412:	30 93 64 00 	sts	0x0064, r19
 416:	20 93 63 00 	sts	0x0063, r18
					PORTD +=DECODE0;			
 41a:	42 b3       	in	r20, 0x12	; 18
 41c:	40 5f       	subi	r20, 0xF0	; 240
 41e:	42 bb       	out	0x12, r20	; 18
					PORTB =	*servoBusPtr++;		
 420:	41 81       	ldd	r20, Z+1	; 0x01
 422:	48 bb       	out	0x18, r20	; 24
 424:	2f 5f       	subi	r18, 0xFF	; 255
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	30 93 64 00 	sts	0x0064, r19
 42c:	20 93 63 00 	sts	0x0063, r18
					PORTD +=DECODE1;		
 430:	22 b3       	in	r18, 0x12	; 18
 432:	20 5e       	subi	r18, 0xE0	; 224
 434:	22 bb       	out	0x12, r18	; 18
					PORTD =	0;
 436:	12 ba       	out	0x12, r1	; 18
 438:	05 c0       	rjmp	.+10     	; 0x444 <main+0xa6>
					servoTimePtr++;
				}				
				else{
					servoBusPtr += 3;
 43a:	13 96       	adiw	r26, 0x03	; 3
 43c:	b0 93 64 00 	sts	0x0064, r27
 440:	a0 93 63 00 	sts	0x0063, r26
					servoTimePtr++;
 444:	90 93 1a 01 	sts	0x011A, r25
 448:	80 93 19 01 	sts	0x0119, r24
				}
			}					
		} while (servoTimePtr <= servoTimesEnd);
 44c:	80 91 19 01 	lds	r24, 0x0119
 450:	90 91 1a 01 	lds	r25, 0x011A
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	81 31       	cpi	r24, 0x11	; 17
 458:	9f 07       	cpc	r25, r31
 45a:	09 f0       	breq	.+2      	; 0x45e <main+0xc0>
 45c:	08 f4       	brcc	.+2      	; 0x460 <main+0xc2>
 45e:	b6 cf       	rjmp	.-148    	; 0x3cc <main+0x2e>
		refresh();
 460:	8b de       	rcall	.-746    	; 0x178 <refresh>
		setMasks();
 462:	ff dd       	rcall	.-1026   	; 0x62 <setMasks>
		sort();
 464:	b5 de       	rcall	.-662    	; 0x1d0 <sort>
		postSortMask();
 466:	1f df       	rcall	.-450    	; 0x2a6 <postSortMask>
		mulitpleServoTimeFix();
 468:	5a df       	rcall	.-332    	; 0x31e <mulitpleServoTimeFix>
//		servoDataIRQ();
		
		
		bytesInBuffer = 0;
 46a:	10 92 1b 01 	sts	0x011B, r1
		uint8_t i;
		for(i=12;i<24;i++){
 46e:	0c e0       	ldi	r16, 0x0C	; 12
			uart_store(i);
 470:	80 2f       	mov	r24, r16
 472:	af d0       	rcall	.+350    	; 0x5d2 <uart_store>
			uart_store((angle & 0xFF00)>>8);
 474:	80 91 61 00 	lds	r24, 0x0061
 478:	ac d0       	rcall	.+344    	; 0x5d2 <uart_store>
			uart_store((uint8_t)angle);
 47a:	80 91 60 00 	lds	r24, 0x0060
 47e:	a9 d0       	rcall	.+338    	; 0x5d2 <uart_store>
			uart_store(i | 0x80);
 480:	80 2f       	mov	r24, r16
 482:	80 68       	ori	r24, 0x80	; 128
 484:	a6 d0       	rcall	.+332    	; 0x5d2 <uart_store>
//		servoDataIRQ();
		
		
		bytesInBuffer = 0;
		uint8_t i;
		for(i=12;i<24;i++){
 486:	0f 5f       	subi	r16, 0xFF	; 255
 488:	08 31       	cpi	r16, 0x18	; 24
 48a:	91 f7       	brne	.-28     	; 0x470 <main+0xd2>
			uart_store(i);
			uart_store((angle & 0xFF00)>>8);
			uart_store((uint8_t)angle);
			uart_store(i | 0x80);
		}
		angle+=200;
 48c:	80 91 60 00 	lds	r24, 0x0060
 490:	90 91 61 00 	lds	r25, 0x0061
 494:	88 53       	subi	r24, 0x38	; 56
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	90 93 61 00 	sts	0x0061, r25
 49c:	80 93 60 00 	sts	0x0060, r24
		if(angle > 3600) angle = 900;
 4a0:	2e e0       	ldi	r18, 0x0E	; 14
 4a2:	81 31       	cpi	r24, 0x11	; 17
 4a4:	92 07       	cpc	r25, r18
 4a6:	a0 f1       	brcs	.+104    	; 0x510 <main+0x172>
 4a8:	d0 93 61 00 	sts	0x0061, r29
 4ac:	c0 93 60 00 	sts	0x0060, r28
 4b0:	2f c0       	rjmp	.+94     	; 0x510 <main+0x172>
		while(TCNT1>10)
		{
				
			if(bytesInBuffer >= 4){
 4b2:	80 91 1b 01 	lds	r24, 0x011B
 4b6:	84 30       	cpi	r24, 0x04	; 4
 4b8:	50 f1       	brcs	.+84     	; 0x50e <main+0x170>
				servoIdentifier = uart_getchar(NULL);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	72 d0       	rcall	.+228    	; 0x5a4 <uart_getchar>
 4c0:	80 93 15 01 	sts	0x0115, r24
				if(servoIdentifier <= 23){
 4c4:	88 31       	cpi	r24, 0x18	; 24
 4c6:	20 f5       	brcc	.+72     	; 0x510 <main+0x172>
					servoTime.byte._H = uart_getchar(NULL);
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	6b d0       	rcall	.+214    	; 0x5a4 <uart_getchar>
 4ce:	80 93 96 00 	sts	0x0096, r24
					servoTime.byte._L = uart_getchar(NULL);
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	66 d0       	rcall	.+204    	; 0x5a4 <uart_getchar>
 4d8:	80 93 95 00 	sts	0x0095, r24
					check = uart_getchar(NULL);
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	61 d0       	rcall	.+194    	; 0x5a4 <uart_getchar>
 4e2:	80 93 97 00 	sts	0x0097, r24
					if(check == (servoIdentifier | 0x80) ){
 4e6:	e0 91 15 01 	lds	r30, 0x0115
 4ea:	9e 2f       	mov	r25, r30
 4ec:	90 68       	ori	r25, 0x80	; 128
 4ee:	89 17       	cp	r24, r25
 4f0:	61 f4       	brne	.+24     	; 0x50a <main+0x16c>
						servoBuffer[servoIdentifier].timerVal = servoTime.Val;
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	ee 0f       	add	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	eb 59       	subi	r30, 0x9B	; 155
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	80 91 95 00 	lds	r24, 0x0095
 500:	90 91 96 00 	lds	r25, 0x0096
 504:	91 83       	std	Z+1, r25	; 0x01
 506:	80 83       	st	Z, r24
 508:	03 c0       	rjmp	.+6      	; 0x510 <main+0x172>
					}
					else flush();
 50a:	8a d0       	rcall	.+276    	; 0x620 <flush>
 50c:	01 c0       	rjmp	.+2      	; 0x510 <main+0x172>
				}					
			}
			else asm("nop");
 50e:	00 00       	nop
			uart_store((uint8_t)angle);
			uart_store(i | 0x80);
		}
		angle+=200;
		if(angle > 3600) angle = 900;
		while(TCNT1>10)
 510:	8c b5       	in	r24, 0x2c	; 44
 512:	9d b5       	in	r25, 0x2d	; 45
 514:	8b 30       	cpi	r24, 0x0B	; 11
 516:	91 05       	cpc	r25, r1
 518:	60 f6       	brcc	.-104    	; 0x4b2 <main+0x114>
 51a:	58 cf       	rjmp	.-336    	; 0x3cc <main+0x2e>

0000051c <__vector_default>:
	
		}
    }
}

ISR(BADISR_vect){}
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_4>:

ISR(TIMER1_COMPA_vect){
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
	PORTB =	mainBus[0]; 
 53c:	80 91 16 01 	lds	r24, 0x0116
 540:	88 bb       	out	0x18, r24	; 24
	PORTD =	DECODE0;	     
 542:	80 e1       	ldi	r24, 0x10	; 16
 544:	82 bb       	out	0x12, r24	; 18
	PORTB =	mainBus[1]; 
 546:	80 91 17 01 	lds	r24, 0x0117
 54a:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE0;			
 54c:	82 b3       	in	r24, 0x12	; 18
 54e:	80 5f       	subi	r24, 0xF0	; 240
 550:	82 bb       	out	0x12, r24	; 18
	PORTB =	mainBus[2];		
 552:	80 91 18 01 	lds	r24, 0x0118
 556:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE1;		
 558:	82 b3       	in	r24, 0x12	; 18
 55a:	80 5e       	subi	r24, 0xE0	; 224
 55c:	82 bb       	out	0x12, r24	; 18
	PORTD =	0;
 55e:	12 ba       	out	0x12, r1	; 18
}
 560:	8f 91       	pop	r24
 562:	0f 90       	pop	r0
 564:	0f be       	out	0x3f, r0	; 63
 566:	0f 90       	pop	r0
 568:	1f 90       	pop	r1
 56a:	18 95       	reti

0000056c <timer1Init>:
 */ 
#include "Timer.h"


void timer1Init(void){
	TCCR1A = 0;
 56c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x1A; //sets ICR1 as top val reg and sets the prescaler to div8 enables ctc for immediate updates to ocr1x
 56e:	8a e1       	ldi	r24, 0x1A	; 26
 570:	8e bd       	out	0x2e, r24	; 46
	TIMSK = _BV(OCIE1A);
 572:	80 e4       	ldi	r24, 0x40	; 64
 574:	89 bf       	out	0x39, r24	; 57
	ICR1 = 	(F_CPU/(50*8)); //1 timer clock equals 1us period of 20ms ie 20000us	
 576:	80 e3       	ldi	r24, 0x30	; 48
 578:	95 e7       	ldi	r25, 0x75	; 117
 57a:	95 bd       	out	0x25, r25	; 37
 57c:	84 bd       	out	0x24, r24	; 36
	OCR1A = (F_CPU/(50*8));
 57e:	9b bd       	out	0x2b, r25	; 43
 580:	8a bd       	out	0x2a, r24	; 42
 582:	08 95       	ret

00000584 <uartInit>:

#include "uart.h"

void uartInit(void){

UBRRH = 0;//set for baud of 230400... dang fast
 584:	12 b8       	out	0x02, r1	; 2
UBRRL = 2;
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	89 b9       	out	0x09, r24	; 9

UCSRB = _BV(RXCIE) | _BV(RXEN) ;//holding off on tx enable as of right now it may be better to simply receive data with the tx line as a sort of flow control 
 58a:	80 e9       	ldi	r24, 0x90	; 144
 58c:	8a b9       	out	0x0a, r24	; 10

buffer.head = uartBufferBegin;
 58e:	80 e2       	ldi	r24, 0x20	; 32
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	90 93 1d 01 	sts	0x011D, r25
 596:	80 93 1c 01 	sts	0x011C, r24
buffer.tail = uartBufferBegin;
 59a:	90 93 1f 01 	sts	0x011F, r25
 59e:	80 93 1e 01 	sts	0x011E, r24

}
 5a2:	08 95       	ret

000005a4 <uart_getchar>:


int uart_getchar(FILE *stream){
	bytesInBuffer--;
 5a4:	80 91 1b 01 	lds	r24, 0x011B
 5a8:	81 50       	subi	r24, 0x01	; 1
 5aa:	80 93 1b 01 	sts	0x011B, r24
	if (buffer.tail == uartBufferEnd){
 5ae:	e0 91 1e 01 	lds	r30, 0x011E
 5b2:	f0 91 1f 01 	lds	r31, 0x011F
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	ef 34       	cpi	r30, 0x4F	; 79
 5ba:	f8 07       	cpc	r31, r24
 5bc:	19 f4       	brne	.+6      	; 0x5c4 <uart_getchar+0x20>
		uint8_t temp = *buffer.tail;
 5be:	80 81       	ld	r24, Z
		buffer.tail = uartBufferBegin;
 5c0:	bf 97       	sbiw	r30, 0x2f	; 47
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <uart_getchar+0x22>
		return temp;
	}
	else return *buffer.tail++;
 5c4:	81 91       	ld	r24, Z+
 5c6:	f0 93 1f 01 	sts	0x011F, r31
 5ca:	e0 93 1e 01 	sts	0x011E, r30
}
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	08 95       	ret

000005d2 <uart_store>:

void uart_store(unsigned char c){
	bytesInBuffer++;
 5d2:	90 91 1b 01 	lds	r25, 0x011B
 5d6:	9f 5f       	subi	r25, 0xFF	; 255
 5d8:	90 93 1b 01 	sts	0x011B, r25
	if(buffer.head == uartBufferEnd){
 5dc:	e0 91 1c 01 	lds	r30, 0x011C
 5e0:	f0 91 1d 01 	lds	r31, 0x011D
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	ef 34       	cpi	r30, 0x4F	; 79
 5e8:	f9 07       	cpc	r31, r25
 5ea:	19 f4       	brne	.+6      	; 0x5f2 <uart_store+0x20>
		*buffer.head = c;
 5ec:	80 83       	st	Z, r24
		buffer.head = uartBufferBegin;	
 5ee:	bf 97       	sbiw	r30, 0x2f	; 47
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <uart_store+0x22>
	}		
	else *buffer.head++ = c;
 5f2:	81 93       	st	Z+, r24
 5f4:	f0 93 1d 01 	sts	0x011D, r31
 5f8:	e0 93 1c 01 	sts	0x011C, r30
 5fc:	08 95       	ret

000005fe <dataInbuffer>:
//	servoDataIRQ();
}

uint8_t dataInbuffer(void){
	if(buffer.head == buffer.tail) return 0;	//no data to be read
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	40 91 1c 01 	lds	r20, 0x011C
 604:	50 91 1d 01 	lds	r21, 0x011D
 608:	20 91 1e 01 	lds	r18, 0x011E
 60c:	30 91 1f 01 	lds	r19, 0x011F
 610:	42 17       	cp	r20, r18
 612:	53 07       	cpc	r21, r19
 614:	09 f4       	brne	.+2      	; 0x618 <dataInbuffer+0x1a>
 616:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;							//data to be read
}
 618:	08 95       	ret

0000061a <getNumBytesInBuffer>:

uint8_t getNumBytesInBuffer(void){
return bytesInBuffer;
}
 61a:	80 91 1b 01 	lds	r24, 0x011B
 61e:	08 95       	ret

00000620 <flush>:

void flush(void){
	buffer.head = buffer.tail;
 620:	80 91 1e 01 	lds	r24, 0x011E
 624:	90 91 1f 01 	lds	r25, 0x011F
 628:	90 93 1d 01 	sts	0x011D, r25
 62c:	80 93 1c 01 	sts	0x011C, r24
	bytesInBuffer = 0;
 630:	10 92 1b 01 	sts	0x011B, r1
}
 634:	08 95       	ret

00000636 <__vector_7>:

ISR(USART_RX_vect){
 636:	1f 92       	push	r1
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	0f 92       	push	r0
 63e:	11 24       	eor	r1, r1
 640:	2f 93       	push	r18
 642:	3f 93       	push	r19
 644:	4f 93       	push	r20
 646:	5f 93       	push	r21
 648:	6f 93       	push	r22
 64a:	7f 93       	push	r23
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
 650:	af 93       	push	r26
 652:	bf 93       	push	r27
 654:	ef 93       	push	r30
 656:	ff 93       	push	r31
	uart_store(UDR);	
 658:	8c b1       	in	r24, 0x0c	; 12
 65a:	bb df       	rcall	.-138    	; 0x5d2 <uart_store>
}
 65c:	ff 91       	pop	r31
 65e:	ef 91       	pop	r30
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__mulhi3>:
 67e:	55 27       	eor	r21, r21
 680:	00 24       	eor	r0, r0

00000682 <__mulhi3_loop>:
 682:	80 ff       	sbrs	r24, 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <__mulhi3_skip1>
 686:	06 0e       	add	r0, r22
 688:	57 1f       	adc	r21, r23

0000068a <__mulhi3_skip1>:
 68a:	66 0f       	add	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	61 15       	cp	r22, r1
 690:	71 05       	cpc	r23, r1
 692:	21 f0       	breq	.+8      	; 0x69c <__mulhi3_exit>
 694:	96 95       	lsr	r25
 696:	87 95       	ror	r24
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	99 f7       	brne	.-26     	; 0x682 <__mulhi3_loop>

0000069c <__mulhi3_exit>:
 69c:	95 2f       	mov	r25, r21
 69e:	80 2d       	mov	r24, r0
 6a0:	08 95       	ret

000006a2 <_exit>:
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
