
ServoControlATtiny4313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000ee  00800060  00800060  00000612  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000029e  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a82  00000000  00000000  00001083  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040a  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc8  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d8  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e9  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0001a5b3  00000000  00000000  000033f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000181  00000000  00000000  0001d9ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	4d c2       	rjmp	.+1178   	; 0x4a4 <__vector_4>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	a4 c2       	rjmp	.+1352   	; 0x558 <__vector_7>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	11 e0       	ldi	r17, 0x01	; 1
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	ae 34       	cpi	r26, 0x4E	; 78
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	b5 d1       	rcall	.+874    	; 0x3b2 <main>
  48:	a8 c2       	rjmp	.+1360   	; 0x59a <_exit>

0000004a <__bad_interrupt>:
  4a:	21 c2       	rjmp	.+1090   	; 0x48e <__vector_default>

0000004c <setMasks>:
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  4c:	cf 93       	push	r28
  4e:	df 93       	push	r29
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  50:	eb ec       	ldi	r30, 0xCB	; 203
  52:	f0 e0       	ldi	r31, 0x00	; 0
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  58:	21 e0       	ldi	r18, 0x01	; 1
  5a:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
  5c:	6f ef       	ldi	r22, 0xFF	; 255
#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  5e:	a9 01       	movw	r20, r18
  60:	08 2e       	mov	r0, r24
  62:	02 c0       	rjmp	.+4      	; 0x68 <setMasks+0x1c>
  64:	44 0f       	add	r20, r20
  66:	55 1f       	adc	r21, r21
  68:	0a 94       	dec	r0
  6a:	e2 f7       	brpl	.-8      	; 0x64 <setMasks+0x18>
  6c:	40 95       	com	r20
  6e:	40 83       	st	Z, r20
			servos.bus[i].masks[1] = 0xFF;
  70:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i].masks[2] = 0xFF;
  72:	62 83       	std	Z+2, r22	; 0x02
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	33 96       	adiw	r30, 0x03	; 3

#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
  78:	88 30       	cpi	r24, 0x08	; 8
  7a:	91 05       	cpc	r25, r1
  7c:	81 f7       	brne	.-32     	; 0x5e <setMasks+0x12>
  7e:	e3 ee       	ldi	r30, 0xE3	; 227
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  86:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+8].masks[1] = ~(1<<i);
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  8c:	60 83       	st	Z, r22
			servos.bus[i+8].masks[1] = ~(1<<i);
  8e:	a9 01       	movw	r20, r18
  90:	08 2e       	mov	r0, r24
  92:	02 c0       	rjmp	.+4      	; 0x98 <setMasks+0x4c>
  94:	44 0f       	add	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <setMasks+0x48>
  9c:	40 95       	com	r20
  9e:	41 83       	std	Z+1, r20	; 0x01
			servos.bus[i+8].masks[2] = 0xFF;
  a0:	62 83       	std	Z+2, r22	; 0x02
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i].masks[0] = ~(1<<i);
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	91 05       	cpc	r25, r1
  aa:	81 f7       	brne	.-32     	; 0x8c <setMasks+0x40>
  ac:	eb ef       	ldi	r30, 0xFB	; 251
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  b4:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  ba:	60 83       	st	Z, r22
			servos.bus[i+16].masks[1] = 0xFF;
  bc:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i+16].masks[2] = ~(1<<i);
  be:	a9 01       	movw	r20, r18
  c0:	08 2e       	mov	r0, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <setMasks+0x7c>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <setMasks+0x78>
  cc:	40 95       	com	r20
  ce:	42 83       	std	Z+2, r20	; 0x02
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i+8].masks[1] = ~(1<<i);
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	91 05       	cpc	r25, r1
  d8:	81 f7       	brne	.-32     	; 0xba <setMasks+0x6e>
			servos.bus[i+16].masks[0] = 0xFF;
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
		}
		servos.tempBus.masks[0] = 0x0;
  da:	10 92 13 01 	sts	0x0113, r1
		servos.tempBus.masks[1] = 0x0;
  de:	10 92 14 01 	sts	0x0114, r1
		servos.tempBus.masks[2] = 0x0;
  e2:	10 92 15 01 	sts	0x0115, r1
		
		mainBus[0] = 0xFF;
  e6:	60 93 49 01 	sts	0x0149, r22
		mainBus[1] = 0xFF;
  ea:	60 93 4a 01 	sts	0x014A, r22
		mainBus[2] = 0xFF;
  ee:	60 93 4b 01 	sts	0x014B, r22
  f2:	2b ec       	ldi	r18, 0xCB	; 203
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
				servos.bus[i] = servos.tempBus;
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	50 e0       	ldi	r21, 0x00	; 0
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  fe:	e8 2f       	mov	r30, r24
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
 100:	dc 01       	movw	r26, r24
 102:	aa 0f       	add	r26, r26
 104:	bb 1f       	adc	r27, r27
 106:	aa 5e       	subi	r26, 0xEA	; 234
 108:	be 4f       	sbci	r27, 0xFE	; 254
 10a:	6d 91       	ld	r22, X+
 10c:	7c 91       	ld	r23, X
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	61 15       	cp	r22, r1
 112:	71 05       	cpc	r23, r1
 114:	e1 f4       	brne	.+56     	; 0x14e <setMasks+0x102>
				servos.bus[i] = servos.tempBus;
 116:	e9 01       	movw	r28, r18
 118:	a3 e1       	ldi	r26, 0x13	; 19
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	0d 90       	ld	r0, X+
 120:	09 92       	st	Y+, r0
 122:	61 50       	subi	r22, 0x01	; 1
 124:	e1 f7       	brne	.-8      	; 0x11e <setMasks+0xd2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
 126:	e6 95       	lsr	r30
 128:	e6 95       	lsr	r30
 12a:	e6 95       	lsr	r30
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e7 5b       	subi	r30, 0xB7	; 183
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	bc 01       	movw	r22, r24
 134:	67 70       	andi	r22, 0x07	; 7
 136:	70 70       	andi	r23, 0x00	; 0
 138:	da 01       	movw	r26, r20
 13a:	02 c0       	rjmp	.+4      	; 0x140 <setMasks+0xf4>
 13c:	aa 0f       	add	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <setMasks+0xf0>
 144:	bd 01       	movw	r22, r26
 146:	60 95       	com	r22
 148:	70 81       	ld	r23, Z
 14a:	67 23       	and	r22, r23
 14c:	60 83       	st	Z, r22
			}
			asm("nop");				
 14e:	00 00       	nop
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	2d 5f       	subi	r18, 0xFD	; 253
 154:	3f 4f       	sbci	r19, 0xFF	; 255
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
		
		for(i=0;i<24;i++){ 
 156:	88 31       	cpi	r24, 0x18	; 24
 158:	91 05       	cpc	r25, r1
 15a:	89 f6       	brne	.-94     	; 0xfe <setMasks+0xb2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
			}
			asm("nop");				
		}	
			
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <refresh>:

void refresh(void){
 162:	a4 e6       	ldi	r26, 0x64	; 100
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	//refresh all the servos
	for(i=0;i<24;i++)servos.times[i].timerVal = servoBuffer[i].timerVal;
 16a:	2d 91       	ld	r18, X+
 16c:	3d 91       	ld	r19, X+
 16e:	fc 01       	movw	r30, r24
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ea 5e       	subi	r30, 0xEA	; 234
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	31 83       	std	Z+1, r19	; 0x01
 17a:	20 83       	st	Z, r18
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	91 05       	cpc	r25, r1
 182:	99 f7       	brne	.-26     	; 0x16a <refresh+0x8>
	
	//initialize all the pointers
	servoBusPtr = &servos.bus[0].masks[0];
 184:	8b ec       	ldi	r24, 0xCB	; 203
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 63 00 	sts	0x0063, r25
 18c:	80 93 62 00 	sts	0x0062, r24
	servoTimePtr = &servos.times[0].timerVal;
 190:	86 e1       	ldi	r24, 0x16	; 22
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	90 93 4d 01 	sts	0x014D, r25
 198:	80 93 4c 01 	sts	0x014C, r24
}
 19c:	08 95       	ret

0000019e <seedValues>:
  
void seedValues(void){
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 1500*1.5;  //normally 0
 1a2:	2a ec       	ldi	r18, 0xCA	; 202
 1a4:	38 e0       	ldi	r19, 0x08	; 8
 1a6:	fc 01       	movw	r30, r24
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	ea 5e       	subi	r30, 0xEA	; 234
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	31 83       	std	Z+1, r19	; 0x01
 1b2:	20 83       	st	Z, r18
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	88 31       	cpi	r24, 0x18	; 24
 1b8:	91 05       	cpc	r25, r1
 1ba:	a9 f7       	brne	.-22     	; 0x1a6 <seedValues+0x8>
 1bc:	e4 e6       	ldi	r30, 0x64	; 100
 1be:	f0 e0       	ldi	r31, 0x00	; 0
	for(i=0;i<24;i++)servoBuffer[i].timerVal = 1500*1.5;  //normally 0	
 1c0:	8a ec       	ldi	r24, 0xCA	; 202
 1c2:	98 e0       	ldi	r25, 0x08	; 8
 1c4:	81 93       	st	Z+, r24
 1c6:	91 93       	st	Z+, r25
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	e4 39       	cpi	r30, 0x94	; 148
 1cc:	f2 07       	cpc	r31, r18
 1ce:	d1 f7       	brne	.-12     	; 0x1c4 <seedValues+0x26>
}	
 1d0:	08 95       	ret

000001d2 <sort>:
 
void sort(void){
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	52 c0       	rjmp	.+164    	; 0x284 <sort+0xb2>
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 1e0:	ab 01       	movw	r20, r22
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 1500*1.5;  //normally 0
	for(i=0;i<24;i++)servoBuffer[i].timerVal = 1500*1.5;  //normally 0	
}	
 
void sort(void){
 1e2:	ba 01       	movw	r22, r20
 1e4:	6f 5f       	subi	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
 1e8:	db 01       	movw	r26, r22
 1ea:	aa 0f       	add	r26, r26
 1ec:	bb 1f       	adc	r27, r27
 1ee:	aa 5e       	subi	r26, 0xEA	; 234
 1f0:	be 4f       	sbci	r27, 0xFE	; 254
 1f2:	cd 91       	ld	r28, X+
 1f4:	dc 91       	ld	r29, X
 1f6:	da 01       	movw	r26, r20
 1f8:	aa 0f       	add	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	aa 5e       	subi	r26, 0xEA	; 234
 1fe:	be 4f       	sbci	r27, 0xFE	; 254
 200:	4d 91       	ld	r20, X+
 202:	5c 91       	ld	r21, X
 204:	11 97       	sbiw	r26, 0x01	; 1
 206:	c4 17       	cp	r28, r20
 208:	d5 07       	cpc	r29, r21
 20a:	90 f5       	brcc	.+100    	; 0x270 <sort+0x9e>
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 1500*1.5;  //normally 0
	for(i=0;i<24;i++)servoBuffer[i].timerVal = 1500*1.5;  //normally 0	
}	
 
void sort(void){
 20c:	7c 01       	movw	r14, r24
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
 20e:	c3 e1       	ldi	r28, 0x13	; 19
 210:	d1 e0       	ldi	r29, 0x01	; 1
 212:	48 2f       	mov	r20, r24
 214:	59 2f       	mov	r21, r25
 216:	da 01       	movw	r26, r20
 218:	43 e0       	ldi	r20, 0x03	; 3
 21a:	0d 90       	ld	r0, X+
 21c:	09 92       	st	Y+, r0
 21e:	41 50       	subi	r20, 0x01	; 1
 220:	e1 f7       	brne	.-8      	; 0x21a <sort+0x48>
				servos.tempTimes = servos.times[i];
 222:	42 81       	ldd	r20, Z+2	; 0x02
 224:	53 81       	ldd	r21, Z+3	; 0x03
 226:	50 93 47 01 	sts	0x0147, r21
 22a:	40 93 46 01 	sts	0x0146, r20
				
				servos.times[i] = servos.times[i-1];
 22e:	40 81       	ld	r20, Z
 230:	51 81       	ldd	r21, Z+1	; 0x01
 232:	53 83       	std	Z+3, r21	; 0x03
 234:	42 83       	std	Z+2, r20	; 0x02
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 1500*1.5;  //normally 0
	for(i=0;i<24;i++)servoBuffer[i].timerVal = 1500*1.5;  //normally 0	
}	
 
void sort(void){
 236:	89 01       	movw	r16, r18
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
				servos.tempTimes = servos.times[i];
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
 238:	4e 2d       	mov	r20, r14
 23a:	5f 2d       	mov	r21, r15
 23c:	ea 01       	movw	r28, r20
 23e:	42 2f       	mov	r20, r18
 240:	53 2f       	mov	r21, r19
 242:	da 01       	movw	r26, r20
 244:	43 e0       	ldi	r20, 0x03	; 3
 246:	0d 90       	ld	r0, X+
 248:	09 92       	st	Y+, r0
 24a:	41 50       	subi	r20, 0x01	; 1
 24c:	e1 f7       	brne	.-8      	; 0x246 <sort+0x74>
			
				servos.times[i-1] = servos.tempTimes;
 24e:	40 91 46 01 	lds	r20, 0x0146
 252:	50 91 47 01 	lds	r21, 0x0147
 256:	51 83       	std	Z+1, r21	; 0x01
 258:	40 83       	st	Z, r20
				servos.bus[i-1] = servos.tempBus;
 25a:	40 2f       	mov	r20, r16
 25c:	51 2f       	mov	r21, r17
 25e:	ea 01       	movw	r28, r20
 260:	a3 e1       	ldi	r26, 0x13	; 19
 262:	b1 e0       	ldi	r27, 0x01	; 1
 264:	43 e0       	ldi	r20, 0x03	; 3
 266:	0d 90       	ld	r0, X+
 268:	09 92       	st	Y+, r0
 26a:	41 50       	subi	r20, 0x01	; 1
 26c:	e1 f7       	brne	.-8      	; 0x266 <sort+0x94>
			
				ErrorFound = 1;	
 26e:	11 e0       	ldi	r17, 0x01	; 1
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
			
				servos.times[i-1] = servos.tempTimes;
				servos.bus[i-1] = servos.tempBus;
 270:	03 96       	adiw	r24, 0x03	; 3
 272:	2d 5f       	subi	r18, 0xFD	; 253
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	32 96       	adiw	r30, 0x02	; 2
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 278:	67 31       	cpi	r22, 0x17	; 23
 27a:	71 05       	cpc	r23, r1
 27c:	09 f0       	breq	.+2      	; 0x280 <sort+0xae>
 27e:	b0 cf       	rjmp	.-160    	; 0x1e0 <sort+0xe>
	for(i=0;i<24;i++)servoBuffer[i].timerVal = 1500*1.5;  //normally 0	
}	
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
 280:	11 23       	and	r17, r17
 282:	59 f0       	breq	.+22     	; 0x29a <sort+0xc8>
 284:	8e ec       	ldi	r24, 0xCE	; 206
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	9c 01       	movw	r18, r24
 28a:	23 50       	subi	r18, 0x03	; 3
 28c:	30 40       	sbci	r19, 0x00	; 0
 28e:	e6 e1       	ldi	r30, 0x16	; 22
 290:	f1 e0       	ldi	r31, 0x01	; 1
		ErrorFound = 0;
		for(i=1;i<24;i++){
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	a4 cf       	rjmp	.-184    	; 0x1e2 <sort+0x10>
			
				ErrorFound = 1;	
			}				
		}
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	08 95       	ret

000002a8 <postSortMask>:

void postSortMask(void){
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	00 e0       	ldi	r16, 0x00	; 0
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	e0 e0       	ldi	r30, 0x00	; 0
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	1e c0       	rjmp	.+60     	; 0x2fa <postSortMask+0x52>
 2be:	ae 01       	movw	r20, r28
 2c0:	42 0f       	add	r20, r18
 2c2:	53 1f       	adc	r21, r19
 2c4:	40 0f       	add	r20, r16
 2c6:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2c8:	da 01       	movw	r26, r20
 2ca:	13 96       	adiw	r26, 0x03	; 3
 2cc:	7c 91       	ld	r23, X
 2ce:	69 91       	ld	r22, Y+
			}				
		}
	}
}

void postSortMask(void){
 2d0:	ae 01       	movw	r20, r28
 2d2:	42 0f       	add	r20, r18
 2d4:	53 1f       	adc	r21, r19
 2d6:	40 0f       	add	r20, r16
 2d8:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2da:	67 23       	and	r22, r23
 2dc:	da 01       	movw	r26, r20
 2de:	12 96       	adiw	r26, 0x02	; 2
 2e0:	6c 93       	st	X, r22
 2e2:	12 97       	sbiw	r26, 0x02	; 2
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
 2e4:	c8 17       	cp	r28, r24
 2e6:	d9 07       	cpc	r29, r25
 2e8:	51 f7       	brne	.-44     	; 0x2be <postSortMask+0x16>
 2ea:	31 96       	adiw	r30, 0x01	; 1
 2ec:	23 50       	subi	r18, 0x03	; 3
 2ee:	30 40       	sbci	r19, 0x00	; 0
 2f0:	0d 5f       	subi	r16, 0xFD	; 253
 2f2:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
 2f4:	e7 31       	cpi	r30, 0x17	; 23
 2f6:	f1 05       	cpc	r31, r1
 2f8:	71 f0       	breq	.+28     	; 0x316 <postSortMask+0x6e>
			}				
		}
	}
}

void postSortMask(void){
 2fa:	cf 01       	movw	r24, r30
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	3a d1       	rcall	.+628    	; 0x576 <__mulhi3>
 302:	ec 01       	movw	r28, r24
 304:	c5 53       	subi	r28, 0x35	; 53
 306:	df 4f       	sbci	r29, 0xFF	; 255
 308:	88 27       	eor	r24, r24
 30a:	99 27       	eor	r25, r25
 30c:	82 1b       	sub	r24, r18
 30e:	93 0b       	sbc	r25, r19
	uint8_t i,j;
	for(i=0;i<23;i++){
 310:	82 53       	subi	r24, 0x32	; 50
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	d4 cf       	rjmp	.-88     	; 0x2be <postSortMask+0x16>
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
			//servos.bus[i+1].masks[j] &= mainBus[j];
		}			
	}
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <mulitpleServoTimeFix>:



//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
 320:	1f 93       	push	r17
static uint8_t i;
	servos.tempBus = servos.bus[23];
 322:	e3 e1       	ldi	r30, 0x13	; 19
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	df 01       	movw	r26, r30
 328:	13 97       	sbiw	r26, 0x03	; 3
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0d 90       	ld	r0, X+
 32e:	01 92       	st	Z+, r0
 330:	81 50       	subi	r24, 0x01	; 1
 332:	e1 f7       	brne	.-8      	; 0x32c <mulitpleServoTimeFix+0xc>
	for(i=23;i>0;i--){
 334:	87 e1       	ldi	r24, 0x17	; 23
 336:	80 93 60 00 	sts	0x0060, r24
 33a:	2c c0       	rjmp	.+88     	; 0x394 <mulitpleServoTimeFix+0x74>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
 33c:	21 2f       	mov	r18, r17
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	c9 01       	movw	r24, r18
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	fc 01       	movw	r30, r24
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	ea 5e       	subi	r30, 0xEA	; 234
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	60 81       	ld	r22, Z
 350:	71 81       	ldd	r23, Z+1	; 0x01
 352:	f9 01       	movw	r30, r18
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	ea 5e       	subi	r30, 0xEA	; 234
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	40 81       	ld	r20, Z
 35e:	51 81       	ldd	r21, Z+1	; 0x01
 360:	64 17       	cp	r22, r20
 362:	75 07       	cpc	r23, r21
 364:	a1 f4       	brne	.+40     	; 0x38e <mulitpleServoTimeFix+0x6e>
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
 366:	11 82       	std	Z+1, r1	; 0x01
 368:	10 82       	st	Z, r1
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
 36a:	63 e0       	ldi	r22, 0x03	; 3
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	03 d1       	rcall	.+518    	; 0x576 <__mulhi3>
 370:	fc 01       	movw	r30, r24
 372:	e5 53       	subi	r30, 0x35	; 53
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	c9 01       	movw	r24, r18
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	fc d0       	rcall	.+504    	; 0x576 <__mulhi3>
 37e:	dc 01       	movw	r26, r24
 380:	a5 53       	subi	r26, 0x35	; 53
 382:	bf 4f       	sbci	r27, 0xFF	; 255
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	0d 90       	ld	r0, X+
 388:	01 92       	st	Z+, r0
 38a:	81 50       	subi	r24, 0x01	; 1
 38c:	e1 f7       	brne	.-8      	; 0x386 <mulitpleServoTimeFix+0x66>

//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
static uint8_t i;
	servos.tempBus = servos.bus[23];
	for(i=23;i>0;i--){
 38e:	11 50       	subi	r17, 0x01	; 1
 390:	10 93 60 00 	sts	0x0060, r17
 394:	10 91 60 00 	lds	r17, 0x0060
 398:	11 23       	and	r17, r17
 39a:	81 f6       	brne	.-96     	; 0x33c <mulitpleServoTimeFix+0x1c>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
		}			
	}
}	
 39c:	1f 91       	pop	r17
 39e:	08 95       	ret

000003a0 <servoDataIRQ>:


void servoDataIRQ()
{
if(bytesInBuffer < (bufferSize -2)) PORTD ^= 0x02;//this will trigger a PCINT on the xmega
 3a0:	80 91 61 00 	lds	r24, 0x0061
 3a4:	8e 32       	cpi	r24, 0x2E	; 46
 3a6:	20 f4       	brcc	.+8      	; 0x3b0 <servoDataIRQ+0x10>
 3a8:	82 b3       	in	r24, 0x12	; 18
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	89 27       	eor	r24, r25
 3ae:	82 bb       	out	0x12, r24	; 18
 3b0:	08 95       	ret

000003b2 <main>:


int main(void)
{
//	wdt_enable(WDTO_1S);
	bytesInBuffer = 0;
 3b2:	10 92 61 00 	sts	0x0061, r1
	DDRB = 0xFF;//enable all port B pins (servo pins as Outputs)
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE;//enables every pin except the uart receive pin as an output
 3ba:	8e ef       	ldi	r24, 0xFE	; 254
 3bc:	81 bb       	out	0x11, r24	; 17
	PORTD &= 0x0F;
 3be:	82 b3       	in	r24, 0x12	; 18
 3c0:	8f 70       	andi	r24, 0x0F	; 15
 3c2:	82 bb       	out	0x12, r24	; 18
	uartInit();
 3c4:	9c d0       	rcall	.+312    	; 0x4fe <uartInit>
	refresh();
 3c6:	cd de       	rcall	.-614    	; 0x162 <refresh>
	setMasks();
 3c8:	41 de       	rcall	.-894    	; 0x4c <setMasks>
	seedValues();
 3ca:	e9 de       	rcall	.-558    	; 0x19e <seedValues>
	sort();
 3cc:	02 df       	rcall	.-508    	; 0x1d2 <sort>
	postSortMask();
 3ce:	6c df       	rcall	.-296    	; 0x2a8 <postSortMask>
	mulitpleServoTimeFix();
 3d0:	a7 df       	rcall	.-178    	; 0x320 <mulitpleServoTimeFix>
	timer1Init();
 3d2:	89 d0       	rcall	.+274    	; 0x4e6 <timer1Init>
	sei();
 3d4:	78 94       	sei
	while(1)
    {
		do 
		{
			if(TCNT1>(uint16_t)*servoTimePtr){		
 3d6:	4c b5       	in	r20, 0x2c	; 44
 3d8:	5d b5       	in	r21, 0x2d	; 45
 3da:	80 91 4c 01 	lds	r24, 0x014C
 3de:	90 91 4d 01 	lds	r25, 0x014D
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 81       	ld	r18, Z
 3e6:	31 81       	ldd	r19, Z+1	; 0x01
 3e8:	24 17       	cp	r18, r20
 3ea:	35 07       	cpc	r19, r21
 3ec:	c0 f5       	brcc	.+112    	; 0x45e <main+0xac>
 3ee:	a0 91 62 00 	lds	r26, 0x0062
 3f2:	b0 91 63 00 	lds	r27, 0x0063
 3f6:	02 96       	adiw	r24, 0x02	; 2
				if((uint16_t)*servoTimePtr != 0){
 3f8:	21 15       	cp	r18, r1
 3fa:	31 05       	cpc	r19, r1
 3fc:	39 f1       	breq	.+78     	; 0x44c <main+0x9a>
					PORTB =	*servoBusPtr++; 
 3fe:	fd 01       	movw	r30, r26
 400:	21 91       	ld	r18, Z+
 402:	28 bb       	out	0x18, r18	; 24
 404:	f0 93 63 00 	sts	0x0063, r31
 408:	e0 93 62 00 	sts	0x0062, r30
					PORTD +=DECODE0;	     
 40c:	22 b3       	in	r18, 0x12	; 18
 40e:	20 5f       	subi	r18, 0xF0	; 240
 410:	22 bb       	out	0x12, r18	; 18
					PORTB =	*servoBusPtr++; 
 412:	11 96       	adiw	r26, 0x01	; 1
 414:	2c 91       	ld	r18, X
 416:	11 97       	sbiw	r26, 0x01	; 1
 418:	28 bb       	out	0x18, r18	; 24
 41a:	9f 01       	movw	r18, r30
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	30 93 63 00 	sts	0x0063, r19
 424:	20 93 62 00 	sts	0x0062, r18
					PORTD +=DECODE0;			
 428:	42 b3       	in	r20, 0x12	; 18
 42a:	40 5f       	subi	r20, 0xF0	; 240
 42c:	42 bb       	out	0x12, r20	; 18
					PORTB =	*servoBusPtr++;		
 42e:	41 81       	ldd	r20, Z+1	; 0x01
 430:	48 bb       	out	0x18, r20	; 24
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	3f 4f       	sbci	r19, 0xFF	; 255
 436:	30 93 63 00 	sts	0x0063, r19
 43a:	20 93 62 00 	sts	0x0062, r18
					PORTD +=DECODE1;		
 43e:	22 b3       	in	r18, 0x12	; 18
 440:	20 5e       	subi	r18, 0xE0	; 224
 442:	22 bb       	out	0x12, r18	; 18
					PORTD &= 0x0F;
 444:	22 b3       	in	r18, 0x12	; 18
 446:	2f 70       	andi	r18, 0x0F	; 15
 448:	22 bb       	out	0x12, r18	; 18
 44a:	05 c0       	rjmp	.+10     	; 0x456 <main+0xa4>
					servoTimePtr++;
				}				
				else{
					servoBusPtr += 3;
 44c:	13 96       	adiw	r26, 0x03	; 3
 44e:	b0 93 63 00 	sts	0x0063, r27
 452:	a0 93 62 00 	sts	0x0062, r26
					servoTimePtr++;
 456:	90 93 4d 01 	sts	0x014D, r25
 45a:	80 93 4c 01 	sts	0x014C, r24
				}
			}					
		} while (servoTimePtr <= servoTimesEnd); //servoTimePtr <= servoTimesEnd &&
 45e:	80 91 4c 01 	lds	r24, 0x014C
 462:	90 91 4d 01 	lds	r25, 0x014D
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	84 34       	cpi	r24, 0x44	; 68
 46a:	9f 07       	cpc	r25, r31
 46c:	09 f0       	breq	.+2      	; 0x470 <main+0xbe>
 46e:	08 f4       	brcc	.+2      	; 0x472 <main+0xc0>
 470:	b2 cf       	rjmp	.-156    	; 0x3d6 <main+0x24>
		refresh();
 472:	77 de       	rcall	.-786    	; 0x162 <refresh>
		setMasks();
 474:	eb dd       	rcall	.-1066   	; 0x4c <setMasks>
		sort();
 476:	ad de       	rcall	.-678    	; 0x1d2 <sort>
		postSortMask();
 478:	17 df       	rcall	.-466    	; 0x2a8 <postSortMask>
		mulitpleServoTimeFix();
 47a:	52 df       	rcall	.-348    	; 0x320 <mulitpleServoTimeFix>
		UCSRB |=  _BV(RXCIE);	//enable the recieve interrupt on the uart	
 47c:	57 9a       	sbi	0x0a, 7	; 10
		servoDataIRQ();	//sends an interrupt request to the Xmega	
 47e:	90 df       	rcall	.-224    	; 0x3a0 <servoDataIRQ>
				
		
		while(TCNT1>200)
 480:	8c b5       	in	r24, 0x2c	; 44
 482:	9d b5       	in	r25, 0x2d	; 45
 484:	89 3c       	cpi	r24, 0xC9	; 201
 486:	91 05       	cpc	r25, r1
 488:	d8 f7       	brcc	.-10     	; 0x480 <main+0xce>
					}
					else flush(); //this kills stuff				
				}					
			}*/
		}
		asm("nop");
 48a:	00 00       	nop
 48c:	a4 cf       	rjmp	.-184    	; 0x3d6 <main+0x24>

0000048e <__vector_default>:
    }
}

ISR(BADISR_vect){
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
	asm("nop");
 498:	00 00       	nop
}
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__vector_4>:

ISR(TIMER1_COMPA_vect){
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
	cli();
 4b2:	f8 94       	cli
	PORTB =	0xFF;//mainBus[0]; 
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE0;	     
 4b8:	92 b3       	in	r25, 0x12	; 18
 4ba:	90 5f       	subi	r25, 0xF0	; 240
 4bc:	92 bb       	out	0x12, r25	; 18
	PORTB =	0xFF;//mainBus[1]; 
 4be:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE0;			
 4c0:	92 b3       	in	r25, 0x12	; 18
 4c2:	90 5f       	subi	r25, 0xF0	; 240
 4c4:	92 bb       	out	0x12, r25	; 18
	PORTB =	0xFF;//mainBus[2];		
 4c6:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE1;		
 4c8:	82 b3       	in	r24, 0x12	; 18
 4ca:	80 5e       	subi	r24, 0xE0	; 224
 4cc:	82 bb       	out	0x12, r24	; 18
	PORTD &= 0x0F;
 4ce:	82 b3       	in	r24, 0x12	; 18
 4d0:	8f 70       	andi	r24, 0x0F	; 15
 4d2:	82 bb       	out	0x12, r24	; 18
	UCSRB &=  ~_BV(RXCIE);//disable RX interrupt so there are no interruptions to the time critical servo code.
 4d4:	57 98       	cbi	0x0a, 7	; 10
	sei();
 4d6:	78 94       	sei
}
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <timer1Init>:
 */ 
#include "Timer.h"


void timer1Init(void){
	TCCR1A = 0;
 4e6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x1A; //sets ICR1 as top val reg and sets the prescaler to div8 enables ctc for immediate updates to ocr1x
 4e8:	8a e1       	ldi	r24, 0x1A	; 26
 4ea:	8e bd       	out	0x2e, r24	; 46
	TIMSK = _BV(OCIE1A);
 4ec:	80 e4       	ldi	r24, 0x40	; 64
 4ee:	89 bf       	out	0x39, r24	; 57
	ICR1 = 	(F_CPU/(50*8)); //1 timer clock equals 1us period of 20ms ie 20000us	
 4f0:	80 e3       	ldi	r24, 0x30	; 48
 4f2:	95 e7       	ldi	r25, 0x75	; 117
 4f4:	95 bd       	out	0x25, r25	; 37
 4f6:	84 bd       	out	0x24, r24	; 36
	OCR1A = (F_CPU/(50*8));
 4f8:	9b bd       	out	0x2b, r25	; 43
 4fa:	8a bd       	out	0x2a, r24	; 42
 4fc:	08 95       	ret

000004fe <uartInit>:

#include "uart.h"

void uartInit(void){

UBRRH = 0;//5 = 125000, 12 = 57600
 4fe:	12 b8       	out	0x02, r1	; 2
UBRRL = 12;
 500:	8c e0       	ldi	r24, 0x0C	; 12
 502:	89 b9       	out	0x09, r24	; 9

UCSRB	|= _BV(RXEN) ;//holding off on tx enable as of right now it may be better to simply receive data with the tx line as a sort of flow control 
 504:	54 9a       	sbi	0x0a, 4	; 10

buffer.head = uartBufferBegin;
 506:	8b e9       	ldi	r24, 0x9B	; 155
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 98 00 	sts	0x0098, r25
 50e:	80 93 97 00 	sts	0x0097, r24
buffer.tail = uartBufferBegin;
 512:	90 93 9a 00 	sts	0x009A, r25
 516:	80 93 99 00 	sts	0x0099, r24

}
 51a:	08 95       	ret

0000051c <uart_getchar>:
		uint8_t temp = *buffer.tail;
		buffer.tail = uartBufferBegin;
		return temp;
	}
	else return *buffer.tail++;*/
}
 51c:	08 95       	ret

0000051e <uart_store>:
		*buffer.head = c;
		buffer.head = uartBufferBegin;	
	}		
	else *buffer.head++ = c;*/
//	servoDataIRQ();
}
 51e:	08 95       	ret

00000520 <dataInbuffer>:

uint8_t dataInbuffer(void){
	if(buffer.head == buffer.tail) return 0;	//no data to be read
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	40 91 97 00 	lds	r20, 0x0097
 526:	50 91 98 00 	lds	r21, 0x0098
 52a:	20 91 99 00 	lds	r18, 0x0099
 52e:	30 91 9a 00 	lds	r19, 0x009A
 532:	42 17       	cp	r20, r18
 534:	53 07       	cpc	r21, r19
 536:	09 f4       	brne	.+2      	; 0x53a <dataInbuffer+0x1a>
 538:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;							//data to be read
}
 53a:	08 95       	ret

0000053c <getNumBytesInBuffer>:

uint8_t getNumBytesInBuffer(void){
return bytesInBuffer;
}
 53c:	80 91 61 00 	lds	r24, 0x0061
 540:	08 95       	ret

00000542 <flush>:

void flush(void){
	buffer.head = buffer.tail;
 542:	80 91 99 00 	lds	r24, 0x0099
 546:	90 91 9a 00 	lds	r25, 0x009A
 54a:	90 93 98 00 	sts	0x0098, r25
 54e:	80 93 97 00 	sts	0x0097, r24
	bytesInBuffer = 0;
 552:	10 92 61 00 	sts	0x0061, r1
}
 556:	08 95       	ret

00000558 <__vector_7>:

ISR(USART_RX_vect){
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	8f 93       	push	r24
	cli();
 564:	f8 94       	cli
	uart_store(UDR);
 566:	8c b1       	in	r24, 0x0c	; 12
	sei();	
 568:	78 94       	sei
}
 56a:	8f 91       	pop	r24
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__mulhi3>:
 576:	55 27       	eor	r21, r21
 578:	00 24       	eor	r0, r0

0000057a <__mulhi3_loop>:
 57a:	80 ff       	sbrs	r24, 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <__mulhi3_skip1>
 57e:	06 0e       	add	r0, r22
 580:	57 1f       	adc	r21, r23

00000582 <__mulhi3_skip1>:
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	61 15       	cp	r22, r1
 588:	71 05       	cpc	r23, r1
 58a:	21 f0       	breq	.+8      	; 0x594 <__mulhi3_exit>
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	99 f7       	brne	.-26     	; 0x57a <__mulhi3_loop>

00000594 <__mulhi3_exit>:
 594:	95 2f       	mov	r25, r21
 596:	80 2d       	mov	r24, r0
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
