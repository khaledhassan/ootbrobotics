
ServoControlATtiny4313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000e6  00800060  00800060  00000962  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000010b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000023a  00000000  00000000  00001135  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a13  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000419  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e7b  00000000  00000000  0000219b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00003018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ae  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00019050  00000000  00000000  00003426  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000153  00000000  00000000  0001c476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	5f c3       	rjmp	.+1726   	; 0x6c8 <__vector_4>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	33 c3       	rjmp	.+1638   	; 0x676 <__vector_7>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	11 e0       	ldi	r17, 0x01	; 1
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a6 34       	cpi	r26, 0x46	; 70
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	63 d2       	rcall	.+1222   	; 0x50e <main>
  48:	50 c4       	rjmp	.+2208   	; 0x8ea <_exit>

0000004a <__bad_interrupt>:
  4a:	05 c3       	rjmp	.+1546   	; 0x656 <__vector_default>

0000004c <setMasks>:
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  4c:	df 93       	push	r29
  4e:	cf 93       	push	r28
  50:	0f 92       	push	r0
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
  56:	19 82       	std	Y+1, r1	; 0x01
  58:	35 c0       	rjmp	.+106    	; 0xc4 <setMasks+0x78>
			servos.bus[i].masks[0] = ~(0x80>>i);
  5a:	89 81       	ldd	r24, Y+1	; 0x01
  5c:	28 2f       	mov	r18, r24
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	48 2f       	mov	r20, r24
  64:	50 e0       	ldi	r21, 0x00	; 0
  66:	80 e8       	ldi	r24, 0x80	; 128
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <setMasks+0x24>
  6c:	95 95       	asr	r25
  6e:	87 95       	ror	r24
  70:	4a 95       	dec	r20
  72:	e2 f7       	brpl	.-8      	; 0x6c <setMasks+0x20>
  74:	48 2f       	mov	r20, r24
  76:	40 95       	com	r20
  78:	c9 01       	movw	r24, r18
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	82 0f       	add	r24, r18
  80:	93 1f       	adc	r25, r19
  82:	8b 56       	subi	r24, 0x6B	; 107
  84:	9f 4f       	sbci	r25, 0xFF	; 255
  86:	fc 01       	movw	r30, r24
  88:	40 83       	st	Z, r20
			servos.bus[i].masks[1] = 0xFF;
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	28 2f       	mov	r18, r24
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	c9 01       	movw	r24, r18
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	82 0f       	add	r24, r18
  98:	93 1f       	adc	r25, r19
  9a:	8a 56       	subi	r24, 0x6A	; 106
  9c:	9f 4f       	sbci	r25, 0xFF	; 255
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
			servos.bus[i].masks[2] = 0xFF;
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	c9 01       	movw	r24, r18
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	82 0f       	add	r24, r18
  b2:	93 1f       	adc	r25, r19
  b4:	89 56       	subi	r24, 0x69	; 105
  b6:	9f 4f       	sbci	r25, 0xFF	; 255
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18

#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	88 30       	cpi	r24, 0x08	; 8
  c8:	40 f2       	brcs	.-112    	; 0x5a <setMasks+0xe>
			servos.bus[i].masks[0] = ~(0x80>>i);
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
  ca:	19 82       	std	Y+1, r1	; 0x01
  cc:	3e c0       	rjmp	.+124    	; 0x14a <setMasks+0xfe>
			servos.bus[i+8].masks[0] = 0xFF;
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9c 01       	movw	r18, r24
  d6:	28 5f       	subi	r18, 0xF8	; 248
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	c9 01       	movw	r24, r18
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	82 0f       	add	r24, r18
  e2:	93 1f       	adc	r25, r19
  e4:	8b 56       	subi	r24, 0x6B	; 107
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
			servos.bus[i+8].masks[1] = ~(0x80>>i);
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9c 01       	movw	r18, r24
  f6:	28 5f       	subi	r18, 0xF8	; 248
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	48 2f       	mov	r20, r24
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <setMasks+0xbe>
 106:	95 95       	asr	r25
 108:	87 95       	ror	r24
 10a:	4a 95       	dec	r20
 10c:	e2 f7       	brpl	.-8      	; 0x106 <setMasks+0xba>
 10e:	48 2f       	mov	r20, r24
 110:	40 95       	com	r20
 112:	c9 01       	movw	r24, r18
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	82 0f       	add	r24, r18
 11a:	93 1f       	adc	r25, r19
 11c:	8a 56       	subi	r24, 0x6A	; 106
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
 120:	fc 01       	movw	r30, r24
 122:	40 83       	st	Z, r20
			servos.bus[i+8].masks[2] = 0xFF;
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	9c 01       	movw	r18, r24
 12c:	28 5f       	subi	r18, 0xF8	; 248
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	c9 01       	movw	r24, r18
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	82 0f       	add	r24, r18
 138:	93 1f       	adc	r25, r19
 13a:	89 56       	subi	r24, 0x69	; 105
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
			servos.bus[i].masks[0] = ~(0x80>>i);
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	89 83       	std	Y+1, r24	; 0x01
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	08 f4       	brcc	.+2      	; 0x152 <setMasks+0x106>
 150:	be cf       	rjmp	.-132    	; 0xce <setMasks+0x82>
			servos.bus[i+8].masks[1] = ~(0x80>>i);
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
 152:	19 82       	std	Y+1, r1	; 0x01
 154:	3e c0       	rjmp	.+124    	; 0x1d2 <__stack+0x73>
			servos.bus[i+16].masks[0] = 0xFF;
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	9c 01       	movw	r18, r24
 15e:	20 5f       	subi	r18, 0xF0	; 240
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	c9 01       	movw	r24, r18
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
 16c:	8b 56       	subi	r24, 0x6B	; 107
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
			servos.bus[i+16].masks[1] = 0xFF;
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	9c 01       	movw	r18, r24
 17e:	20 5f       	subi	r18, 0xF0	; 240
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	c9 01       	movw	r24, r18
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	8a 56       	subi	r24, 0x6A	; 106
 18e:	9f 4f       	sbci	r25, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
			servos.bus[i+16].masks[2] = ~(0x80>>i);
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	88 2f       	mov	r24, r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	9c 01       	movw	r18, r24
 19e:	20 5f       	subi	r18, 0xF0	; 240
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	48 2f       	mov	r20, r24
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <__stack+0x53>
 1ae:	95 95       	asr	r25
 1b0:	87 95       	ror	r24
 1b2:	4a 95       	dec	r20
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <__stack+0x4f>
 1b6:	48 2f       	mov	r20, r24
 1b8:	40 95       	com	r20
 1ba:	c9 01       	movw	r24, r18
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	82 0f       	add	r24, r18
 1c2:	93 1f       	adc	r25, r19
 1c4:	89 56       	subi	r24, 0x69	; 105
 1c6:	9f 4f       	sbci	r25, 0xFF	; 255
 1c8:	fc 01       	movw	r30, r24
 1ca:	40 83       	st	Z, r20
			servos.bus[i+8].masks[1] = ~(0x80>>i);
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	88 30       	cpi	r24, 0x08	; 8
 1d6:	08 f4       	brcc	.+2      	; 0x1da <__stack+0x7b>
 1d8:	be cf       	rjmp	.-132    	; 0x156 <setMasks+0x10a>
			servos.bus[i+16].masks[0] = 0xFF;
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(0x80>>i);
		}
}
 1da:	0f 90       	pop	r0
 1dc:	cf 91       	pop	r28
 1de:	df 91       	pop	r29
 1e0:	08 95       	ret

000001e2 <refresh>:

void refresh(void){
 1e2:	df 93       	push	r29
 1e4:	cf 93       	push	r28
 1e6:	0f 92       	push	r0
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	//refresh all the servos
	for(i=0;i<24;i++)servos.times[i].timerVal = servoBuffer[i].timerVal;
 1ec:	19 82       	std	Y+1, r1	; 0x01
 1ee:	17 c0       	rjmp	.+46     	; 0x21e <refresh+0x3c>
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	88 2f       	mov	r24, r24
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	29 81       	ldd	r18, Y+1	; 0x01
 1f8:	22 2f       	mov	r18, r18
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	2d 59       	subi	r18, 0x9D	; 157
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	31 81       	ldd	r19, Z+1	; 0x01
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	80 52       	subi	r24, 0x20	; 32
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	fc 01       	movw	r30, r24
 214:	31 83       	std	Z+1, r19	; 0x01
 216:	20 83       	st	Z, r18
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	89 83       	std	Y+1, r24	; 0x01
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	88 31       	cpi	r24, 0x18	; 24
 222:	30 f3       	brcs	.-52     	; 0x1f0 <refresh+0xe>
	currentServo = 0;
 224:	10 92 62 00 	sts	0x0062, r1
	
	//initialize all the pointers
	servoBusPtr = &servos.bus[0].masks[0];
 228:	85 e9       	ldi	r24, 0x95	; 149
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 61 00 	sts	0x0061, r25
 230:	80 93 60 00 	sts	0x0060, r24
	servoTimePtr = &servos.times[0].timerVal;
 234:	80 ee       	ldi	r24, 0xE0	; 224
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 13 01 	sts	0x0113, r25
 23c:	80 93 12 01 	sts	0x0112, r24
	servoBufferPtr = &servoBuffer[0].timerVal;
 240:	83 e6       	ldi	r24, 0x63	; 99
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 94 00 	sts	0x0094, r25
 248:	80 93 93 00 	sts	0x0093, r24
}
 24c:	0f 90       	pop	r0
 24e:	cf 91       	pop	r28
 250:	df 91       	pop	r29
 252:	08 95       	ret

00000254 <seedValues>:
  
void seedValues(void){
 254:	df 93       	push	r29
 256:	cf 93       	push	r28
 258:	0f 92       	push	r0
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = (uint16_t)((23-i)*15 + 900);  
 25e:	19 82       	std	Y+1, r1	; 0x01
 260:	1f c0       	rjmp	.+62     	; 0x2a0 <seedValues+0x4c>
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	48 2f       	mov	r20, r24
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	88 2f       	mov	r24, r24
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 01       	movw	r18, r24
 270:	82 95       	swap	r24
 272:	92 95       	swap	r25
 274:	90 7f       	andi	r25, 0xF0	; 240
 276:	98 27       	eor	r25, r24
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	98 27       	eor	r25, r24
 27c:	b9 01       	movw	r22, r18
 27e:	68 1b       	sub	r22, r24
 280:	79 0b       	sbc	r23, r25
 282:	cb 01       	movw	r24, r22
 284:	83 52       	subi	r24, 0x23	; 35
 286:	9b 4f       	sbci	r25, 0xFB	; 251
 288:	9c 01       	movw	r18, r24
 28a:	ca 01       	movw	r24, r20
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	80 52       	subi	r24, 0x20	; 32
 292:	9f 4f       	sbci	r25, 0xFF	; 255
 294:	fc 01       	movw	r30, r24
 296:	31 83       	std	Z+1, r19	; 0x01
 298:	20 83       	st	Z, r18
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	89 83       	std	Y+1, r24	; 0x01
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	88 31       	cpi	r24, 0x18	; 24
 2a4:	f0 f2       	brcs	.-68     	; 0x262 <seedValues+0xe>
}	
 2a6:	0f 90       	pop	r0
 2a8:	cf 91       	pop	r28
 2aa:	df 91       	pop	r29
 2ac:	08 95       	ret

000002ae <sort>:
 
void sort(void){
 2ae:	df 93       	push	r29
 2b0:	cf 93       	push	r28
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <sort+0x6>
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t i,ErrorFound = 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	8a 83       	std	Y+2, r24	; 0x02
	while(ErrorFound){
 2bc:	b0 c0       	rjmp	.+352    	; 0x41e <sort+0x170>
		ErrorFound = 0;
 2be:	1a 82       	std	Y+2, r1	; 0x02
		for(i=1;i<24;i++){
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	a8 c0       	rjmp	.+336    	; 0x416 <sort+0x168>
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	88 2f       	mov	r24, r24
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	80 52       	subi	r24, 0x20	; 32
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 81       	ld	r18, Z
 2d8:	31 81       	ldd	r19, Z+1	; 0x01
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	80 52       	subi	r24, 0x20	; 32
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	fc 01       	movw	r30, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	91 81       	ldd	r25, Z+1	; 0x01
 2f0:	28 17       	cp	r18, r24
 2f2:	39 07       	cpc	r19, r25
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <sort+0x4a>
 2f6:	8c c0       	rjmp	.+280    	; 0x410 <sort+0x162>
				servos.tempBus = servos.bus[i];
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	c9 01       	movw	r24, r18
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	82 0f       	add	r24, r18
 306:	93 1f       	adc	r25, r19
 308:	9c 01       	movw	r18, r24
 30a:	2b 56       	subi	r18, 0x6B	; 107
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	8d ed       	ldi	r24, 0xDD	; 221
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	43 e0       	ldi	r20, 0x03	; 3
 314:	f9 01       	movw	r30, r18
 316:	00 80       	ld	r0, Z
 318:	2f 5f       	subi	r18, 0xFF	; 255
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	fc 01       	movw	r30, r24
 31e:	00 82       	st	Z, r0
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	41 50       	subi	r20, 0x01	; 1
 324:	44 23       	and	r20, r20
 326:	b1 f7       	brne	.-20     	; 0x314 <sort+0x66>
				servos.tempTimes = servos.times[i];
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	88 2f       	mov	r24, r24
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	80 52       	subi	r24, 0x20	; 32
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	fc 01       	movw	r30, r24
 338:	80 81       	ld	r24, Z
 33a:	91 81       	ldd	r25, Z+1	; 0x01
 33c:	90 93 11 01 	sts	0x0111, r25
 340:	80 93 10 01 	sts	0x0110, r24
				
				servos.times[i] = servos.times[i-1];
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 2f       	mov	r24, r24
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	29 81       	ldd	r18, Y+1	; 0x01
 34c:	22 2f       	mov	r18, r18
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	21 50       	subi	r18, 0x01	; 1
 352:	30 40       	sbci	r19, 0x00	; 0
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	80 52       	subi	r24, 0x20	; 32
 35a:	9f 4f       	sbci	r25, 0xFF	; 255
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	20 52       	subi	r18, 0x20	; 32
 362:	3f 4f       	sbci	r19, 0xFF	; 255
 364:	f9 01       	movw	r30, r18
 366:	20 81       	ld	r18, Z
 368:	31 81       	ldd	r19, Z+1	; 0x01
 36a:	fc 01       	movw	r30, r24
 36c:	31 83       	std	Z+1, r19	; 0x01
 36e:	20 83       	st	Z, r18
				servos.bus[i] = servos.bus[i-1];
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	48 2f       	mov	r20, r24
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	88 2f       	mov	r24, r24
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	9c 01       	movw	r18, r24
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	30 40       	sbci	r19, 0x00	; 0
 382:	ca 01       	movw	r24, r20
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	84 0f       	add	r24, r20
 38a:	95 1f       	adc	r25, r21
 38c:	ac 01       	movw	r20, r24
 38e:	4b 56       	subi	r20, 0x6B	; 107
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	c9 01       	movw	r24, r18
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	82 0f       	add	r24, r18
 39a:	93 1f       	adc	r25, r19
 39c:	9c 01       	movw	r18, r24
 39e:	2b 56       	subi	r18, 0x6B	; 107
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 3a2:	ca 01       	movw	r24, r20
 3a4:	43 e0       	ldi	r20, 0x03	; 3
 3a6:	f9 01       	movw	r30, r18
 3a8:	00 80       	ld	r0, Z
 3aa:	2f 5f       	subi	r18, 0xFF	; 255
 3ac:	3f 4f       	sbci	r19, 0xFF	; 255
 3ae:	fc 01       	movw	r30, r24
 3b0:	00 82       	st	Z, r0
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	41 50       	subi	r20, 0x01	; 1
 3b6:	44 23       	and	r20, r20
 3b8:	b1 f7       	brne	.-20     	; 0x3a6 <sort+0xf8>
			
				servos.times[i-1] = servos.tempTimes;
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	80 52       	subi	r24, 0x20	; 32
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	20 91 10 01 	lds	r18, 0x0110
 3ce:	30 91 11 01 	lds	r19, 0x0111
 3d2:	fc 01       	movw	r30, r24
 3d4:	31 83       	std	Z+1, r19	; 0x01
 3d6:	20 83       	st	Z, r18
				servos.bus[i-1] = servos.tempBus;
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	88 2f       	mov	r24, r24
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	9c 01       	movw	r18, r24
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	30 40       	sbci	r19, 0x00	; 0
 3e4:	c9 01       	movw	r24, r18
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	82 0f       	add	r24, r18
 3ec:	93 1f       	adc	r25, r19
 3ee:	8b 56       	subi	r24, 0x6B	; 107
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	2d ed       	ldi	r18, 0xDD	; 221
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	43 e0       	ldi	r20, 0x03	; 3
 3f8:	f9 01       	movw	r30, r18
 3fa:	00 80       	ld	r0, Z
 3fc:	2f 5f       	subi	r18, 0xFF	; 255
 3fe:	3f 4f       	sbci	r19, 0xFF	; 255
 400:	fc 01       	movw	r30, r24
 402:	00 82       	st	Z, r0
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	41 50       	subi	r20, 0x01	; 1
 408:	44 23       	and	r20, r20
 40a:	b1 f7       	brne	.-20     	; 0x3f8 <sort+0x14a>
			
				ErrorFound = 1;	
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	8a 83       	std	Y+2, r24	; 0x02
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	88 31       	cpi	r24, 0x18	; 24
 41a:	08 f4       	brcc	.+2      	; 0x41e <sort+0x170>
 41c:	54 cf       	rjmp	.-344    	; 0x2c6 <sort+0x18>
	for(i=0;i<24;i++)servos.times[i].timerVal = (uint16_t)((23-i)*15 + 900);  
}	
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	88 23       	and	r24, r24
 422:	09 f0       	breq	.+2      	; 0x426 <sort+0x178>
 424:	4c cf       	rjmp	.-360    	; 0x2be <sort+0x10>
			
				ErrorFound = 1;	
			}				
		}
	}
}
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	cf 91       	pop	r28
 42c:	df 91       	pop	r29
 42e:	08 95       	ret

00000430 <postSortMask>:

void postSortMask(void){
 430:	df 93       	push	r29
 432:	cf 93       	push	r28
 434:	00 d0       	rcall	.+0      	; 0x436 <postSortMask+0x6>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
	uint8_t i,j;
	for(i=0;i<23;i++){
 43a:	19 82       	std	Y+1, r1	; 0x01
 43c:	47 c0       	rjmp	.+142    	; 0x4cc <postSortMask+0x9c>
		for(j=0;j<3;j++)servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 43e:	1a 82       	std	Y+2, r1	; 0x02
 440:	3e c0       	rjmp	.+124    	; 0x4be <postSortMask+0x8e>
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	88 2f       	mov	r24, r24
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	9c 01       	movw	r18, r24
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	68 2f       	mov	r22, r24
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	ac 01       	movw	r20, r24
 45c:	4f 5f       	subi	r20, 0xFF	; 255
 45e:	5f 4f       	sbci	r21, 0xFF	; 255
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	e8 2f       	mov	r30, r24
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ca 01       	movw	r24, r20
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	84 0f       	add	r24, r20
 46e:	95 1f       	adc	r25, r21
 470:	8e 0f       	add	r24, r30
 472:	9f 1f       	adc	r25, r31
 474:	8b 56       	subi	r24, 0x6B	; 107
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	fc 01       	movw	r30, r24
 47a:	a0 81       	ld	r26, Z
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	48 2f       	mov	r20, r24
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	e8 2f       	mov	r30, r24
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	ca 01       	movw	r24, r20
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	84 0f       	add	r24, r20
 490:	95 1f       	adc	r25, r21
 492:	8e 0f       	add	r24, r30
 494:	9f 1f       	adc	r25, r31
 496:	8b 56       	subi	r24, 0x6B	; 107
 498:	9f 4f       	sbci	r25, 0xFF	; 255
 49a:	fc 01       	movw	r30, r24
 49c:	80 81       	ld	r24, Z
 49e:	4a 2f       	mov	r20, r26
 4a0:	48 23       	and	r20, r24
 4a2:	c9 01       	movw	r24, r18
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	82 0f       	add	r24, r18
 4aa:	93 1f       	adc	r25, r19
 4ac:	86 0f       	add	r24, r22
 4ae:	97 1f       	adc	r25, r23
 4b0:	8b 56       	subi	r24, 0x6B	; 107
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	fc 01       	movw	r30, r24
 4b6:	40 83       	st	Z, r20
 4b8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ba:	8f 5f       	subi	r24, 0xFF	; 255
 4bc:	8a 83       	std	Y+2, r24	; 0x02
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	83 30       	cpi	r24, 0x03	; 3
 4c2:	08 f4       	brcc	.+2      	; 0x4c6 <postSortMask+0x96>
 4c4:	be cf       	rjmp	.-132    	; 0x442 <postSortMask+0x12>
	}
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	89 83       	std	Y+1, r24	; 0x01
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	87 31       	cpi	r24, 0x17	; 23
 4d0:	08 f4       	brcc	.+2      	; 0x4d4 <postSortMask+0xa4>
 4d2:	b5 cf       	rjmp	.-150    	; 0x43e <postSortMask+0xe>
		for(j=0;j<3;j++)servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
	}
}
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	cf 91       	pop	r28
 4da:	df 91       	pop	r29
 4dc:	08 95       	ret

000004de <seedTimerCompares>:

void seedTimerCompares(void){
 4de:	df 93       	push	r29
 4e0:	cf 93       	push	r28
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
	OCR1A = (uint16_t)*servoTimePtr++;
 4e6:	2a e4       	ldi	r18, 0x4A	; 74
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	80 91 12 01 	lds	r24, 0x0112
 4ee:	90 91 13 01 	lds	r25, 0x0113
 4f2:	fc 01       	movw	r30, r24
 4f4:	40 81       	ld	r20, Z
 4f6:	51 81       	ldd	r21, Z+1	; 0x01
 4f8:	f9 01       	movw	r30, r18
 4fa:	51 83       	std	Z+1, r21	; 0x01
 4fc:	40 83       	st	Z, r20
 4fe:	02 96       	adiw	r24, 0x02	; 2
 500:	90 93 13 01 	sts	0x0113, r25
 504:	80 93 12 01 	sts	0x0112, r24
 508:	cf 91       	pop	r28
 50a:	df 91       	pop	r29
 50c:	08 95       	ret

0000050e <main>:

uint8_t uartGetC(void);


int main(void)
{
 50e:	df 93       	push	r29
 510:	cf 93       	push	r28
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
	
	DDRB = 0xFF;//enable all port B pins (servo pins as Outputs)
 516:	87 e3       	ldi	r24, 0x37	; 55
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
	DDRD = 0xFE;//enables every pin except the uart receive pin as an output
 520:	81 e3       	ldi	r24, 0x31	; 49
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	2e ef       	ldi	r18, 0xFE	; 254
 526:	fc 01       	movw	r30, r24
 528:	20 83       	st	Z, r18
	PORTD = 0;
 52a:	82 e3       	ldi	r24, 0x32	; 50
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc 01       	movw	r30, r24
 530:	10 82       	st	Z, r1
	uartInit();
 532:	20 d1       	rcall	.+576    	; 0x774 <uartInit>
	refresh();
 534:	56 de       	rcall	.-852    	; 0x1e2 <refresh>
	setMasks();
 536:	8a dd       	rcall	.-1260   	; 0x4c <setMasks>
	seedValues();
 538:	8d de       	rcall	.-742    	; 0x254 <seedValues>
	sort();
 53a:	b9 de       	rcall	.-654    	; 0x2ae <sort>
	postSortMask();
 53c:	79 df       	rcall	.-270    	; 0x430 <postSortMask>
	timer1Init();
 53e:	f7 d0       	rcall	.+494    	; 0x72e <timer1Init>
	sei();
 540:	78 94       	sei
	while(1)
    {
		
		do 
		{
			if(TCNT1>(uint16_t)*servoTimePtr){
 542:	8c e4       	ldi	r24, 0x4C	; 76
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	20 81       	ld	r18, Z
 54a:	31 81       	ldd	r19, Z+1	; 0x01
 54c:	80 91 12 01 	lds	r24, 0x0112
 550:	90 91 13 01 	lds	r25, 0x0113
 554:	fc 01       	movw	r30, r24
 556:	80 81       	ld	r24, Z
 558:	91 81       	ldd	r25, Z+1	; 0x01
 55a:	82 17       	cp	r24, r18
 55c:	93 07       	cpc	r25, r19
 55e:	08 f0       	brcs	.+2      	; 0x562 <main+0x54>
 560:	63 c0       	rjmp	.+198    	; 0x628 <main+0x11a>
				
				PORTB =		*servoBusPtr++; //set the bus
 562:	28 e3       	ldi	r18, 0x38	; 56
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	80 91 60 00 	lds	r24, 0x0060
 56a:	90 91 61 00 	lds	r25, 0x0061
 56e:	fc 01       	movw	r30, r24
 570:	40 81       	ld	r20, Z
 572:	f9 01       	movw	r30, r18
 574:	40 83       	st	Z, r20
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	90 93 61 00 	sts	0x0061, r25
 57c:	80 93 60 00 	sts	0x0060, r24
				PORTD =	    DECODE0;	    //turn on the decode0 strobe 
 580:	82 e3       	ldi	r24, 0x32	; 50
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	20 e1       	ldi	r18, 0x10	; 16
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
				PORTD &=	0xF;
 58a:	82 e3       	ldi	r24, 0x32	; 50
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	22 e3       	ldi	r18, 0x32	; 50
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	f9 01       	movw	r30, r18
 594:	20 81       	ld	r18, Z
 596:	2f 70       	andi	r18, 0x0F	; 15
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
				
				PORTB =		*servoBusPtr++; //set the bus
 59c:	28 e3       	ldi	r18, 0x38	; 56
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	80 91 60 00 	lds	r24, 0x0060
 5a4:	90 91 61 00 	lds	r25, 0x0061
 5a8:	fc 01       	movw	r30, r24
 5aa:	40 81       	ld	r20, Z
 5ac:	f9 01       	movw	r30, r18
 5ae:	40 83       	st	Z, r20
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	90 93 61 00 	sts	0x0061, r25
 5b6:	80 93 60 00 	sts	0x0060, r24
				PORTD =		DECODE1;		//turn on the decode1 strobe	
 5ba:	82 e3       	ldi	r24, 0x32	; 50
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	20 e2       	ldi	r18, 0x20	; 32
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
				PORTD &=	0xF;
 5c4:	82 e3       	ldi	r24, 0x32	; 50
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	22 e3       	ldi	r18, 0x32	; 50
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	f9 01       	movw	r30, r18
 5ce:	20 81       	ld	r18, Z
 5d0:	2f 70       	andi	r18, 0x0F	; 15
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
				
				PORTB =		*servoBusPtr++;	//turn on the decode2 strobe
 5d6:	28 e3       	ldi	r18, 0x38	; 56
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	80 91 60 00 	lds	r24, 0x0060
 5de:	90 91 61 00 	lds	r25, 0x0061
 5e2:	fc 01       	movw	r30, r24
 5e4:	40 81       	ld	r20, Z
 5e6:	f9 01       	movw	r30, r18
 5e8:	40 83       	st	Z, r20
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	90 93 61 00 	sts	0x0061, r25
 5f0:	80 93 60 00 	sts	0x0060, r24
				asm("nop");
 5f4:	00 00       	nop
				asm("nop");
 5f6:	00 00       	nop
				asm("nop");
 5f8:	00 00       	nop
				
				PORTD =		DECODE2;		//set the bus		
 5fa:	82 e3       	ldi	r24, 0x32	; 50
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	20 e4       	ldi	r18, 0x40	; 64
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
				PORTD &=	0xF;	
 604:	82 e3       	ldi	r24, 0x32	; 50
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	22 e3       	ldi	r18, 0x32	; 50
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	f9 01       	movw	r30, r18
 60e:	20 81       	ld	r18, Z
 610:	2f 70       	andi	r18, 0x0F	; 15
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
				servoTimePtr++;		
 616:	80 91 12 01 	lds	r24, 0x0112
 61a:	90 91 13 01 	lds	r25, 0x0113
 61e:	02 96       	adiw	r24, 0x02	; 2
 620:	90 93 13 01 	sts	0x0113, r25
 624:	80 93 12 01 	sts	0x0112, r24
			}					
		} while (servoTimePtr < servoTimesEnd);
 628:	80 91 12 01 	lds	r24, 0x0112
 62c:	90 91 13 01 	lds	r25, 0x0113
 630:	f1 e0       	ldi	r31, 0x01	; 1
 632:	8e 30       	cpi	r24, 0x0E	; 14
 634:	9f 07       	cpc	r25, r31
 636:	08 f4       	brcc	.+2      	; 0x63a <main+0x12c>
 638:	84 cf       	rjmp	.-248    	; 0x542 <main+0x34>
		refresh();
 63a:	d3 dd       	rcall	.-1114   	; 0x1e2 <refresh>
		setMasks();
 63c:	07 dd       	rcall	.-1522   	; 0x4c <setMasks>
		seedValues();
 63e:	0a de       	rcall	.-1004   	; 0x254 <seedValues>
		sort();
 640:	36 de       	rcall	.-916    	; 0x2ae <sort>
		postSortMask();
 642:	f6 de       	rcall	.-532    	; 0x430 <postSortMask>
		while(TCNT1>0);
 644:	00 00       	nop
 646:	8c e4       	ldi	r24, 0x4C	; 76
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	fc 01       	movw	r30, r24
 64c:	80 81       	ld	r24, Z
 64e:	91 81       	ldd	r25, Z+1	; 0x01
 650:	00 97       	sbiw	r24, 0x00	; 0
 652:	c9 f7       	brne	.-14     	; 0x646 <main+0x138>
    }
 654:	76 cf       	rjmp	.-276    	; 0x542 <main+0x34>

00000656 <__vector_default>:
}



ISR(BADISR_vect){}
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	df 93       	push	r29
 662:	cf 93       	push	r28
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <__vector_7>:

ISR(USART_RX_vect){
 676:	1f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	2f 93       	push	r18
 682:	3f 93       	push	r19
 684:	4f 93       	push	r20
 686:	5f 93       	push	r21
 688:	6f 93       	push	r22
 68a:	7f 93       	push	r23
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	af 93       	push	r26
 692:	bf 93       	push	r27
 694:	ef 93       	push	r30
 696:	ff 93       	push	r31
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
	uartGetC(); //set this equal to the current buffer location	
 6a0:	3b d0       	rcall	.+118    	; 0x718 <uartGetC>
}
 6a2:	cf 91       	pop	r28
 6a4:	df 91       	pop	r29
 6a6:	ff 91       	pop	r31
 6a8:	ef 91       	pop	r30
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <__vector_4>:

inline ISR(TIMER1_COMPA_vect){
 6c8:	1f 92       	push	r1
 6ca:	0f 92       	push	r0
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	0f 92       	push	r0
 6d0:	11 24       	eor	r1, r1
 6d2:	2f 93       	push	r18
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	ef 93       	push	r30
 6da:	ff 93       	push	r31
 6dc:	df 93       	push	r29
 6de:	cf 93       	push	r28
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
		PORTD =	    DECODE0 | DECODE1 | DECODE2;
 6e4:	82 e3       	ldi	r24, 0x32	; 50
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	20 e7       	ldi	r18, 0x70	; 112
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18
		PORTB =		0xFF;
 6ee:	88 e3       	ldi	r24, 0x38	; 56
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	2f ef       	ldi	r18, 0xFF	; 255
 6f4:	fc 01       	movw	r30, r24
 6f6:	20 83       	st	Z, r18
		PORTD =	    0;
 6f8:	82 e3       	ldi	r24, 0x32	; 50
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	fc 01       	movw	r30, r24
 6fe:	10 82       	st	Z, r1
}
 700:	cf 91       	pop	r28
 702:	df 91       	pop	r29
 704:	ff 91       	pop	r31
 706:	ef 91       	pop	r30
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	2f 91       	pop	r18
 70e:	0f 90       	pop	r0
 710:	0f be       	out	0x3f, r0	; 63
 712:	0f 90       	pop	r0
 714:	1f 90       	pop	r1
 716:	18 95       	reti

00000718 <uartGetC>:

uint8_t uartGetC(){
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
	return UDR;
 720:	8c e2       	ldi	r24, 0x2C	; 44
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	fc 01       	movw	r30, r24
 726:	80 81       	ld	r24, Z
}
 728:	cf 91       	pop	r28
 72a:	df 91       	pop	r29
 72c:	08 95       	ret

0000072e <timer1Init>:
 *  Author: bfc
 */ 
#include "Timer.h"


void timer1Init(void){
 72e:	df 93       	push	r29
 730:	cf 93       	push	r28
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
 736:	8f e4       	ldi	r24, 0x4F	; 79
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	fc 01       	movw	r30, r24
 73c:	10 82       	st	Z, r1
	TCCR1B = 0x1A; //sets ICR1 as top val reg and sets the prescaler to div8 enables ctc for immediate updates to ocr1x
 73e:	8e e4       	ldi	r24, 0x4E	; 78
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	2a e1       	ldi	r18, 0x1A	; 26
 744:	fc 01       	movw	r30, r24
 746:	20 83       	st	Z, r18
	TIMSK = _BV(OCIE1A);
 748:	89 e5       	ldi	r24, 0x59	; 89
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	20 e4       	ldi	r18, 0x40	; 64
 74e:	fc 01       	movw	r30, r24
 750:	20 83       	st	Z, r18
	ICR1 = 	(F_CPU/(50*8)); //1 timer clock equals 1us period of 20ms ie 20000us	
 752:	84 e4       	ldi	r24, 0x44	; 68
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	20 e3       	ldi	r18, 0x30	; 48
 758:	35 e7       	ldi	r19, 0x75	; 117
 75a:	fc 01       	movw	r30, r24
 75c:	31 83       	std	Z+1, r19	; 0x01
 75e:	20 83       	st	Z, r18
	OCR1A = (F_CPU/(50*8));
 760:	8a e4       	ldi	r24, 0x4A	; 74
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	20 e3       	ldi	r18, 0x30	; 48
 766:	35 e7       	ldi	r19, 0x75	; 117
 768:	fc 01       	movw	r30, r24
 76a:	31 83       	std	Z+1, r19	; 0x01
 76c:	20 83       	st	Z, r18
 76e:	cf 91       	pop	r28
 770:	df 91       	pop	r29
 772:	08 95       	ret

00000774 <uartInit>:

//FILE	uart_str = FDEV_SETUP_STREAM(uart_putchar,uart_getchar,_FDEV_SETUP_RW)



void uartInit(void){
 774:	df 93       	push	r29
 776:	cf 93       	push	r28
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62

UBRRH = 0;//set for baud of 230400... dang fast
 77c:	82 e2       	ldi	r24, 0x22	; 34
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	fc 01       	movw	r30, r24
 782:	10 82       	st	Z, r1
UBRRL = 2;
 784:	89 e2       	ldi	r24, 0x29	; 41
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	22 e0       	ldi	r18, 0x02	; 2
 78a:	fc 01       	movw	r30, r24
 78c:	20 83       	st	Z, r18

UCSRB = _BV(RXCIE) | _BV(RXEN) ;//holding off on tx enable as of right now it may be better to simply receive data with the tx line as a sort of flow control 
 78e:	8a e2       	ldi	r24, 0x2A	; 42
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	20 e9       	ldi	r18, 0x90	; 144
 794:	fc 01       	movw	r30, r24
 796:	20 83       	st	Z, r18
}
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	08 95       	ret

0000079e <uart_putchar>:

void uart_putchar(char c,FILE *unused)
{
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	00 d0       	rcall	.+0      	; 0x7a4 <uart_putchar+0x6>
 7a4:	0f 92       	push	r0
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	89 83       	std	Y+1, r24	; 0x01
 7ac:	7b 83       	std	Y+3, r23	; 0x03
 7ae:	6a 83       	std	Y+2, r22	; 0x02
	while(!(UCSRA & UDRE));
 7b0:	00 00       	nop
 7b2:	8b e2       	ldi	r24, 0x2B	; 43
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	fc 01       	movw	r30, r24
 7b8:	80 81       	ld	r24, Z
 7ba:	88 2f       	mov	r24, r24
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	85 70       	andi	r24, 0x05	; 5
 7c0:	90 70       	andi	r25, 0x00	; 0
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	b1 f3       	breq	.-20     	; 0x7b2 <uart_putchar+0x14>
	UDR = c;
 7c6:	8c e2       	ldi	r24, 0x2C	; 44
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	29 81       	ldd	r18, Y+1	; 0x01
 7cc:	fc 01       	movw	r30, r24
 7ce:	20 83       	st	Z, r18
}
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	08 95       	ret

000007dc <uart_getchar>:

int uart_getchar(FILE *stream){
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <uart_getchar+0x6>
 7e2:	0f 92       	push	r0
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
 7e8:	9b 83       	std	Y+3, r25	; 0x03
 7ea:	8a 83       	std	Y+2, r24	; 0x02
	
	if (buffer.tail == uartBufferEnd){
 7ec:	80 91 24 01 	lds	r24, 0x0124
 7f0:	90 91 25 01 	lds	r25, 0x0125
 7f4:	21 e0       	ldi	r18, 0x01	; 1
 7f6:	85 34       	cpi	r24, 0x45	; 69
 7f8:	92 07       	cpc	r25, r18
 7fa:	89 f4       	brne	.+34     	; 0x81e <uart_getchar+0x42>
		uint8_t temp = *buffer.tail;
 7fc:	80 91 24 01 	lds	r24, 0x0124
 800:	90 91 25 01 	lds	r25, 0x0125
 804:	fc 01       	movw	r30, r24
 806:	80 81       	ld	r24, Z
 808:	89 83       	std	Y+1, r24	; 0x01
		buffer.tail = uartBufferBegin;
 80a:	86 e2       	ldi	r24, 0x26	; 38
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	90 93 25 01 	sts	0x0125, r25
 812:	80 93 24 01 	sts	0x0124, r24
		return temp;
 816:	89 81       	ldd	r24, Y+1	; 0x01
 818:	88 2f       	mov	r24, r24
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e c0       	rjmp	.+28     	; 0x83a <uart_getchar+0x5e>
	}
	else return *buffer.tail++;
 81e:	20 91 24 01 	lds	r18, 0x0124
 822:	30 91 25 01 	lds	r19, 0x0125
 826:	f9 01       	movw	r30, r18
 828:	80 81       	ld	r24, Z
 82a:	88 2f       	mov	r24, r24
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	2f 5f       	subi	r18, 0xFF	; 255
 830:	3f 4f       	sbci	r19, 0xFF	; 255
 832:	30 93 25 01 	sts	0x0125, r19
 836:	20 93 24 01 	sts	0x0124, r18
}
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	cf 91       	pop	r28
 842:	df 91       	pop	r29
 844:	08 95       	ret

00000846 <store>:

void store(char c){
 846:	df 93       	push	r29
 848:	cf 93       	push	r28
 84a:	0f 92       	push	r0
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	89 83       	std	Y+1, r24	; 0x01
	if(buffer.head == uartBufferEnd){
 852:	80 91 22 01 	lds	r24, 0x0122
 856:	90 91 23 01 	lds	r25, 0x0123
 85a:	21 e0       	ldi	r18, 0x01	; 1
 85c:	85 34       	cpi	r24, 0x45	; 69
 85e:	92 07       	cpc	r25, r18
 860:	71 f4       	brne	.+28     	; 0x87e <store+0x38>
		*buffer.head = c;
 862:	80 91 22 01 	lds	r24, 0x0122
 866:	90 91 23 01 	lds	r25, 0x0123
 86a:	29 81       	ldd	r18, Y+1	; 0x01
 86c:	fc 01       	movw	r30, r24
 86e:	20 83       	st	Z, r18
		buffer.head = uartBufferBegin;	
 870:	86 e2       	ldi	r24, 0x26	; 38
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	90 93 23 01 	sts	0x0123, r25
 878:	80 93 22 01 	sts	0x0122, r24
 87c:	0c c0       	rjmp	.+24     	; 0x896 <store+0x50>
	}		
	else *buffer.head++ = c;
 87e:	80 91 22 01 	lds	r24, 0x0122
 882:	90 91 23 01 	lds	r25, 0x0123
 886:	29 81       	ldd	r18, Y+1	; 0x01
 888:	fc 01       	movw	r30, r24
 88a:	20 83       	st	Z, r18
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	90 93 23 01 	sts	0x0123, r25
 892:	80 93 22 01 	sts	0x0122, r24
}
 896:	0f 90       	pop	r0
 898:	cf 91       	pop	r28
 89a:	df 91       	pop	r29
 89c:	08 95       	ret

0000089e <dataInbuffer>:

uint8_t dataInbuffer(void){
 89e:	df 93       	push	r29
 8a0:	cf 93       	push	r28
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
	if(buffer.head == buffer.tail) return 0;	//no data to be read
 8a6:	20 91 22 01 	lds	r18, 0x0122
 8aa:	30 91 23 01 	lds	r19, 0x0123
 8ae:	80 91 24 01 	lds	r24, 0x0124
 8b2:	90 91 25 01 	lds	r25, 0x0125
 8b6:	28 17       	cp	r18, r24
 8b8:	39 07       	cpc	r19, r25
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <dataInbuffer+0x22>
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <dataInbuffer+0x24>
	else return 1;							//data to be read
 8c0:	81 e0       	ldi	r24, 0x01	; 1
}
 8c2:	cf 91       	pop	r28
 8c4:	df 91       	pop	r29
 8c6:	08 95       	ret

000008c8 <ISR>:
ISR(USART_RX_vect){
 8c8:	df 93       	push	r29
 8ca:	cf 93       	push	r28
 8cc:	00 d0       	rcall	.+0      	; 0x8ce <ISR+0x6>
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	9a 83       	std	Y+2, r25	; 0x02
 8d4:	89 83       	std	Y+1, r24	; 0x01
	store(UDR);
 8d6:	8c e2       	ldi	r24, 0x2C	; 44
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	fc 01       	movw	r30, r24
 8dc:	80 81       	ld	r24, Z
 8de:	b3 df       	rcall	.-154    	; 0x846 <store>
}
 8e0:	0f 90       	pop	r0
 8e2:	0f 90       	pop	r0
 8e4:	cf 91       	pop	r28
 8e6:	df 91       	pop	r29
 8e8:	08 95       	ret

000008ea <_exit>:
 8ea:	f8 94       	cli

000008ec <__stop_program>:
 8ec:	ff cf       	rjmp	.-2      	; 0x8ec <__stop_program>
