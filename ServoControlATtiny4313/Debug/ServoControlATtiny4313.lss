
ServoControlATtiny4313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000bd  00800060  00800060  00000604  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000254  00000000  00000000  00000dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a3  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000363  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbb  00000000  00000000  00001c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a8  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000109  00000000  00000000  00002fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0001a4f1  00000000  00000000  000030ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000155  00000000  00000000  0001d5de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	da c1       	rjmp	.+948    	; 0x3be <__vector_4>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	11 e0       	ldi	r17, 0x01	; 1
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	ad 31       	cpi	r26, 0x1D	; 29
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	6e d2       	rcall	.+1244   	; 0x524 <main>
  48:	a1 c2       	rjmp	.+1346   	; 0x58c <_exit>

0000004a <__bad_interrupt>:
  4a:	ae c1       	rjmp	.+860    	; 0x3a8 <__vector_default>

0000004c <setMasks>:
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  4c:	cf 93       	push	r28
  4e:	df 93       	push	r29
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  50:	e6 e9       	ldi	r30, 0x96	; 150
  52:	f0 e0       	ldi	r31, 0x00	; 0
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  58:	21 e0       	ldi	r18, 0x01	; 1
  5a:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
  5c:	6f ef       	ldi	r22, 0xFF	; 255
#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  5e:	a9 01       	movw	r20, r18
  60:	08 2e       	mov	r0, r24
  62:	02 c0       	rjmp	.+4      	; 0x68 <setMasks+0x1c>
  64:	44 0f       	add	r20, r20
  66:	55 1f       	adc	r21, r21
  68:	0a 94       	dec	r0
  6a:	e2 f7       	brpl	.-8      	; 0x64 <setMasks+0x18>
  6c:	40 95       	com	r20
  6e:	40 83       	st	Z, r20
			servos.bus[i].masks[1] = 0xFF;
  70:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i].masks[2] = 0xFF;
  72:	62 83       	std	Z+2, r22	; 0x02
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	33 96       	adiw	r30, 0x03	; 3

#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
  78:	88 30       	cpi	r24, 0x08	; 8
  7a:	91 05       	cpc	r25, r1
  7c:	81 f7       	brne	.-32     	; 0x5e <setMasks+0x12>
  7e:	ee ea       	ldi	r30, 0xAE	; 174
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  86:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+8].masks[1] = ~(1<<i);
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  8c:	60 83       	st	Z, r22
			servos.bus[i+8].masks[1] = ~(1<<i);
  8e:	a9 01       	movw	r20, r18
  90:	08 2e       	mov	r0, r24
  92:	02 c0       	rjmp	.+4      	; 0x98 <setMasks+0x4c>
  94:	44 0f       	add	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <setMasks+0x48>
  9c:	40 95       	com	r20
  9e:	41 83       	std	Z+1, r20	; 0x01
			servos.bus[i+8].masks[2] = 0xFF;
  a0:	62 83       	std	Z+2, r22	; 0x02
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i].masks[0] = ~(1<<i);
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	91 05       	cpc	r25, r1
  aa:	81 f7       	brne	.-32     	; 0x8c <setMasks+0x40>
  ac:	e6 ec       	ldi	r30, 0xC6	; 198
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  b4:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  ba:	60 83       	st	Z, r22
			servos.bus[i+16].masks[1] = 0xFF;
  bc:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i+16].masks[2] = ~(1<<i);
  be:	a9 01       	movw	r20, r18
  c0:	08 2e       	mov	r0, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <setMasks+0x7c>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <setMasks+0x78>
  cc:	40 95       	com	r20
  ce:	42 83       	std	Z+2, r20	; 0x02
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i+8].masks[1] = ~(1<<i);
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	91 05       	cpc	r25, r1
  d8:	81 f7       	brne	.-32     	; 0xba <setMasks+0x6e>
			servos.bus[i+16].masks[0] = 0xFF;
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
		}
		servos.tempBus.masks[0] = 0x0;
  da:	10 92 de 00 	sts	0x00DE, r1
		servos.tempBus.masks[1] = 0x0;
  de:	10 92 df 00 	sts	0x00DF, r1
		servos.tempBus.masks[2] = 0x0;
  e2:	10 92 e0 00 	sts	0x00E0, r1
		
		mainBus[0] = 0xFF;
  e6:	60 93 14 01 	sts	0x0114, r22
		mainBus[1] = 0xFF;
  ea:	60 93 15 01 	sts	0x0115, r22
		mainBus[2] = 0xFF;
  ee:	60 93 16 01 	sts	0x0116, r22
  f2:	26 e9       	ldi	r18, 0x96	; 150
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
				servos.bus[i] = servos.tempBus;
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	50 e0       	ldi	r21, 0x00	; 0
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  fe:	e8 2f       	mov	r30, r24
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
 100:	dc 01       	movw	r26, r24
 102:	aa 0f       	add	r26, r26
 104:	bb 1f       	adc	r27, r27
 106:	af 51       	subi	r26, 0x1F	; 31
 108:	bf 4f       	sbci	r27, 0xFF	; 255
 10a:	6d 91       	ld	r22, X+
 10c:	7c 91       	ld	r23, X
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	61 15       	cp	r22, r1
 112:	71 05       	cpc	r23, r1
 114:	e1 f4       	brne	.+56     	; 0x14e <setMasks+0x102>
				servos.bus[i] = servos.tempBus;
 116:	e9 01       	movw	r28, r18
 118:	ae ed       	ldi	r26, 0xDE	; 222
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	0d 90       	ld	r0, X+
 120:	09 92       	st	Y+, r0
 122:	61 50       	subi	r22, 0x01	; 1
 124:	e1 f7       	brne	.-8      	; 0x11e <setMasks+0xd2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
 126:	e6 95       	lsr	r30
 128:	e6 95       	lsr	r30
 12a:	e6 95       	lsr	r30
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ec 5e       	subi	r30, 0xEC	; 236
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	bc 01       	movw	r22, r24
 134:	67 70       	andi	r22, 0x07	; 7
 136:	70 70       	andi	r23, 0x00	; 0
 138:	da 01       	movw	r26, r20
 13a:	02 c0       	rjmp	.+4      	; 0x140 <setMasks+0xf4>
 13c:	aa 0f       	add	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <setMasks+0xf0>
 144:	bd 01       	movw	r22, r26
 146:	60 95       	com	r22
 148:	70 81       	ld	r23, Z
 14a:	67 23       	and	r22, r23
 14c:	60 83       	st	Z, r22
			}
			asm("nop");				
 14e:	00 00       	nop
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	2d 5f       	subi	r18, 0xFD	; 253
 154:	3f 4f       	sbci	r19, 0xFF	; 255
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
		
		for(i=0;i<24;i++){ 
 156:	88 31       	cpi	r24, 0x18	; 24
 158:	91 05       	cpc	r25, r1
 15a:	89 f6       	brne	.-94     	; 0xfe <setMasks+0xb2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
			}
			asm("nop");				
		}	
			
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <refresh>:

void refresh(void){
 162:	a3 e6       	ldi	r26, 0x63	; 99
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	//refresh all the servos
	for(i=0;i<24;i++)servos.times[i].timerVal = servoBuffer[i].timerVal;
 16a:	2d 91       	ld	r18, X+
 16c:	3d 91       	ld	r19, X+
 16e:	fc 01       	movw	r30, r24
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ef 51       	subi	r30, 0x1F	; 31
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	31 83       	std	Z+1, r19	; 0x01
 17a:	20 83       	st	Z, r18
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	91 05       	cpc	r25, r1
 182:	99 f7       	brne	.-26     	; 0x16a <refresh+0x8>
	
	//initialize all the pointers
	servoBusPtr = &servos.bus[0].masks[0];
 184:	86 e9       	ldi	r24, 0x96	; 150
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 62 00 	sts	0x0062, r25
 18c:	80 93 61 00 	sts	0x0061, r24
	servoTimePtr = &servos.times[0].timerVal;
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 18 01 	sts	0x0118, r25
 198:	80 93 17 01 	sts	0x0117, r24
}
 19c:	08 95       	ret

0000019e <seedValues>:
  
void seedValues(void){
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  //normally 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ef 51       	subi	r30, 0x1F	; 31
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	11 82       	std	Z+1, r1	; 0x01
 1ae:	10 82       	st	Z, r1
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	88 31       	cpi	r24, 0x18	; 24
 1b4:	91 05       	cpc	r25, r1
 1b6:	a9 f7       	brne	.-22     	; 0x1a2 <seedValues+0x4>
 1b8:	e3 e6       	ldi	r30, 0x63	; 99
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 2400*1.5;  //normally 0	
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	9e e0       	ldi	r25, 0x0E	; 14
 1c0:	91 83       	std	Z+1, r25	; 0x01
 1c2:	80 83       	st	Z, r24
 1c4:	34 96       	adiw	r30, 0x04	; 4
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	e3 39       	cpi	r30, 0x93	; 147
 1ca:	f2 07       	cpc	r31, r18
 1cc:	c9 f7       	brne	.-14     	; 0x1c0 <seedValues+0x22>
}	
 1ce:	08 95       	ret

000001d0 <sort>:
 
void sort(void){
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	52 c0       	rjmp	.+164    	; 0x282 <sort+0xb2>
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 1de:	ab 01       	movw	r20, r22
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  //normally 0
	
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 2400*1.5;  //normally 0	
}	
 
void sort(void){
 1e0:	ba 01       	movw	r22, r20
 1e2:	6f 5f       	subi	r22, 0xFF	; 255
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
 1e6:	db 01       	movw	r26, r22
 1e8:	aa 0f       	add	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	af 51       	subi	r26, 0x1F	; 31
 1ee:	bf 4f       	sbci	r27, 0xFF	; 255
 1f0:	cd 91       	ld	r28, X+
 1f2:	dc 91       	ld	r29, X
 1f4:	da 01       	movw	r26, r20
 1f6:	aa 0f       	add	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	af 51       	subi	r26, 0x1F	; 31
 1fc:	bf 4f       	sbci	r27, 0xFF	; 255
 1fe:	4d 91       	ld	r20, X+
 200:	5c 91       	ld	r21, X
 202:	11 97       	sbiw	r26, 0x01	; 1
 204:	c4 17       	cp	r28, r20
 206:	d5 07       	cpc	r29, r21
 208:	90 f5       	brcc	.+100    	; 0x26e <sort+0x9e>
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  //normally 0
	
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 2400*1.5;  //normally 0	
}	
 
void sort(void){
 20a:	7c 01       	movw	r14, r24
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
 20c:	ce ed       	ldi	r28, 0xDE	; 222
 20e:	d0 e0       	ldi	r29, 0x00	; 0
 210:	48 2f       	mov	r20, r24
 212:	59 2f       	mov	r21, r25
 214:	da 01       	movw	r26, r20
 216:	43 e0       	ldi	r20, 0x03	; 3
 218:	0d 90       	ld	r0, X+
 21a:	09 92       	st	Y+, r0
 21c:	41 50       	subi	r20, 0x01	; 1
 21e:	e1 f7       	brne	.-8      	; 0x218 <sort+0x48>
				servos.tempTimes = servos.times[i];
 220:	42 81       	ldd	r20, Z+2	; 0x02
 222:	53 81       	ldd	r21, Z+3	; 0x03
 224:	50 93 12 01 	sts	0x0112, r21
 228:	40 93 11 01 	sts	0x0111, r20
				
				servos.times[i] = servos.times[i-1];
 22c:	40 81       	ld	r20, Z
 22e:	51 81       	ldd	r21, Z+1	; 0x01
 230:	53 83       	std	Z+3, r21	; 0x03
 232:	42 83       	std	Z+2, r20	; 0x02
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  //normally 0
	
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 2400*1.5;  //normally 0	
}	
 
void sort(void){
 234:	89 01       	movw	r16, r18
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
				servos.tempTimes = servos.times[i];
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
 236:	4e 2d       	mov	r20, r14
 238:	5f 2d       	mov	r21, r15
 23a:	ea 01       	movw	r28, r20
 23c:	42 2f       	mov	r20, r18
 23e:	53 2f       	mov	r21, r19
 240:	da 01       	movw	r26, r20
 242:	43 e0       	ldi	r20, 0x03	; 3
 244:	0d 90       	ld	r0, X+
 246:	09 92       	st	Y+, r0
 248:	41 50       	subi	r20, 0x01	; 1
 24a:	e1 f7       	brne	.-8      	; 0x244 <sort+0x74>
			
				servos.times[i-1] = servos.tempTimes;
 24c:	40 91 11 01 	lds	r20, 0x0111
 250:	50 91 12 01 	lds	r21, 0x0112
 254:	51 83       	std	Z+1, r21	; 0x01
 256:	40 83       	st	Z, r20
				servos.bus[i-1] = servos.tempBus;
 258:	40 2f       	mov	r20, r16
 25a:	51 2f       	mov	r21, r17
 25c:	ea 01       	movw	r28, r20
 25e:	ae ed       	ldi	r26, 0xDE	; 222
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	43 e0       	ldi	r20, 0x03	; 3
 264:	0d 90       	ld	r0, X+
 266:	09 92       	st	Y+, r0
 268:	41 50       	subi	r20, 0x01	; 1
 26a:	e1 f7       	brne	.-8      	; 0x264 <sort+0x94>
			
				ErrorFound = 1;	
 26c:	11 e0       	ldi	r17, 0x01	; 1
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
			
				servos.times[i-1] = servos.tempTimes;
				servos.bus[i-1] = servos.tempBus;
 26e:	03 96       	adiw	r24, 0x03	; 3
 270:	2d 5f       	subi	r18, 0xFD	; 253
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	32 96       	adiw	r30, 0x02	; 2
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 276:	67 31       	cpi	r22, 0x17	; 23
 278:	71 05       	cpc	r23, r1
 27a:	09 f0       	breq	.+2      	; 0x27e <sort+0xae>
 27c:	b0 cf       	rjmp	.-160    	; 0x1de <sort+0xe>
	for(i=0;i<24;i+=2)servoBuffer[i].timerVal = 2400*1.5;  //normally 0	
}	
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
 27e:	11 23       	and	r17, r17
 280:	59 f0       	breq	.+22     	; 0x298 <sort+0xc8>
 282:	89 e9       	ldi	r24, 0x99	; 153
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	9c 01       	movw	r18, r24
 288:	23 50       	subi	r18, 0x03	; 3
 28a:	30 40       	sbci	r19, 0x00	; 0
 28c:	e1 ee       	ldi	r30, 0xE1	; 225
 28e:	f0 e0       	ldi	r31, 0x00	; 0
		ErrorFound = 0;
		for(i=1;i<24;i++){
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	a4 cf       	rjmp	.-184    	; 0x1e0 <sort+0x10>
			
				ErrorFound = 1;	
			}				
		}
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	08 95       	ret

000002a6 <postSortMask>:

void postSortMask(void){
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 e0       	ldi	r16, 0x00	; 0
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	e0 e0       	ldi	r30, 0x00	; 0
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	1e c0       	rjmp	.+60     	; 0x2f8 <postSortMask+0x52>
 2bc:	ae 01       	movw	r20, r28
 2be:	42 0f       	add	r20, r18
 2c0:	53 1f       	adc	r21, r19
 2c2:	40 0f       	add	r20, r16
 2c4:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2c6:	da 01       	movw	r26, r20
 2c8:	13 96       	adiw	r26, 0x03	; 3
 2ca:	7c 91       	ld	r23, X
 2cc:	69 91       	ld	r22, Y+
			}				
		}
	}
}

void postSortMask(void){
 2ce:	ae 01       	movw	r20, r28
 2d0:	42 0f       	add	r20, r18
 2d2:	53 1f       	adc	r21, r19
 2d4:	40 0f       	add	r20, r16
 2d6:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2d8:	67 23       	and	r22, r23
 2da:	da 01       	movw	r26, r20
 2dc:	12 96       	adiw	r26, 0x02	; 2
 2de:	6c 93       	st	X, r22
 2e0:	12 97       	sbiw	r26, 0x02	; 2
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
 2e2:	c8 17       	cp	r28, r24
 2e4:	d9 07       	cpc	r29, r25
 2e6:	51 f7       	brne	.-44     	; 0x2bc <postSortMask+0x16>
 2e8:	31 96       	adiw	r30, 0x01	; 1
 2ea:	23 50       	subi	r18, 0x03	; 3
 2ec:	30 40       	sbci	r19, 0x00	; 0
 2ee:	0d 5f       	subi	r16, 0xFD	; 253
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
 2f2:	e7 31       	cpi	r30, 0x17	; 23
 2f4:	f1 05       	cpc	r31, r1
 2f6:	71 f0       	breq	.+28     	; 0x314 <postSortMask+0x6e>
			}				
		}
	}
}

void postSortMask(void){
 2f8:	cf 01       	movw	r24, r30
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	34 d1       	rcall	.+616    	; 0x568 <__mulhi3>
 300:	ec 01       	movw	r28, r24
 302:	ca 56       	subi	r28, 0x6A	; 106
 304:	df 4f       	sbci	r29, 0xFF	; 255
 306:	88 27       	eor	r24, r24
 308:	99 27       	eor	r25, r25
 30a:	82 1b       	sub	r24, r18
 30c:	93 0b       	sbc	r25, r19
	uint8_t i,j;
	for(i=0;i<23;i++){
 30e:	87 56       	subi	r24, 0x67	; 103
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	d4 cf       	rjmp	.-88     	; 0x2bc <postSortMask+0x16>
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
			//servos.bus[i+1].masks[j] &= mainBus[j];
		}			
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <mulitpleServoTimeFix>:



//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
 31e:	1f 93       	push	r17
static uint8_t i;
	servos.tempBus = servos.bus[23];
 320:	ee ed       	ldi	r30, 0xDE	; 222
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	df 01       	movw	r26, r30
 326:	13 97       	sbiw	r26, 0x03	; 3
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0d 90       	ld	r0, X+
 32c:	01 92       	st	Z+, r0
 32e:	81 50       	subi	r24, 0x01	; 1
 330:	e1 f7       	brne	.-8      	; 0x32a <mulitpleServoTimeFix+0xc>
	for(i=23;i>0;i--){
 332:	87 e1       	ldi	r24, 0x17	; 23
 334:	80 93 60 00 	sts	0x0060, r24
 338:	2c c0       	rjmp	.+88     	; 0x392 <mulitpleServoTimeFix+0x74>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
 33a:	21 2f       	mov	r18, r17
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	c9 01       	movw	r24, r18
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	fc 01       	movw	r30, r24
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	ef 51       	subi	r30, 0x1F	; 31
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	60 81       	ld	r22, Z
 34e:	71 81       	ldd	r23, Z+1	; 0x01
 350:	f9 01       	movw	r30, r18
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	ef 51       	subi	r30, 0x1F	; 31
 358:	ff 4f       	sbci	r31, 0xFF	; 255
 35a:	40 81       	ld	r20, Z
 35c:	51 81       	ldd	r21, Z+1	; 0x01
 35e:	64 17       	cp	r22, r20
 360:	75 07       	cpc	r23, r21
 362:	a1 f4       	brne	.+40     	; 0x38c <mulitpleServoTimeFix+0x6e>
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
 364:	11 82       	std	Z+1, r1	; 0x01
 366:	10 82       	st	Z, r1
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	fd d0       	rcall	.+506    	; 0x568 <__mulhi3>
 36e:	fc 01       	movw	r30, r24
 370:	ea 56       	subi	r30, 0x6A	; 106
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	c9 01       	movw	r24, r18
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	f6 d0       	rcall	.+492    	; 0x568 <__mulhi3>
 37c:	dc 01       	movw	r26, r24
 37e:	aa 56       	subi	r26, 0x6A	; 106
 380:	bf 4f       	sbci	r27, 0xFF	; 255
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	0d 90       	ld	r0, X+
 386:	01 92       	st	Z+, r0
 388:	81 50       	subi	r24, 0x01	; 1
 38a:	e1 f7       	brne	.-8      	; 0x384 <mulitpleServoTimeFix+0x66>

//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
static uint8_t i;
	servos.tempBus = servos.bus[23];
	for(i=23;i>0;i--){
 38c:	11 50       	subi	r17, 0x01	; 1
 38e:	10 93 60 00 	sts	0x0060, r17
 392:	10 91 60 00 	lds	r17, 0x0060
 396:	11 23       	and	r17, r17
 398:	81 f6       	brne	.-96     	; 0x33a <mulitpleServoTimeFix+0x1c>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
		}			
	}
}	
 39a:	1f 91       	pop	r17
 39c:	08 95       	ret

0000039e <servoDataIRQ>:


void servoDataIRQ()
{
//if(bytesInBuffer < (bufferSize -2)) 
PORTD ^= 0x02;//this will trigger a PCINT on the xmega
 39e:	82 b3       	in	r24, 0x12	; 18
 3a0:	92 e0       	ldi	r25, 0x02	; 2
 3a2:	89 27       	eor	r24, r25
 3a4:	82 bb       	out	0x12, r24	; 18
 3a6:	08 95       	ret

000003a8 <__vector_default>:
		}
		asm("nop");
    }
}

ISR(BADISR_vect){
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
	asm("nop");
 3b2:	00 00       	nop
}
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_4>:

ISR(TIMER1_COMPA_vect){
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	8f 93       	push	r24
	cli();
 3ca:	f8 94       	cli
	PORTB =	mainBus[0]; 
 3cc:	80 91 14 01 	lds	r24, 0x0114
 3d0:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE0;	     
 3d2:	82 b3       	in	r24, 0x12	; 18
 3d4:	80 5f       	subi	r24, 0xF0	; 240
 3d6:	82 bb       	out	0x12, r24	; 18
	PORTB =	mainBus[1]; 
 3d8:	80 91 15 01 	lds	r24, 0x0115
 3dc:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE0;			
 3de:	82 b3       	in	r24, 0x12	; 18
 3e0:	80 5f       	subi	r24, 0xF0	; 240
 3e2:	82 bb       	out	0x12, r24	; 18
	PORTB =	mainBus[2];		
 3e4:	80 91 16 01 	lds	r24, 0x0116
 3e8:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE1;		
 3ea:	82 b3       	in	r24, 0x12	; 18
 3ec:	80 5e       	subi	r24, 0xE0	; 224
 3ee:	82 bb       	out	0x12, r24	; 18
	PORTD &= 0x0F;
 3f0:	82 b3       	in	r24, 0x12	; 18
 3f2:	8f 70       	andi	r24, 0x0F	; 15
 3f4:	82 bb       	out	0x12, r24	; 18
//	UCSRB &=  ~_BV(RXCIE);//disable RX interrupt so there are no interruptions to the time critical servo code.
	sei();
 3f6:	78 94       	sei
}
 3f8:	8f 91       	pop	r24
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <initializations>:

void initializations(void){
//	bytesInBuffer = 0;
	DDRB = 0xFF;//enable all port B pins (servo pins as Outputs)
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE;//enables every pin except the uart receive pin as an output
 408:	8e ef       	ldi	r24, 0xFE	; 254
 40a:	81 bb       	out	0x11, r24	; 17
	PORTD &= 0x0F;
 40c:	82 b3       	in	r24, 0x12	; 18
 40e:	8f 70       	andi	r24, 0x0F	; 15
 410:	82 bb       	out	0x12, r24	; 18
	uartInit();
 412:	a5 d0       	rcall	.+330    	; 0x55e <uartInit>
	refresh();
 414:	a6 de       	rcall	.-692    	; 0x162 <refresh>
	setMasks();
 416:	1a de       	rcall	.-972    	; 0x4c <setMasks>
	seedValues();
 418:	c2 de       	rcall	.-636    	; 0x19e <seedValues>
	sort();
 41a:	da de       	rcall	.-588    	; 0x1d0 <sort>
	postSortMask();
 41c:	44 df       	rcall	.-376    	; 0x2a6 <postSortMask>
	mulitpleServoTimeFix();
 41e:	7f df       	rcall	.-258    	; 0x31e <mulitpleServoTimeFix>
	timer1Init();
 420:	92 d0       	rcall	.+292    	; 0x546 <timer1Init>
	sei();
 422:	78 94       	sei
}
 424:	08 95       	ret

00000426 <servoSignalLoop>:

void servoSignalLoop(void){
	do 
		{
			if(TCNT1>(uint16_t)*servoTimePtr){		
 426:	4c b5       	in	r20, 0x2c	; 44
 428:	5d b5       	in	r21, 0x2d	; 45
 42a:	80 91 17 01 	lds	r24, 0x0117
 42e:	90 91 18 01 	lds	r25, 0x0118
 432:	fc 01       	movw	r30, r24
 434:	20 81       	ld	r18, Z
 436:	31 81       	ldd	r19, Z+1	; 0x01
 438:	24 17       	cp	r18, r20
 43a:	35 07       	cpc	r19, r21
 43c:	c0 f5       	brcc	.+112    	; 0x4ae <servoSignalLoop+0x88>
 43e:	a0 91 61 00 	lds	r26, 0x0061
 442:	b0 91 62 00 	lds	r27, 0x0062
 446:	02 96       	adiw	r24, 0x02	; 2
				if((uint16_t)*servoTimePtr != 0){
 448:	21 15       	cp	r18, r1
 44a:	31 05       	cpc	r19, r1
 44c:	39 f1       	breq	.+78     	; 0x49c <servoSignalLoop+0x76>
					PORTB =	*servoBusPtr++; 
 44e:	fd 01       	movw	r30, r26
 450:	21 91       	ld	r18, Z+
 452:	28 bb       	out	0x18, r18	; 24
 454:	f0 93 62 00 	sts	0x0062, r31
 458:	e0 93 61 00 	sts	0x0061, r30
					PORTD +=DECODE0;	     
 45c:	22 b3       	in	r18, 0x12	; 18
 45e:	20 5f       	subi	r18, 0xF0	; 240
 460:	22 bb       	out	0x12, r18	; 18
					PORTB =	*servoBusPtr++; 
 462:	11 96       	adiw	r26, 0x01	; 1
 464:	2c 91       	ld	r18, X
 466:	11 97       	sbiw	r26, 0x01	; 1
 468:	28 bb       	out	0x18, r18	; 24
 46a:	9f 01       	movw	r18, r30
 46c:	2f 5f       	subi	r18, 0xFF	; 255
 46e:	3f 4f       	sbci	r19, 0xFF	; 255
 470:	30 93 62 00 	sts	0x0062, r19
 474:	20 93 61 00 	sts	0x0061, r18
					PORTD +=DECODE0;			
 478:	42 b3       	in	r20, 0x12	; 18
 47a:	40 5f       	subi	r20, 0xF0	; 240
 47c:	42 bb       	out	0x12, r20	; 18
					PORTB =	*servoBusPtr++;		
 47e:	41 81       	ldd	r20, Z+1	; 0x01
 480:	48 bb       	out	0x18, r20	; 24
 482:	2f 5f       	subi	r18, 0xFF	; 255
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	30 93 62 00 	sts	0x0062, r19
 48a:	20 93 61 00 	sts	0x0061, r18
					PORTD +=DECODE1;		
 48e:	22 b3       	in	r18, 0x12	; 18
 490:	20 5e       	subi	r18, 0xE0	; 224
 492:	22 bb       	out	0x12, r18	; 18
					PORTD &= 0x0F;
 494:	22 b3       	in	r18, 0x12	; 18
 496:	2f 70       	andi	r18, 0x0F	; 15
 498:	22 bb       	out	0x12, r18	; 18
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <servoSignalLoop+0x80>
					servoTimePtr++;
				}				
				else{
					servoBusPtr += 3;
 49c:	13 96       	adiw	r26, 0x03	; 3
 49e:	b0 93 62 00 	sts	0x0062, r27
 4a2:	a0 93 61 00 	sts	0x0061, r26
					servoTimePtr++;
 4a6:	90 93 18 01 	sts	0x0118, r25
 4aa:	80 93 17 01 	sts	0x0117, r24
				}
			}					
		} while (servoTimePtr <= servoTimesEnd); 
 4ae:	80 91 17 01 	lds	r24, 0x0117
 4b2:	90 91 18 01 	lds	r25, 0x0118
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	8f 30       	cpi	r24, 0x0F	; 15
 4ba:	9f 07       	cpc	r25, r31
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <servoSignalLoop+0x9a>
 4be:	08 f4       	brcc	.+2      	; 0x4c2 <servoSignalLoop+0x9c>
 4c0:	b2 cf       	rjmp	.-156    	; 0x426 <servoSignalLoop>
}
 4c2:	08 95       	ret

000004c4 <processingForNextLoop>:

void processingForNextLoop(void)
{
	refresh();
 4c4:	4e de       	rcall	.-868    	; 0x162 <refresh>
	setMasks();
 4c6:	c2 dd       	rcall	.-1148   	; 0x4c <setMasks>
	sort();
 4c8:	83 de       	rcall	.-762    	; 0x1d0 <sort>
	postSortMask();
 4ca:	ed de       	rcall	.-550    	; 0x2a6 <postSortMask>
	mulitpleServoTimeFix();
 4cc:	28 df       	rcall	.-432    	; 0x31e <mulitpleServoTimeFix>
}
 4ce:	08 95       	ret

000004d0 <testArray>:


inline testArray(void){
	if(buffer[0] < 50 ){
 4d0:	e0 91 19 01 	lds	r30, 0x0119
 4d4:	e2 33       	cpi	r30, 0x32	; 50
 4d6:	a8 f4       	brcc	.+42     	; 0x502 <testArray+0x32>
		if(buffer[3] == (0x80 | buffer[0]) )
 4d8:	8e 2f       	mov	r24, r30
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	90 91 1c 01 	lds	r25, 0x011C
 4e0:	98 17       	cp	r25, r24
 4e2:	79 f4       	brne	.+30     	; 0x502 <testArray+0x32>
		{
			servoBuffer[buffer[0]].timerVal = (buffer[1])<<8 | buffer[2] ;	
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	ed 59       	subi	r30, 0x9D	; 157
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	30 91 1a 01 	lds	r19, 0x011A
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	80 91 1b 01 	lds	r24, 0x011B
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	82 2b       	or	r24, r18
 4fc:	93 2b       	or	r25, r19
 4fe:	91 83       	std	Z+1, r25	; 0x01
 500:	80 83       	st	Z, r24
		}
	}
}
 502:	08 95       	ret

00000504 <repopulateArray>:

inline repopulateArray(void){
	uint8_t i;
	for(i=0;i<3;i++) buffer[i] = buffer[i+1];
 504:	80 91 1a 01 	lds	r24, 0x011A
 508:	80 93 19 01 	sts	0x0119, r24
 50c:	80 91 1b 01 	lds	r24, 0x011B
 510:	80 93 1a 01 	sts	0x011A, r24
 514:	80 91 1c 01 	lds	r24, 0x011C
 518:	80 93 1b 01 	sts	0x011B, r24
	buffer[3] = UDR;
 51c:	8c b1       	in	r24, 0x0c	; 12
 51e:	80 93 1c 01 	sts	0x011C, r24
 522:	08 95       	ret

00000524 <main>:
uint8_t buffer[4];

int main(void)
{

	initializations();
 524:	6f df       	rcall	.-290    	; 0x404 <initializations>
	while(1)
    {
		
		servoSignalLoop();			//sends all the servo signals 
 526:	7f df       	rcall	.-258    	; 0x426 <servoSignalLoop>
		
		processingForNextLoop();	//processes the current servoBuffer Values
 528:	cd df       	rcall	.-102    	; 0x4c4 <processingForNextLoop>
 52a:	04 c0       	rjmp	.+8      	; 0x534 <main+0x10>
		servoDataIRQ();				//sends an interrupt request to the Xmega	
		
				
		while(TCNT1>600)
		{		
			testArray();
 52c:	d1 df       	rcall	.-94     	; 0x4d0 <testArray>
			if(newDataExists()){
 52e:	5f 9b       	sbis	0x0b, 7	; 11
 530:	02 c0       	rjmp	.+4      	; 0x536 <main+0x12>
				repopulateArray();
 532:	e8 df       	rcall	.-48     	; 0x504 <repopulateArray>
				servoDataIRQ();
 534:	34 df       	rcall	.-408    	; 0x39e <servoDataIRQ>
		processingForNextLoop();	//processes the current servoBuffer Values
		
		servoDataIRQ();				//sends an interrupt request to the Xmega	
		
				
		while(TCNT1>600)
 536:	8c b5       	in	r24, 0x2c	; 44
 538:	9d b5       	in	r25, 0x2d	; 45
 53a:	22 e0       	ldi	r18, 0x02	; 2
 53c:	89 35       	cpi	r24, 0x59	; 89
 53e:	92 07       	cpc	r25, r18
 540:	a8 f7       	brcc	.-22     	; 0x52c <main+0x8>
				repopulateArray();
				servoDataIRQ();
			}
			
		}
		asm("nop");
 542:	00 00       	nop
    }
 544:	f0 cf       	rjmp	.-32     	; 0x526 <main+0x2>

00000546 <timer1Init>:
 */ 
#include "Timer.h"


void timer1Init(void){
	TCCR1A = 0;
 546:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x1A; //sets ICR1 as top val reg and sets the prescaler to div8 enables ctc for immediate updates to ocr1x
 548:	8a e1       	ldi	r24, 0x1A	; 26
 54a:	8e bd       	out	0x2e, r24	; 46
	TIMSK = _BV(OCIE1A);
 54c:	80 e4       	ldi	r24, 0x40	; 64
 54e:	89 bf       	out	0x39, r24	; 57
	ICR1 = 	(F_CPU/(50*8)); //1 timer clock equals 1us period of 20ms ie 20000us	
 550:	80 e3       	ldi	r24, 0x30	; 48
 552:	95 e7       	ldi	r25, 0x75	; 117
 554:	95 bd       	out	0x25, r25	; 37
 556:	84 bd       	out	0x24, r24	; 36
	OCR1A = (F_CPU/(50*8));
 558:	9b bd       	out	0x2b, r25	; 43
 55a:	8a bd       	out	0x2a, r24	; 42
 55c:	08 95       	ret

0000055e <uartInit>:

#include "uart.h"

void uartInit(void){

UBRRH = 0;//5 = 125000, 12 = 57600
 55e:	12 b8       	out	0x02, r1	; 2
UBRRL = 12;
 560:	8c e0       	ldi	r24, 0x0C	; 12
 562:	89 b9       	out	0x09, r24	; 9

UCSRB	|= _BV(RXEN) ;//holding off on tx enable as of right now it may be better to simply receive data with the tx line as a sort of flow control 
 564:	54 9a       	sbi	0x0a, 4	; 10

//buffer.head = uartBufferBegin;
//buffer.tail = uartBufferBegin;

}
 566:	08 95       	ret

00000568 <__mulhi3>:
 568:	55 27       	eor	r21, r21
 56a:	00 24       	eor	r0, r0

0000056c <__mulhi3_loop>:
 56c:	80 ff       	sbrs	r24, 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <__mulhi3_skip1>
 570:	06 0e       	add	r0, r22
 572:	57 1f       	adc	r21, r23

00000574 <__mulhi3_skip1>:
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	61 15       	cp	r22, r1
 57a:	71 05       	cpc	r23, r1
 57c:	21 f0       	breq	.+8      	; 0x586 <__mulhi3_exit>
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	99 f7       	brne	.-26     	; 0x56c <__mulhi3_loop>

00000586 <__mulhi3_exit>:
 586:	95 2f       	mov	r25, r21
 588:	80 2d       	mov	r24, r0
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
