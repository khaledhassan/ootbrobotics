
ServoControlATtiny4313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000ee  00800060  00800060  000006c8  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002f5  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c33  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000044c  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe1  00000000  00000000  0000220d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000031f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002dd  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000115  00000000  00000000  0000362d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0001949a  00000000  00000000  00003742  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001d4  00000000  00000000  0001cbdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	69 c2       	rjmp	.+1234   	; 0x4dc <__vector_4>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	ea c2       	rjmp	.+1492   	; 0x5e4 <__vector_7>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	11 e0       	ldi	r17, 0x01	; 1
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	ae 34       	cpi	r26, 0x4E	; 78
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	a9 d1       	rcall	.+850    	; 0x39a <main>
  48:	03 c3       	rjmp	.+1542   	; 0x650 <_exit>

0000004a <__bad_interrupt>:
  4a:	3e c2       	rjmp	.+1148   	; 0x4c8 <__vector_default>

0000004c <setMasks>:
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  4c:	cf 93       	push	r28
  4e:	df 93       	push	r29
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  50:	e6 e9       	ldi	r30, 0x96	; 150
  52:	f0 e0       	ldi	r31, 0x00	; 0
 *  Author: bfc
 */ 

#include "other.h"

void setMasks(void){
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  58:	21 e0       	ldi	r18, 0x01	; 1
  5a:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
  5c:	6f ef       	ldi	r22, 0xFF	; 255
#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
			servos.bus[i].masks[0] = ~(1<<i);
  5e:	a9 01       	movw	r20, r18
  60:	08 2e       	mov	r0, r24
  62:	02 c0       	rjmp	.+4      	; 0x68 <setMasks+0x1c>
  64:	44 0f       	add	r20, r20
  66:	55 1f       	adc	r21, r21
  68:	0a 94       	dec	r0
  6a:	e2 f7       	brpl	.-8      	; 0x64 <setMasks+0x18>
  6c:	40 95       	com	r20
  6e:	40 83       	st	Z, r20
			servos.bus[i].masks[1] = 0xFF;
  70:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i].masks[2] = 0xFF;
  72:	62 83       	std	Z+2, r22	; 0x02
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	33 96       	adiw	r30, 0x03	; 3

#include "other.h"

void setMasks(void){
	uint8_t i;//simple increment 
		for(i=0;i<8;i++){
  78:	88 30       	cpi	r24, 0x08	; 8
  7a:	91 05       	cpc	r25, r1
  7c:	81 f7       	brne	.-32     	; 0x5e <setMasks+0x12>
  7e:	ee ea       	ldi	r30, 0xAE	; 174
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  86:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+8].masks[1] = ~(1<<i);
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
			servos.bus[i+8].masks[0] = 0xFF;
  8c:	60 83       	st	Z, r22
			servos.bus[i+8].masks[1] = ~(1<<i);
  8e:	a9 01       	movw	r20, r18
  90:	08 2e       	mov	r0, r24
  92:	02 c0       	rjmp	.+4      	; 0x98 <setMasks+0x4c>
  94:	44 0f       	add	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <setMasks+0x48>
  9c:	40 95       	com	r20
  9e:	41 83       	std	Z+1, r20	; 0x01
			servos.bus[i+8].masks[2] = 0xFF;
  a0:	62 83       	std	Z+2, r22	; 0x02
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i].masks[0] = ~(1<<i);
			servos.bus[i].masks[1] = 0xFF;
			servos.bus[i].masks[2] = 0xFF;
		}
					
		for(i=0;i<8;i++){
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	91 05       	cpc	r25, r1
  aa:	81 f7       	brne	.-32     	; 0x8c <setMasks+0x40>
  ac:	e6 ec       	ldi	r30, 0xC6	; 198
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  b4:	6f ef       	ldi	r22, 0xFF	; 255
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
			servos.bus[i+16].masks[0] = 0xFF;
  ba:	60 83       	st	Z, r22
			servos.bus[i+16].masks[1] = 0xFF;
  bc:	61 83       	std	Z+1, r22	; 0x01
			servos.bus[i+16].masks[2] = ~(1<<i);
  be:	a9 01       	movw	r20, r18
  c0:	08 2e       	mov	r0, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <setMasks+0x7c>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <setMasks+0x78>
  cc:	40 95       	com	r20
  ce:	42 83       	std	Z+2, r20	; 0x02
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	33 96       	adiw	r30, 0x03	; 3
			servos.bus[i+8].masks[1] = ~(1<<i);
			servos.bus[i+8].masks[2] = 0xFF;
			
		}
		
		for(i=0;i<8;i++){
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	91 05       	cpc	r25, r1
  d8:	81 f7       	brne	.-32     	; 0xba <setMasks+0x6e>
			servos.bus[i+16].masks[0] = 0xFF;
			servos.bus[i+16].masks[1] = 0xFF;
			servos.bus[i+16].masks[2] = ~(1<<i);
		}
		servos.tempBus.masks[0] = 0x0;
  da:	10 92 de 00 	sts	0x00DE, r1
		servos.tempBus.masks[1] = 0x0;
  de:	10 92 df 00 	sts	0x00DF, r1
		servos.tempBus.masks[2] = 0x0;
  e2:	10 92 e0 00 	sts	0x00E0, r1
		
		mainBus[0] = 0xFF;
  e6:	60 93 14 01 	sts	0x0114, r22
		mainBus[1] = 0xFF;
  ea:	60 93 15 01 	sts	0x0115, r22
		mainBus[2] = 0xFF;
  ee:	60 93 16 01 	sts	0x0116, r22
  f2:	26 e9       	ldi	r18, 0x96	; 150
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
				servos.bus[i] = servos.tempBus;
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	50 e0       	ldi	r21, 0x00	; 0
		servos.tempBus.masks[1] = 0x0;
		servos.tempBus.masks[2] = 0x0;
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
  fe:	e8 2f       	mov	r30, r24
		
		for(i=0;i<24;i++){ 
			if(servos.times[i].timerVal == 0 ) {
 100:	dc 01       	movw	r26, r24
 102:	aa 0f       	add	r26, r26
 104:	bb 1f       	adc	r27, r27
 106:	af 51       	subi	r26, 0x1F	; 31
 108:	bf 4f       	sbci	r27, 0xFF	; 255
 10a:	6d 91       	ld	r22, X+
 10c:	7c 91       	ld	r23, X
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	61 15       	cp	r22, r1
 112:	71 05       	cpc	r23, r1
 114:	e1 f4       	brne	.+56     	; 0x14e <setMasks+0x102>
				servos.bus[i] = servos.tempBus;
 116:	e9 01       	movw	r28, r18
 118:	ae ed       	ldi	r26, 0xDE	; 222
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	0d 90       	ld	r0, X+
 120:	09 92       	st	Y+, r0
 122:	61 50       	subi	r22, 0x01	; 1
 124:	e1 f7       	brne	.-8      	; 0x11e <setMasks+0xd2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
 126:	e6 95       	lsr	r30
 128:	e6 95       	lsr	r30
 12a:	e6 95       	lsr	r30
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ec 5e       	subi	r30, 0xEC	; 236
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	bc 01       	movw	r22, r24
 134:	67 70       	andi	r22, 0x07	; 7
 136:	70 70       	andi	r23, 0x00	; 0
 138:	da 01       	movw	r26, r20
 13a:	02 c0       	rjmp	.+4      	; 0x140 <setMasks+0xf4>
 13c:	aa 0f       	add	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <setMasks+0xf0>
 144:	bd 01       	movw	r22, r26
 146:	60 95       	com	r22
 148:	70 81       	ld	r23, Z
 14a:	67 23       	and	r22, r23
 14c:	60 83       	st	Z, r22
			}
			asm("nop");				
 14e:	00 00       	nop
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	2d 5f       	subi	r18, 0xFD	; 253
 154:	3f 4f       	sbci	r19, 0xFF	; 255
		
		mainBus[0] = 0xFF;
		mainBus[1] = 0xFF;
		mainBus[2] = 0xFF;
		
		for(i=0;i<24;i++){ 
 156:	88 31       	cpi	r24, 0x18	; 24
 158:	91 05       	cpc	r25, r1
 15a:	89 f6       	brne	.-94     	; 0xfe <setMasks+0xb2>
				mainBus[i/8] &= (uint8_t)~(1<<i%8);
			}
			asm("nop");				
		}	
			
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <refresh>:

void refresh(void){
 162:	a3 e6       	ldi	r26, 0x63	; 99
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	//refresh all the servos
	for(i=0;i<24;i++)servos.times[i].timerVal = servoBuffer[i].timerVal;
 16a:	2d 91       	ld	r18, X+
 16c:	3d 91       	ld	r19, X+
 16e:	fc 01       	movw	r30, r24
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ef 51       	subi	r30, 0x1F	; 31
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	31 83       	std	Z+1, r19	; 0x01
 17a:	20 83       	st	Z, r18
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	91 05       	cpc	r25, r1
 182:	99 f7       	brne	.-26     	; 0x16a <refresh+0x8>
	
	//initialize all the pointers
	servoBusPtr = &servos.bus[0].masks[0];
 184:	86 e9       	ldi	r24, 0x96	; 150
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 62 00 	sts	0x0062, r25
 18c:	80 93 61 00 	sts	0x0061, r24
	servoTimePtr = &servos.times[0].timerVal;
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 18 01 	sts	0x0118, r25
 198:	80 93 17 01 	sts	0x0117, r24
}
 19c:	08 95       	ret

0000019e <seedValues>:
  
void seedValues(void){
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
 1a2:	fc 01       	movw	r30, r24
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ef 51       	subi	r30, 0x1F	; 31
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	11 82       	std	Z+1, r1	; 0x01
 1ae:	10 82       	st	Z, r1
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	88 31       	cpi	r24, 0x18	; 24
 1b4:	91 05       	cpc	r25, r1
 1b6:	a9 f7       	brne	.-22     	; 0x1a2 <seedValues+0x4>
}	
 1b8:	08 95       	ret

000001ba <sort>:
 
void sort(void){
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	52 c0       	rjmp	.+164    	; 0x26c <sort+0xb2>
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 1c8:	ab 01       	movw	r20, r22
void seedValues(void){
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
}	
 
void sort(void){
 1ca:	ba 01       	movw	r22, r20
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
 1d0:	db 01       	movw	r26, r22
 1d2:	aa 0f       	add	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	af 51       	subi	r26, 0x1F	; 31
 1d8:	bf 4f       	sbci	r27, 0xFF	; 255
 1da:	cd 91       	ld	r28, X+
 1dc:	dc 91       	ld	r29, X
 1de:	da 01       	movw	r26, r20
 1e0:	aa 0f       	add	r26, r26
 1e2:	bb 1f       	adc	r27, r27
 1e4:	af 51       	subi	r26, 0x1F	; 31
 1e6:	bf 4f       	sbci	r27, 0xFF	; 255
 1e8:	4d 91       	ld	r20, X+
 1ea:	5c 91       	ld	r21, X
 1ec:	11 97       	sbiw	r26, 0x01	; 1
 1ee:	c4 17       	cp	r28, r20
 1f0:	d5 07       	cpc	r29, r21
 1f2:	90 f5       	brcc	.+100    	; 0x258 <sort+0x9e>
void seedValues(void){
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
}	
 
void sort(void){
 1f4:	7c 01       	movw	r14, r24
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
 1f6:	ce ed       	ldi	r28, 0xDE	; 222
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	48 2f       	mov	r20, r24
 1fc:	59 2f       	mov	r21, r25
 1fe:	da 01       	movw	r26, r20
 200:	43 e0       	ldi	r20, 0x03	; 3
 202:	0d 90       	ld	r0, X+
 204:	09 92       	st	Y+, r0
 206:	41 50       	subi	r20, 0x01	; 1
 208:	e1 f7       	brne	.-8      	; 0x202 <sort+0x48>
				servos.tempTimes = servos.times[i];
 20a:	42 81       	ldd	r20, Z+2	; 0x02
 20c:	53 81       	ldd	r21, Z+3	; 0x03
 20e:	50 93 12 01 	sts	0x0112, r21
 212:	40 93 11 01 	sts	0x0111, r20
				
				servos.times[i] = servos.times[i-1];
 216:	40 81       	ld	r20, Z
 218:	51 81       	ldd	r21, Z+1	; 0x01
 21a:	53 83       	std	Z+3, r21	; 0x03
 21c:	42 83       	std	Z+2, r20	; 0x02
void seedValues(void){
	uint8_t i;
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
}	
 
void sort(void){
 21e:	89 01       	movw	r16, r18
			if(servos.times[i].timerVal < servos.times[i-1].timerVal){
				servos.tempBus = servos.bus[i];
				servos.tempTimes = servos.times[i];
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
 220:	4e 2d       	mov	r20, r14
 222:	5f 2d       	mov	r21, r15
 224:	ea 01       	movw	r28, r20
 226:	42 2f       	mov	r20, r18
 228:	53 2f       	mov	r21, r19
 22a:	da 01       	movw	r26, r20
 22c:	43 e0       	ldi	r20, 0x03	; 3
 22e:	0d 90       	ld	r0, X+
 230:	09 92       	st	Y+, r0
 232:	41 50       	subi	r20, 0x01	; 1
 234:	e1 f7       	brne	.-8      	; 0x22e <sort+0x74>
			
				servos.times[i-1] = servos.tempTimes;
 236:	40 91 11 01 	lds	r20, 0x0111
 23a:	50 91 12 01 	lds	r21, 0x0112
 23e:	51 83       	std	Z+1, r21	; 0x01
 240:	40 83       	st	Z, r20
				servos.bus[i-1] = servos.tempBus;
 242:	40 2f       	mov	r20, r16
 244:	51 2f       	mov	r21, r17
 246:	ea 01       	movw	r28, r20
 248:	ae ed       	ldi	r26, 0xDE	; 222
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	43 e0       	ldi	r20, 0x03	; 3
 24e:	0d 90       	ld	r0, X+
 250:	09 92       	st	Y+, r0
 252:	41 50       	subi	r20, 0x01	; 1
 254:	e1 f7       	brne	.-8      	; 0x24e <sort+0x94>
			
				ErrorFound = 1;	
 256:	11 e0       	ldi	r17, 0x01	; 1
				
				servos.times[i] = servos.times[i-1];
				servos.bus[i] = servos.bus[i-1];
			
				servos.times[i-1] = servos.tempTimes;
				servos.bus[i-1] = servos.tempBus;
 258:	03 96       	adiw	r24, 0x03	; 3
 25a:	2d 5f       	subi	r18, 0xFD	; 253
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	32 96       	adiw	r30, 0x02	; 2
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
		ErrorFound = 0;
		for(i=1;i<24;i++){
 260:	67 31       	cpi	r22, 0x17	; 23
 262:	71 05       	cpc	r23, r1
 264:	09 f0       	breq	.+2      	; 0x268 <sort+0xae>
 266:	b0 cf       	rjmp	.-160    	; 0x1c8 <sort+0xe>
	for(i=0;i<24;i++)servos.times[i].timerVal = 0;  
}	
 
void sort(void){
	uint8_t i,ErrorFound = 1;
	while(ErrorFound){
 268:	11 23       	and	r17, r17
 26a:	59 f0       	breq	.+22     	; 0x282 <sort+0xc8>
 26c:	89 e9       	ldi	r24, 0x99	; 153
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	9c 01       	movw	r18, r24
 272:	23 50       	subi	r18, 0x03	; 3
 274:	30 40       	sbci	r19, 0x00	; 0
 276:	e1 ee       	ldi	r30, 0xE1	; 225
 278:	f0 e0       	ldi	r31, 0x00	; 0
		ErrorFound = 0;
		for(i=1;i<24;i++){
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	a4 cf       	rjmp	.-184    	; 0x1ca <sort+0x10>
			
				ErrorFound = 1;	
			}				
		}
	}
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	08 95       	ret

00000290 <postSortMask>:

void postSortMask(void){
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 e0       	ldi	r16, 0x00	; 0
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	e0 e0       	ldi	r30, 0x00	; 0
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	1e c0       	rjmp	.+60     	; 0x2e2 <postSortMask+0x52>
 2a6:	ae 01       	movw	r20, r28
 2a8:	42 0f       	add	r20, r18
 2aa:	53 1f       	adc	r21, r19
 2ac:	40 0f       	add	r20, r16
 2ae:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2b0:	da 01       	movw	r26, r20
 2b2:	13 96       	adiw	r26, 0x03	; 3
 2b4:	7c 91       	ld	r23, X
 2b6:	69 91       	ld	r22, Y+
			}				
		}
	}
}

void postSortMask(void){
 2b8:	ae 01       	movw	r20, r28
 2ba:	42 0f       	add	r20, r18
 2bc:	53 1f       	adc	r21, r19
 2be:	40 0f       	add	r20, r16
 2c0:	51 1f       	adc	r21, r17
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
 2c2:	67 23       	and	r22, r23
 2c4:	da 01       	movw	r26, r20
 2c6:	12 96       	adiw	r26, 0x02	; 2
 2c8:	6c 93       	st	X, r22
 2ca:	12 97       	sbiw	r26, 0x02	; 2
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
		for(j=0;j<3;j++){
 2cc:	c8 17       	cp	r28, r24
 2ce:	d9 07       	cpc	r29, r25
 2d0:	51 f7       	brne	.-44     	; 0x2a6 <postSortMask+0x16>
 2d2:	31 96       	adiw	r30, 0x01	; 1
 2d4:	23 50       	subi	r18, 0x03	; 3
 2d6:	30 40       	sbci	r19, 0x00	; 0
 2d8:	0d 5f       	subi	r16, 0xFD	; 253
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void postSortMask(void){
	uint8_t i,j;
	for(i=0;i<23;i++){
 2dc:	e7 31       	cpi	r30, 0x17	; 23
 2de:	f1 05       	cpc	r31, r1
 2e0:	71 f0       	breq	.+28     	; 0x2fe <postSortMask+0x6e>
			}				
		}
	}
}

void postSortMask(void){
 2e2:	cf 01       	movw	r24, r30
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	a1 d1       	rcall	.+834    	; 0x62c <__mulhi3>
 2ea:	ec 01       	movw	r28, r24
 2ec:	ca 56       	subi	r28, 0x6A	; 106
 2ee:	df 4f       	sbci	r29, 0xFF	; 255
 2f0:	88 27       	eor	r24, r24
 2f2:	99 27       	eor	r25, r25
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
	uint8_t i,j;
	for(i=0;i<23;i++){
 2f8:	87 56       	subi	r24, 0x67	; 103
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	d4 cf       	rjmp	.-88     	; 0x2a6 <postSortMask+0x16>
		for(j=0;j<3;j++){
			servos.bus[i+1].masks[j] &= servos.bus[i].masks[j];
			//servos.bus[i+1].masks[j] &= mainBus[j];
		}			
	}
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <mulitpleServoTimeFix>:



//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
 308:	1f 93       	push	r17
static uint8_t i;
	servos.tempBus = servos.bus[23];
 30a:	ee ed       	ldi	r30, 0xDE	; 222
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	df 01       	movw	r26, r30
 310:	13 97       	sbiw	r26, 0x03	; 3
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	0d 90       	ld	r0, X+
 316:	01 92       	st	Z+, r0
 318:	81 50       	subi	r24, 0x01	; 1
 31a:	e1 f7       	brne	.-8      	; 0x314 <mulitpleServoTimeFix+0xc>
	for(i=23;i>0;i--){
 31c:	87 e1       	ldi	r24, 0x17	; 23
 31e:	80 93 60 00 	sts	0x0060, r24
 322:	2c c0       	rjmp	.+88     	; 0x37c <mulitpleServoTimeFix+0x74>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
 324:	21 2f       	mov	r18, r17
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	c9 01       	movw	r24, r18
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	fc 01       	movw	r30, r24
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	ef 51       	subi	r30, 0x1F	; 31
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	60 81       	ld	r22, Z
 338:	71 81       	ldd	r23, Z+1	; 0x01
 33a:	f9 01       	movw	r30, r18
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	ef 51       	subi	r30, 0x1F	; 31
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	40 81       	ld	r20, Z
 346:	51 81       	ldd	r21, Z+1	; 0x01
 348:	64 17       	cp	r22, r20
 34a:	75 07       	cpc	r23, r21
 34c:	a1 f4       	brne	.+40     	; 0x376 <mulitpleServoTimeFix+0x6e>
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
 34e:	11 82       	std	Z+1, r1	; 0x01
 350:	10 82       	st	Z, r1
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
 352:	63 e0       	ldi	r22, 0x03	; 3
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	6a d1       	rcall	.+724    	; 0x62c <__mulhi3>
 358:	fc 01       	movw	r30, r24
 35a:	ea 56       	subi	r30, 0x6A	; 106
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	c9 01       	movw	r24, r18
 360:	63 e0       	ldi	r22, 0x03	; 3
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	63 d1       	rcall	.+710    	; 0x62c <__mulhi3>
 366:	dc 01       	movw	r26, r24
 368:	aa 56       	subi	r26, 0x6A	; 106
 36a:	bf 4f       	sbci	r27, 0xFF	; 255
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0d 90       	ld	r0, X+
 370:	01 92       	st	Z+, r0
 372:	81 50       	subi	r24, 0x01	; 1
 374:	e1 f7       	brne	.-8      	; 0x36e <mulitpleServoTimeFix+0x66>

//This function serves to decrease the 'unique' number of servos if there are multiple servos set to the same angle.
void mulitpleServoTimeFix(){
static uint8_t i;
	servos.tempBus = servos.bus[23];
	for(i=23;i>0;i--){
 376:	11 50       	subi	r17, 0x01	; 1
 378:	10 93 60 00 	sts	0x0060, r17
 37c:	10 91 60 00 	lds	r17, 0x0060
 380:	11 23       	and	r17, r17
 382:	81 f6       	brne	.-96     	; 0x324 <mulitpleServoTimeFix+0x1c>
		if(servos.times[i-1].timerVal == servos.times[i].timerVal){ //if the current servo[i] is equal to the next servo down
			servos.times[i].timerVal = 0;							//the current servo time goes to 0
			servos.bus[i-1] = servos.bus[i];						//the next servo then takes the bus value of the next highest servo
		}			
	}
}	
 384:	1f 91       	pop	r17
 386:	08 95       	ret

00000388 <servoDataIRQ>:


void servoDataIRQ()
{
	if(getNumBytesInBuffer() < (16 -1)) PORTD ^= _BV(PORTD1);//this will trigger a PCINT on the xmega
 388:	1f d1       	rcall	.+574    	; 0x5c8 <getNumBytesInBuffer>
 38a:	8f 30       	cpi	r24, 0x0F	; 15
 38c:	91 05       	cpc	r25, r1
 38e:	24 f4       	brge	.+8      	; 0x398 <servoDataIRQ+0x10>
 390:	82 b3       	in	r24, 0x12	; 18
 392:	92 e0       	ldi	r25, 0x02	; 2
 394:	89 27       	eor	r24, r25
 396:	82 bb       	out	0x12, r24	; 18
 398:	08 95       	ret

0000039a <main>:

//static uint16_t angle = 900;


int main(void)
{
 39a:	1f 93       	push	r17
	bytesInBuffer = 0;
 39c:	10 92 19 01 	sts	0x0119, r1
	DDRB = 0xFF;//enable all port B pins (servo pins as Outputs)
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE;//enables every pin except the uart receive pin as an output
 3a4:	8e ef       	ldi	r24, 0xFE	; 254
 3a6:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
 3a8:	12 ba       	out	0x12, r1	; 18
	uartInit();
 3aa:	c3 d0       	rcall	.+390    	; 0x532 <uartInit>
	refresh();
 3ac:	da de       	rcall	.-588    	; 0x162 <refresh>
	setMasks();
 3ae:	4e de       	rcall	.-868    	; 0x4c <setMasks>
	seedValues();
 3b0:	f6 de       	rcall	.-532    	; 0x19e <seedValues>
	sort();
 3b2:	03 df       	rcall	.-506    	; 0x1ba <sort>
	postSortMask();
 3b4:	6d df       	rcall	.-294    	; 0x290 <postSortMask>
	mulitpleServoTimeFix();
 3b6:	a8 df       	rcall	.-176    	; 0x308 <mulitpleServoTimeFix>
	timer1Init();
 3b8:	b0 d0       	rcall	.+352    	; 0x51a <timer1Init>
	sei();
 3ba:	78 94       	sei
		do 
		{
			if(TCNT1>(uint16_t)*servoTimePtr){		
				if((uint16_t)*servoTimePtr != 0){
					PORTB =	*servoBusPtr++; 
					PORTD =	DECODE0;	     
 3bc:	10 e1       	ldi	r17, 0x10	; 16
	sei();
	while(1)
    {
		do 
		{
			if(TCNT1>(uint16_t)*servoTimePtr){		
 3be:	4c b5       	in	r20, 0x2c	; 44
 3c0:	5d b5       	in	r21, 0x2d	; 45
 3c2:	80 91 17 01 	lds	r24, 0x0117
 3c6:	90 91 18 01 	lds	r25, 0x0118
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 81       	ld	r18, Z
 3ce:	31 81       	ldd	r19, Z+1	; 0x01
 3d0:	24 17       	cp	r18, r20
 3d2:	35 07       	cpc	r19, r21
 3d4:	a0 f5       	brcc	.+104    	; 0x43e <main+0xa4>
 3d6:	a0 91 61 00 	lds	r26, 0x0061
 3da:	b0 91 62 00 	lds	r27, 0x0062
 3de:	02 96       	adiw	r24, 0x02	; 2
				if((uint16_t)*servoTimePtr != 0){
 3e0:	21 15       	cp	r18, r1
 3e2:	31 05       	cpc	r19, r1
 3e4:	19 f1       	breq	.+70     	; 0x42c <main+0x92>
					PORTB =	*servoBusPtr++; 
 3e6:	fd 01       	movw	r30, r26
 3e8:	21 91       	ld	r18, Z+
 3ea:	28 bb       	out	0x18, r18	; 24
 3ec:	f0 93 62 00 	sts	0x0062, r31
 3f0:	e0 93 61 00 	sts	0x0061, r30
					PORTD =	DECODE0;	     
 3f4:	12 bb       	out	0x12, r17	; 18
					PORTB =	*servoBusPtr++; 
 3f6:	11 96       	adiw	r26, 0x01	; 1
 3f8:	2c 91       	ld	r18, X
 3fa:	11 97       	sbiw	r26, 0x01	; 1
 3fc:	28 bb       	out	0x18, r18	; 24
 3fe:	9f 01       	movw	r18, r30
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	30 93 62 00 	sts	0x0062, r19
 408:	20 93 61 00 	sts	0x0061, r18
					PORTD +=DECODE0;			
 40c:	42 b3       	in	r20, 0x12	; 18
 40e:	40 5f       	subi	r20, 0xF0	; 240
 410:	42 bb       	out	0x12, r20	; 18
					PORTB =	*servoBusPtr++;		
 412:	41 81       	ldd	r20, Z+1	; 0x01
 414:	48 bb       	out	0x18, r20	; 24
 416:	2f 5f       	subi	r18, 0xFF	; 255
 418:	3f 4f       	sbci	r19, 0xFF	; 255
 41a:	30 93 62 00 	sts	0x0062, r19
 41e:	20 93 61 00 	sts	0x0061, r18
					PORTD +=DECODE1;		
 422:	22 b3       	in	r18, 0x12	; 18
 424:	20 5e       	subi	r18, 0xE0	; 224
 426:	22 bb       	out	0x12, r18	; 18
					PORTD =	0;
 428:	12 ba       	out	0x12, r1	; 18
 42a:	05 c0       	rjmp	.+10     	; 0x436 <main+0x9c>
					servoTimePtr++;
				}				
				else{
					servoBusPtr += 3;
 42c:	13 96       	adiw	r26, 0x03	; 3
 42e:	b0 93 62 00 	sts	0x0062, r27
 432:	a0 93 61 00 	sts	0x0061, r26
					servoTimePtr++;
 436:	90 93 18 01 	sts	0x0118, r25
 43a:	80 93 17 01 	sts	0x0117, r24
				}
			}					
		} while (servoTimePtr <= servoTimesEnd);
 43e:	80 91 17 01 	lds	r24, 0x0117
 442:	90 91 18 01 	lds	r25, 0x0118
 446:	f1 e0       	ldi	r31, 0x01	; 1
 448:	8f 30       	cpi	r24, 0x0F	; 15
 44a:	9f 07       	cpc	r25, r31
 44c:	09 f0       	breq	.+2      	; 0x450 <main+0xb6>
 44e:	08 f4       	brcc	.+2      	; 0x452 <main+0xb8>
 450:	b6 cf       	rjmp	.-148    	; 0x3be <main+0x24>
		refresh();
 452:	87 de       	rcall	.-754    	; 0x162 <refresh>
		setMasks();
 454:	fb dd       	rcall	.-1034   	; 0x4c <setMasks>
		sort();
 456:	b1 de       	rcall	.-670    	; 0x1ba <sort>
		postSortMask();
 458:	1b df       	rcall	.-458    	; 0x290 <postSortMask>
		mulitpleServoTimeFix();
 45a:	56 df       	rcall	.-340    	; 0x308 <mulitpleServoTimeFix>
		UCSRB |=  _BV(RXCIE);	//enable the recieve interrupt on the uart	
 45c:	57 9a       	sbi	0x0a, 7	; 10
		servoDataIRQ();	//sends an interrupt request to the Xmega
 45e:	94 df       	rcall	.-216    	; 0x388 <servoDataIRQ>
			uart_store(i | 0x80);
			
		}
		angle+=200;
		if(angle > 3600) angle = 900;*/
		while(TCNT1>10)
 460:	2b c0       	rjmp	.+86     	; 0x4b8 <main+0x11e>
		{
				
			if(bytesInBuffer >= 4){
 462:	24 30       	cpi	r18, 0x04	; 4
 464:	58 f1       	brcs	.+86     	; 0x4bc <main+0x122>
				servoIdentifier = uart_getchar(NULL);
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	72 d0       	rcall	.+228    	; 0x550 <uart_getchar>
 46c:	80 93 13 01 	sts	0x0113, r24
				if(servoIdentifier <= 23){
 470:	88 31       	cpi	r24, 0x18	; 24
 472:	10 f5       	brcc	.+68     	; 0x4b8 <main+0x11e>
					servoTime.byte._H = uart_getchar(NULL);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	6b d0       	rcall	.+214    	; 0x550 <uart_getchar>
 47a:	80 93 94 00 	sts	0x0094, r24
					servoTime.byte._L = uart_getchar(NULL);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	66 d0       	rcall	.+204    	; 0x550 <uart_getchar>
 484:	80 93 93 00 	sts	0x0093, r24
					check = uart_getchar(NULL);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	61 d0       	rcall	.+194    	; 0x550 <uart_getchar>
 48e:	80 93 95 00 	sts	0x0095, r24
					if(check == (servoIdentifier | 0x80) ){
 492:	e0 91 13 01 	lds	r30, 0x0113
 496:	9e 2f       	mov	r25, r30
 498:	90 68       	ori	r25, 0x80	; 128
 49a:	89 17       	cp	r24, r25
 49c:	61 f4       	brne	.+24     	; 0x4b6 <main+0x11c>
						servoBuffer[servoIdentifier].timerVal = servoTime.Val;
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	ed 59       	subi	r30, 0x9D	; 157
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
 4a8:	80 91 93 00 	lds	r24, 0x0093
 4ac:	90 91 94 00 	lds	r25, 0x0094
 4b0:	91 83       	std	Z+1, r25	; 0x01
 4b2:	80 83       	st	Z, r24
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <main+0x11e>
					}
					else flush();
 4b6:	8b d0       	rcall	.+278    	; 0x5ce <flush>
		angle+=200;
		if(angle > 3600) angle = 900;*/
		while(TCNT1>10)
		{
				
			if(bytesInBuffer >= 4){
 4b8:	20 91 19 01 	lds	r18, 0x0119
			uart_store(i | 0x80);
			
		}
		angle+=200;
		if(angle > 3600) angle = 900;*/
		while(TCNT1>10)
 4bc:	8c b5       	in	r24, 0x2c	; 44
 4be:	9d b5       	in	r25, 0x2d	; 45
 4c0:	8b 30       	cpi	r24, 0x0B	; 11
 4c2:	91 05       	cpc	r25, r1
 4c4:	70 f6       	brcc	.-100    	; 0x462 <main+0xc8>
 4c6:	7b cf       	rjmp	.-266    	; 0x3be <main+0x24>

000004c8 <__vector_default>:
			}	
		}
    }
}

ISR(BADISR_vect){}
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <__vector_4>:

ISR(TIMER1_COMPA_vect){
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	8f 93       	push	r24
	PORTB =	mainBus[0]; 
 4e8:	80 91 14 01 	lds	r24, 0x0114
 4ec:	88 bb       	out	0x18, r24	; 24
	PORTD =	DECODE0;	     
 4ee:	80 e1       	ldi	r24, 0x10	; 16
 4f0:	82 bb       	out	0x12, r24	; 18
	PORTB =	mainBus[1]; 
 4f2:	80 91 15 01 	lds	r24, 0x0115
 4f6:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE0;			
 4f8:	82 b3       	in	r24, 0x12	; 18
 4fa:	80 5f       	subi	r24, 0xF0	; 240
 4fc:	82 bb       	out	0x12, r24	; 18
	PORTB =	mainBus[2];		
 4fe:	80 91 16 01 	lds	r24, 0x0116
 502:	88 bb       	out	0x18, r24	; 24
	PORTD +=DECODE1;		
 504:	82 b3       	in	r24, 0x12	; 18
 506:	80 5e       	subi	r24, 0xE0	; 224
 508:	82 bb       	out	0x12, r24	; 18
	PORTD =	0;
 50a:	12 ba       	out	0x12, r1	; 18
	UCSRB |=  _BV(RXCIE);//disable RX interrupt so there are no interruptions to the time critical servo code.
 50c:	57 9a       	sbi	0x0a, 7	; 10
}
 50e:	8f 91       	pop	r24
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <timer1Init>:
 */ 
#include "Timer.h"


void timer1Init(void){
	TCCR1A = 0;
 51a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x1A; //sets ICR1 as top val reg and sets the prescaler to div8 enables ctc for immediate updates to ocr1x
 51c:	8a e1       	ldi	r24, 0x1A	; 26
 51e:	8e bd       	out	0x2e, r24	; 46
	TIMSK = _BV(OCIE1A);
 520:	80 e4       	ldi	r24, 0x40	; 64
 522:	89 bf       	out	0x39, r24	; 57
	ICR1 = 	(F_CPU/(50*8)); //1 timer clock equals 1us period of 20ms ie 20000us	
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	95 e7       	ldi	r25, 0x75	; 117
 528:	95 bd       	out	0x25, r25	; 37
 52a:	84 bd       	out	0x24, r24	; 36
	OCR1A = (F_CPU/(50*8));
 52c:	9b bd       	out	0x2b, r25	; 43
 52e:	8a bd       	out	0x2a, r24	; 42
 530:	08 95       	ret

00000532 <uartInit>:

#include "uart.h"

void uartInit(void){

UBRRH = 0;//set for baud of 125000... dang fast
 532:	12 b8       	out	0x02, r1	; 2
UBRRL = 5;
 534:	85 e0       	ldi	r24, 0x05	; 5
 536:	89 b9       	out	0x09, r24	; 9

UCSRB	|= _BV(RXEN) ;//holding off on tx enable as of right now it may be better to simply receive data with the tx line as a sort of flow control 
 538:	54 9a       	sbi	0x0a, 4	; 10

buffer.head = uartBufferBegin;
 53a:	8e e1       	ldi	r24, 0x1E	; 30
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	90 93 1b 01 	sts	0x011B, r25
 542:	80 93 1a 01 	sts	0x011A, r24
buffer.tail = uartBufferBegin;
 546:	90 93 1d 01 	sts	0x011D, r25
 54a:	80 93 1c 01 	sts	0x011C, r24

}
 54e:	08 95       	ret

00000550 <uart_getchar>:


int uart_getchar(FILE *stream){
	bytesInBuffer--;
 550:	80 91 19 01 	lds	r24, 0x0119
 554:	81 50       	subi	r24, 0x01	; 1
 556:	80 93 19 01 	sts	0x0119, r24
	if (buffer.tail == uartBufferEnd){
 55a:	e0 91 1c 01 	lds	r30, 0x011C
 55e:	f0 91 1d 01 	lds	r31, 0x011D
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	ed 34       	cpi	r30, 0x4D	; 77
 566:	f8 07       	cpc	r31, r24
 568:	19 f4       	brne	.+6      	; 0x570 <uart_getchar+0x20>
		uint8_t temp = *buffer.tail;
 56a:	80 81       	ld	r24, Z
		buffer.tail = uartBufferBegin;
 56c:	bf 97       	sbiw	r30, 0x2f	; 47
 56e:	01 c0       	rjmp	.+2      	; 0x572 <uart_getchar+0x22>
		return temp;
	}
	else return *buffer.tail++;
 570:	81 91       	ld	r24, Z+
 572:	f0 93 1d 01 	sts	0x011D, r31
 576:	e0 93 1c 01 	sts	0x011C, r30
}
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	08 95       	ret

0000057e <uart_store>:

void uart_store(unsigned char c){
	bytesInBuffer++;
 57e:	90 91 19 01 	lds	r25, 0x0119
 582:	9f 5f       	subi	r25, 0xFF	; 255
 584:	90 93 19 01 	sts	0x0119, r25
	if(buffer.head == uartBufferEnd){
 588:	e0 91 1a 01 	lds	r30, 0x011A
 58c:	f0 91 1b 01 	lds	r31, 0x011B
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	ed 34       	cpi	r30, 0x4D	; 77
 594:	f9 07       	cpc	r31, r25
 596:	19 f4       	brne	.+6      	; 0x59e <uart_store+0x20>
		*buffer.head = c;
 598:	80 83       	st	Z, r24
		buffer.head = uartBufferBegin;	
 59a:	bf 97       	sbiw	r30, 0x2f	; 47
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <uart_store+0x22>
	}		
	else *buffer.head++ = c;
 59e:	81 93       	st	Z+, r24
 5a0:	f0 93 1b 01 	sts	0x011B, r31
 5a4:	e0 93 1a 01 	sts	0x011A, r30
	servoDataIRQ();
 5a8:	ef de       	rcall	.-546    	; 0x388 <servoDataIRQ>
}
 5aa:	08 95       	ret

000005ac <dataInbuffer>:

uint8_t dataInbuffer(void){
	if(buffer.head == buffer.tail) return 0;	//no data to be read
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	40 91 1a 01 	lds	r20, 0x011A
 5b2:	50 91 1b 01 	lds	r21, 0x011B
 5b6:	20 91 1c 01 	lds	r18, 0x011C
 5ba:	30 91 1d 01 	lds	r19, 0x011D
 5be:	42 17       	cp	r20, r18
 5c0:	53 07       	cpc	r21, r19
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <dataInbuffer+0x1a>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;							//data to be read
}
 5c6:	08 95       	ret

000005c8 <getNumBytesInBuffer>:

uint8_t getNumBytesInBuffer(void){
return bytesInBuffer;
}
 5c8:	80 91 19 01 	lds	r24, 0x0119
 5cc:	08 95       	ret

000005ce <flush>:

void flush(void){
	buffer.head = buffer.tail;
 5ce:	80 91 1c 01 	lds	r24, 0x011C
 5d2:	90 91 1d 01 	lds	r25, 0x011D
 5d6:	90 93 1b 01 	sts	0x011B, r25
 5da:	80 93 1a 01 	sts	0x011A, r24
	bytesInBuffer = 0;
 5de:	10 92 19 01 	sts	0x0119, r1
}
 5e2:	08 95       	ret

000005e4 <__vector_7>:

ISR(USART_RX_vect){
 5e4:	1f 92       	push	r1
 5e6:	0f 92       	push	r0
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	0f 92       	push	r0
 5ec:	11 24       	eor	r1, r1
 5ee:	2f 93       	push	r18
 5f0:	3f 93       	push	r19
 5f2:	4f 93       	push	r20
 5f4:	5f 93       	push	r21
 5f6:	6f 93       	push	r22
 5f8:	7f 93       	push	r23
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	af 93       	push	r26
 600:	bf 93       	push	r27
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
	uart_store(UDR);	
 606:	8c b1       	in	r24, 0x0c	; 12
 608:	ba df       	rcall	.-140    	; 0x57e <uart_store>
}
 60a:	ff 91       	pop	r31
 60c:	ef 91       	pop	r30
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	1f 90       	pop	r1
 62a:	18 95       	reti

0000062c <__mulhi3>:
 62c:	55 27       	eor	r21, r21
 62e:	00 24       	eor	r0, r0

00000630 <__mulhi3_loop>:
 630:	80 ff       	sbrs	r24, 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <__mulhi3_skip1>
 634:	06 0e       	add	r0, r22
 636:	57 1f       	adc	r21, r23

00000638 <__mulhi3_skip1>:
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	61 15       	cp	r22, r1
 63e:	71 05       	cpc	r23, r1
 640:	21 f0       	breq	.+8      	; 0x64a <__mulhi3_exit>
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	99 f7       	brne	.-26     	; 0x630 <__mulhi3_loop>

0000064a <__mulhi3_exit>:
 64a:	95 2f       	mov	r25, r21
 64c:	80 2d       	mov	r24, r0
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
